namespace System.Reactive.Linq {
  public static partial class QbservableAliases {
    public static System.Reactive.Linq.IQbservable<TSource> Filter<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Filter<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TOther> FlatMap<TSource, TOther>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TOther> other) { return default(System.Reactive.Linq.IQbservable<TOther>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.IObservable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.IObservable<TResult>>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.IObservable<TResult>>> onError, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>>> onCompleted) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Threading.Tasks.Task<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.IObservable<TResult>>> onError, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>>> onCompleted) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TCollection, System.Int32, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.IObservable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TCollection, System.Int32, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TTaskResult, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TTaskResult, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, TTaskResult, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, TTaskResult, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Map<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Map<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TResult>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
  }
}
namespace System.Reactive.Observable.Aliases {
  public static partial class QueryLanguage {
    public static System.IObservable<TSource> Filter<TSource>(this System.IObservable<TSource> source, System.Func<TSource, System.Boolean> predicate) { return default(System.IObservable<TSource>); }
    public static System.IObservable<TSource> Filter<TSource>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.Boolean> predicate) { return default(System.IObservable<TSource>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>> selector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>> selector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.IObservable<TResult>> selector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.IObservable<TResult>> onNext, System.Func<System.Exception, System.IObservable<TResult>> onError, System.Func<System.IObservable<TResult>> onCompleted) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>> selector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.Threading.Tasks.Task<TResult>> selector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.IObservable<TResult>> selector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.IObservable<TResult>> onNext, System.Func<System.Exception, System.IObservable<TResult>> onError, System.Func<System.IObservable<TResult>> onCompleted) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>> selector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Threading.Tasks.Task<TResult>> selector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TOther> FlatMap<TSource, TOther>(this System.IObservable<TSource> source, System.IObservable<TOther> other) { return default(System.IObservable<TOther>); }
    public static System.IObservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource, TCollection, TResult> resultSelector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>> collectionSelector, System.Func<TSource, System.Int32, TCollection, System.Int32, TResult> resultSelector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.IObservable<TCollection>> collectionSelector, System.Func<TSource, System.Int32, TCollection, System.Int32, TResult> resultSelector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>> taskSelector, System.Func<TSource, System.Int32, TTaskResult, TResult> resultSelector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, System.Threading.Tasks.Task<TTaskResult>> taskSelector, System.Func<TSource, System.Int32, TTaskResult, TResult> resultSelector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TCollection, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.IObservable<TCollection>> collectionSelector, System.Func<TSource, TCollection, TResult> resultSelector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>> taskSelector, System.Func<TSource, TTaskResult, TResult> resultSelector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> FlatMap<TSource, TTaskResult, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>> taskSelector, System.Func<TSource, TTaskResult, TResult> resultSelector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> Map<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, TResult> selector) { return default(System.IObservable<TResult>); }
    public static System.IObservable<TResult> Map<TSource, TResult>(this System.IObservable<TSource> source, System.Func<TSource, System.Int32, TResult> selector) { return default(System.IObservable<TResult>); }
  }
}
