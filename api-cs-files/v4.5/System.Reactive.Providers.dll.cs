namespace System.Reactive.Joins {
  public abstract partial class QueryablePattern {
    protected QueryablePattern(System.Linq.Expressions.Expression expression) { }
    public System.Linq.Expressions.Expression Expression { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Linq.Expressions.Expression); } }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11> And<TSource11>(System.IObservable<TSource11> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12> And<TSource12>(System.IObservable<TSource12> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13> And<TSource13>(System.IObservable<TSource13> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14> And<TSource14>(System.IObservable<TSource14> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15> And<TSource15>(System.IObservable<TSource15> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16> And<TSource16>(System.IObservable<TSource16> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3> And<TSource3>(System.IObservable<TSource3> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4> And<TSource4>(System.IObservable<TSource4> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5> And<TSource5>(System.IObservable<TSource5> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6> And<TSource6>(System.IObservable<TSource6> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7> And<TSource7>(System.IObservable<TSource7> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8> And<TSource8>(System.IObservable<TSource8> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9> And<TSource9>(System.IObservable<TSource9> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9> : System.Reactive.Joins.QueryablePattern {
    internal QueryablePattern() : base (default(System.Linq.Expressions.Expression)) { }
    public System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10> And<TSource10>(System.IObservable<TSource10> other) { return default(System.Reactive.Joins.QueryablePattern<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10>); }
    public System.Reactive.Joins.QueryablePlan<TResult> Then<TResult>(System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
  }
  public partial class QueryablePlan<TResult> {
    internal QueryablePlan() { }
    public System.Linq.Expressions.Expression Expression { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Linq.Expressions.Expression); } }
  }
}
namespace System.Reactive.Linq {
  public static partial class Qbservable {
    public static System.Reactive.Linq.IQbservableProvider Provider { get { return default(System.Reactive.Linq.IQbservableProvider); } }
    public static System.Reactive.Linq.IQbservable<TSource> Aggregate<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>> accumulator) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TAccumulate> Aggregate<TSource, TAccumulate>(this System.Reactive.Linq.IQbservable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>> accumulator) { return default(System.Reactive.Linq.IQbservable<TAccumulate>); }
    public static System.Reactive.Linq.IQbservable<TResult> Aggregate<TSource, TAccumulate, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>> accumulator, System.Linq.Expressions.Expression<System.Func<TAccumulate, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> All<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.Reactive.Linq.IQbservable<TSource> Amb<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.IObservable<TSource> second) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Amb<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Amb<TSource>(this System.Reactive.Linq.IQbservableProvider provider, params System.IObservable<TSource>[] sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Joins.QueryablePattern<TLeft, TRight> And<TLeft, TRight>(this System.Reactive.Linq.IQbservable<TLeft> left, System.IObservable<TRight> right) { return default(System.Reactive.Joins.QueryablePattern<TLeft, TRight>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> Any<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> Any<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.IObservable<TSource> AsObservable<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.IObservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> AsQbservable<TSource>(this System.IObservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Decimal> Average(this System.Reactive.Linq.IQbservable<System.Decimal> source) { return default(System.Reactive.Linq.IQbservable<System.Decimal>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Average(this System.Reactive.Linq.IQbservable<System.Double> source) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Average(this System.Reactive.Linq.IQbservable<System.Int32> source) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Average(this System.Reactive.Linq.IQbservable<System.Int64> source) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> Average(this System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Average(this System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Average(this System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Average(this System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> Average(this System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Single>>); }
    public static System.Reactive.Linq.IQbservable<System.Single> Average(this System.Reactive.Linq.IQbservable<System.Single> source) { return default(System.Reactive.Linq.IQbservable<System.Single>); }
    public static System.Reactive.Linq.IQbservable<System.Decimal> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>> selector) { return default(System.Reactive.Linq.IQbservable<System.Decimal>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>> selector) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>> selector) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>> selector) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Single>>); }
    public static System.Reactive.Linq.IQbservable<System.Single> Average<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>> selector) { return default(System.Reactive.Linq.IQbservable<System.Single>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count, int skip) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, int count) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, int count, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, System.TimeSpan timeShift) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, System.TimeSpan timeShift, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource, TBufferBoundary>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TBufferBoundary> bufferBoundaries) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource, TBufferClosing>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TBufferClosing>>> bufferClosingSelector) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Buffer<TSource, TBufferOpening, TBufferClosing>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TBufferOpening> bufferOpenings, System.Linq.Expressions.Expression<System.Func<TBufferOpening, System.IObservable<TBufferClosing>>> bufferClosingSelector) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<TResult> Case<TValue, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TValue>> selector, System.Collections.Generic.IDictionary<TValue, System.IObservable<TResult>> sources) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Case<TValue, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TValue>> selector, System.Collections.Generic.IDictionary<TValue, System.IObservable<TResult>> sources, System.IObservable<TResult> defaultSource) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Case<TValue, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TValue>> selector, System.Collections.Generic.IDictionary<TValue, System.IObservable<TResult>> sources, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Cast<TResult>(this System.Reactive.Linq.IQbservable<System.Object> source) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> Catch<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.IObservable<TSource> second) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Catch<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Catch<TSource>(this System.Reactive.Linq.IQbservableProvider provider, params System.IObservable<TSource>[] sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Catch<TSource, TException>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TException, System.IObservable<TSource>>> handler) where TException : System.Exception { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Linq.IQueryable<System.Collections.Generic.IList<TSource>> Chunkify<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Linq.IQueryable<System.Collections.Generic.IList<TSource>>); }
    public static System.Linq.IQueryable<TResult> Collect<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TResult>> newCollector, System.Linq.Expressions.Expression<System.Func<TResult, TSource, TResult>> merge) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Linq.IQueryable<TResult> Collect<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TResult>> getInitialCollector, System.Linq.Expressions.Expression<System.Func<TResult, TSource, TResult>> merge, System.Linq.Expressions.Expression<System.Func<TResult, TResult>> getNewCollector) { return default(System.Linq.IQueryable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> CombineLatest<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> CombineLatest<TSource>(this System.Reactive.Linq.IQbservableProvider provider, params System.IObservable<TSource>[] sources) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.IObservable<TSource13> source13, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.IObservable<TSource13> source13, System.IObservable<TSource14> source14, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.IObservable<TSource13> source13, System.IObservable<TSource14> source14, System.IObservable<TSource15> source15, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.IObservable<TSource13> source13, System.IObservable<TSource14> source14, System.IObservable<TSource15> source15, System.IObservable<TSource16> source16, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources, System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.IList<TSource>, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TResult>(this System.Reactive.Linq.IQbservable<TSource1> first, System.IObservable<TSource2> second, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> CombineLatest<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> Concat<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.IObservable<TSource> second) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Concat<TSource>(this System.Reactive.Linq.IQbservable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Concat<TSource>(this System.Reactive.Linq.IQbservable<System.Threading.Tasks.Task<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Concat<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Concat<TSource>(this System.Reactive.Linq.IQbservableProvider provider, params System.IObservable<TSource>[] sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> Contains<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, TSource value) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> Contains<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, TSource value, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Count<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Count<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<TResult> Create<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>, System.Action>> subscribe) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Create<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>, System.IDisposable>> subscribe) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Create<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Action>>> subscribeAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Create<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IDisposable>>> subscribeAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Create<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.Task>> subscribeAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Create<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>, System.Threading.Tasks.Task<System.Action>>> subscribeAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Create<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>, System.Threading.Tasks.Task<System.IDisposable>>> subscribeAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Create<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.IObserver<TResult>, System.Threading.Tasks.Task>> subscribeAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> DefaultIfEmpty<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DefaultIfEmpty<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, TSource defaultValue) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> Defer<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>>> observableFactory) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Defer<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<System.IObservable<TResult>>>> observableFactoryAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> DeferAsync<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IObservable<TResult>>>> observableFactoryAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> Delay<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset dueTime) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Delay<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Delay<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Delay<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Delay<TSource, TDelay>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TDelay> subscriptionDelay, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TDelay>>> delayDurationSelector) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Delay<TSource, TDelay>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TDelay>>> delayDurationSelector) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DelaySubscription<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset dueTime) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DelaySubscription<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DelaySubscription<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DelaySubscription<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Dematerialize<TSource>(this System.Reactive.Linq.IQbservable<System.Reactive.Notification<TSource>> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Distinct<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Distinct<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Distinct<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Distinct<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DistinctUntilChanged<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DistinctUntilChanged<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DistinctUntilChanged<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Do<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObserver<TSource> observer) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Do<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Action<TSource>> onNext) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Do<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Action<TSource>> onNext, System.Linq.Expressions.Expression<System.Action<System.Exception>> onError) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Do<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Action<TSource>> onNext, System.Linq.Expressions.Expression<System.Action<System.Exception>> onError, System.Linq.Expressions.Expression<System.Action> onCompleted) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Do<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Action<TSource>> onNext, System.Linq.Expressions.Expression<System.Action> onCompleted) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> DoWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.Boolean>> condition) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> ElementAt<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int index) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> ElementAtOrDefault<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int index) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> Empty<TResult>(this System.Reactive.Linq.IQbservableProvider provider) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Empty<TResult>(this System.Reactive.Linq.IQbservableProvider provider, TResult witness) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Empty<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Empty<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Reactive.Concurrency.IScheduler scheduler, TResult witness) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> Finally<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Action> finallyAction) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> FirstAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> FirstAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> FirstOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> FirstOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> For<TSource, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Unit> FromAsync(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>> actionAsync) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Unit>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Unit> FromAsync(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task>> actionAsync) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Unit>); }
    public static System.Reactive.Linq.IQbservable<TResult> FromAsync<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>> functionAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> FromAsync<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<TResult>>> functionAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<TResult>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Action<System.IAsyncResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    [System.ObsoleteAttribute("This conversion is no longer supported. Replace use of the Begin/End asynchronous method pair with a new Task-based async method, and convert the result using ToObservable. If no Task-based async method is available, use Task.Factory.FromAsync to obtain a Task object. See http://go.microsoft.com/fwlink/?LinkID=260866 for more information.")]
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<TResult>> FromAsyncPattern<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.AsyncCallback, System.Object, System.IAsyncResult>> begin, System.Linq.Expressions.Expression<System.Func<System.IAsyncResult, TResult>> end) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Unit> FromEvent(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<System.Action>> addHandler, System.Linq.Expressions.Expression<System.Action<System.Action>> removeHandler) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Unit>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Unit> FromEvent(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<System.Action>> addHandler, System.Linq.Expressions.Expression<System.Action<System.Action>> removeHandler, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Unit>); }
    public static System.Reactive.Linq.IQbservable<TEventArgs> FromEvent<TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<System.Action<TEventArgs>>> addHandler, System.Linq.Expressions.Expression<System.Action<System.Action<TEventArgs>>> removeHandler) { return default(System.Reactive.Linq.IQbservable<TEventArgs>); }
    public static System.Reactive.Linq.IQbservable<TEventArgs> FromEvent<TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<System.Action<TEventArgs>>> addHandler, System.Linq.Expressions.Expression<System.Action<System.Action<TEventArgs>>> removeHandler, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TEventArgs>); }
    public static System.Reactive.Linq.IQbservable<TEventArgs> FromEvent<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler) { return default(System.Reactive.Linq.IQbservable<TEventArgs>); }
    public static System.Reactive.Linq.IQbservable<TEventArgs> FromEvent<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TEventArgs>); }
    public static System.Reactive.Linq.IQbservable<TEventArgs> FromEvent<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Action<TEventArgs>, TDelegate>> conversion, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler) { return default(System.Reactive.Linq.IQbservable<TEventArgs>); }
    public static System.Reactive.Linq.IQbservable<TEventArgs> FromEvent<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Action<TEventArgs>, TDelegate>> conversion, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TEventArgs>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>> FromEventPattern(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<System.EventHandler>> addHandler, System.Linq.Expressions.Expression<System.Action<System.EventHandler>> removeHandler) { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>> FromEventPattern(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<System.EventHandler>> addHandler, System.Linq.Expressions.Expression<System.Action<System.EventHandler>> removeHandler, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>> FromEventPattern(this System.Reactive.Linq.IQbservableProvider provider, object target, string eventName) { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>> FromEventPattern(this System.Reactive.Linq.IQbservableProvider provider, object target, string eventName, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>> FromEventPattern(this System.Reactive.Linq.IQbservableProvider provider, System.Type type, string eventName) { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>> FromEventPattern(this System.Reactive.Linq.IQbservableProvider provider, System.Type type, string eventName, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<System.EventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<System.EventHandler<TEventArgs>>> addHandler, System.Linq.Expressions.Expression<System.Action<System.EventHandler<TEventArgs>>> removeHandler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<System.EventHandler<TEventArgs>>> addHandler, System.Linq.Expressions.Expression<System.Action<System.EventHandler<TEventArgs>>> removeHandler, System.Reactive.Concurrency.IScheduler scheduler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, object target, string eventName) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, object target, string eventName, System.Reactive.Concurrency.IScheduler scheduler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Type type, string eventName) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Type type, string eventName, System.Reactive.Concurrency.IScheduler scheduler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler, System.Reactive.Concurrency.IScheduler scheduler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.EventHandler<TEventArgs>, TDelegate>> conversion, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>> FromEventPattern<TDelegate, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.EventHandler<TEventArgs>, TDelegate>> conversion, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler, System.Reactive.Concurrency.IScheduler scheduler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>> FromEventPattern<TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, object target, string eventName) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>> FromEventPattern<TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, object target, string eventName, System.Reactive.Concurrency.IScheduler scheduler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>> FromEventPattern<TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Type type, string eventName) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>> FromEventPattern<TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Type type, string eventName, System.Reactive.Concurrency.IScheduler scheduler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>> FromEventPattern<TDelegate, TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>> FromEventPattern<TDelegate, TSender, TEventArgs>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TDelegate>> addHandler, System.Linq.Expressions.Expression<System.Action<TDelegate>> removeHandler, System.Reactive.Concurrency.IScheduler scheduler) where TEventArgs : System.EventArgs { return default(System.Reactive.Linq.IQbservable<System.Reactive.EventPattern<TSender, TEventArgs>>); }
    public static System.Reactive.Linq.IQbservable<TResult> Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, System.Boolean>> condition, System.Linq.Expressions.Expression<System.Func<TState, TState>> iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, System.Boolean>> condition, System.Linq.Expressions.Expression<System.Func<TState, TState>> iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>> resultSelector, System.Linq.Expressions.Expression<System.Func<TState, System.DateTimeOffset>> timeSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, System.Boolean>> condition, System.Linq.Expressions.Expression<System.Func<TState, TState>> iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>> resultSelector, System.Linq.Expressions.Expression<System.Func<TState, System.DateTimeOffset>> timeSelector, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, System.Boolean>> condition, System.Linq.Expressions.Expression<System.Func<TState, TState>> iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>> resultSelector, System.Linq.Expressions.Expression<System.Func<TState, System.TimeSpan>> timeSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, System.Boolean>> condition, System.Linq.Expressions.Expression<System.Func<TState, TState>> iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>> resultSelector, System.Linq.Expressions.Expression<System.Func<TState, System.TimeSpan>> timeSelector, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Generate<TState, TResult>(this System.Reactive.Linq.IQbservableProvider provider, TState initialState, System.Linq.Expressions.Expression<System.Func<TState, System.Boolean>> condition, System.Linq.Expressions.Expression<System.Func<TState, TState>> iterate, System.Linq.Expressions.Expression<System.Func<TState, TResult>> resultSelector, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>> GroupBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>> GroupBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>> GroupBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, int capacity) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>> GroupBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, int capacity) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>> GroupByUntil<TSource, TKey, TDuration>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>, System.IObservable<TDuration>>> durationSelector) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>> GroupByUntil<TSource, TKey, TDuration>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>, System.IObservable<TDuration>>> durationSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>> GroupByUntil<TSource, TKey, TDuration>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>, System.IObservable<TDuration>>> durationSelector, int capacity) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>> GroupByUntil<TSource, TKey, TDuration>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TSource>, System.IObservable<TDuration>>> durationSelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>> GroupByUntil<TSource, TKey, TElement, TDuration>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>, System.IObservable<TDuration>>> durationSelector) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>> GroupByUntil<TSource, TKey, TElement, TDuration>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>, System.IObservable<TDuration>>> durationSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>> GroupByUntil<TSource, TKey, TElement, TDuration>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>, System.IObservable<TDuration>>> durationSelector, int capacity) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>> GroupByUntil<TSource, TKey, TElement, TDuration>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Linq.Expressions.Expression<System.Func<System.Reactive.Linq.IGroupedObservable<TKey, TElement>, System.IObservable<TDuration>>> durationSelector, int capacity, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Linq.IGroupedObservable<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<TResult> GroupJoin<TLeft, TRight, TLeftDuration, TRightDuration, TResult>(this System.Reactive.Linq.IQbservable<TLeft> left, System.IObservable<TRight> right, System.Linq.Expressions.Expression<System.Func<TLeft, System.IObservable<TLeftDuration>>> leftDurationSelector, System.Linq.Expressions.Expression<System.Func<TRight, System.IObservable<TRightDuration>>> rightDurationSelector, System.Linq.Expressions.Expression<System.Func<TLeft, System.IObservable<TRight>, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> If<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Boolean>> condition, System.IObservable<TResult> thenSource) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> If<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Boolean>> condition, System.IObservable<TResult> thenSource, System.IObservable<TResult> elseSource) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> If<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Boolean>> condition, System.IObservable<TResult> thenSource, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> IgnoreElements<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Interval(this System.Reactive.Linq.IQbservableProvider provider, System.TimeSpan period) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Interval(this System.Reactive.Linq.IQbservableProvider provider, System.TimeSpan period, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> IsEmpty<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.Reactive.Linq.IQbservable<TResult> Join<TLeft, TRight, TLeftDuration, TRightDuration, TResult>(this System.Reactive.Linq.IQbservable<TLeft> left, System.IObservable<TRight> right, System.Linq.Expressions.Expression<System.Func<TLeft, System.IObservable<TLeftDuration>>> leftDurationSelector, System.Linq.Expressions.Expression<System.Func<TRight, System.IObservable<TRightDuration>>> rightDurationSelector, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> LastAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> LastAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> LastOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> LastOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Linq.IQueryable<TSource> Latest<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> LongCount<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> LongCount<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Notification<TSource>> Materialize<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Notification<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Decimal> Max(this System.Reactive.Linq.IQbservable<System.Decimal> source) { return default(System.Reactive.Linq.IQbservable<System.Decimal>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Max(this System.Reactive.Linq.IQbservable<System.Double> source) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Max(this System.Reactive.Linq.IQbservable<System.Int32> source) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Max(this System.Reactive.Linq.IQbservable<System.Int64> source) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> Max(this System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Max(this System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> Max(this System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> Max(this System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> Max(this System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Single>>); }
    public static System.Reactive.Linq.IQbservable<System.Single> Max(this System.Reactive.Linq.IQbservable<System.Single> source) { return default(System.Reactive.Linq.IQbservable<System.Single>); }
    public static System.Reactive.Linq.IQbservable<TSource> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Collections.Generic.IComparer<TSource> comparer) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Decimal> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>> selector) { return default(System.Reactive.Linq.IQbservable<System.Decimal>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>> selector) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>> selector) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>> selector) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Single>>); }
    public static System.Reactive.Linq.IQbservable<System.Single> Max<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>> selector) { return default(System.Reactive.Linq.IQbservable<System.Single>); }
    public static System.Reactive.Linq.IQbservable<TResult> Max<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Max<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector, System.Collections.Generic.IComparer<TResult> comparer) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> MaxBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> MaxBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.IObservable<TSource> second) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.IObservable<TSource> second, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservable<System.IObservable<TSource>> sources, int maxConcurrent) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservable<System.Threading.Tasks.Task<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources, int maxConcurrent) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources, int maxConcurrent, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservableProvider provider, params System.IObservable<TSource>[] sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Merge<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Reactive.Concurrency.IScheduler scheduler, params System.IObservable<TSource>[] sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Decimal> Min(this System.Reactive.Linq.IQbservable<System.Decimal> source) { return default(System.Reactive.Linq.IQbservable<System.Decimal>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Min(this System.Reactive.Linq.IQbservable<System.Double> source) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Min(this System.Reactive.Linq.IQbservable<System.Int32> source) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Min(this System.Reactive.Linq.IQbservable<System.Int64> source) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> Min(this System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Min(this System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> Min(this System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> Min(this System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> Min(this System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Single>>); }
    public static System.Reactive.Linq.IQbservable<System.Single> Min(this System.Reactive.Linq.IQbservable<System.Single> source) { return default(System.Reactive.Linq.IQbservable<System.Single>); }
    public static System.Reactive.Linq.IQbservable<TSource> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Collections.Generic.IComparer<TSource> comparer) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Decimal> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>> selector) { return default(System.Reactive.Linq.IQbservable<System.Decimal>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>> selector) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>> selector) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>> selector) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Single>>); }
    public static System.Reactive.Linq.IQbservable<System.Single> Min<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>> selector) { return default(System.Reactive.Linq.IQbservable<System.Single>); }
    public static System.Reactive.Linq.IQbservable<TResult> Min<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Min<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector, System.Collections.Generic.IComparer<TResult> comparer) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> MinBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> MinBy<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Linq.IQueryable<TSource> MostRecent<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, TSource initialValue) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> Multicast<TSource, TIntermediate, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.Reactive.Subjects.ISubject<TSource, TIntermediate>>> subjectSelector, System.Linq.Expressions.Expression<System.Func<System.IObservable<TIntermediate>, System.IObservable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Never<TResult>(this System.Reactive.Linq.IQbservableProvider provider) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Never<TResult>(this System.Reactive.Linq.IQbservableProvider provider, TResult witness) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Linq.IQueryable<TSource> Next<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> ObserveOn<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> ObserveOn<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Threading.SynchronizationContext context) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> OfType<TResult>(this System.Reactive.Linq.IQbservable<System.Object> source) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> OnErrorResumeNext<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.IObservable<TSource> second) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> OnErrorResumeNext<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> OnErrorResumeNext<TSource>(this System.Reactive.Linq.IQbservableProvider provider, params System.IObservable<TSource>[] sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> Publish<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Publish<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector, TSource initialValue) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> PublishLast<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Range(this System.Reactive.Linq.IQbservableProvider provider, int start, int count) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Range(this System.Reactive.Linq.IQbservableProvider provider, int start, int count, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<TSource> RefCount<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Reactive.Subjects.IConnectableObservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Repeat<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Repeat<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int repeatCount) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> Repeat<TResult>(this System.Reactive.Linq.IQbservableProvider provider, TResult value) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Repeat<TResult>(this System.Reactive.Linq.IQbservableProvider provider, TResult value, int repeatCount) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Repeat<TResult>(this System.Reactive.Linq.IQbservableProvider provider, TResult value, int repeatCount, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Repeat<TResult>(this System.Reactive.Linq.IQbservableProvider provider, TResult value, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector, int bufferSize) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector, int bufferSize, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector, int bufferSize, System.TimeSpan window) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector, int bufferSize, System.TimeSpan window, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector, System.TimeSpan window) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Replay<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TSource>, System.IObservable<TResult>>> selector, System.TimeSpan window, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> Retry<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Retry<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int retryCount) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> Return<TResult>(this System.Reactive.Linq.IQbservableProvider provider, TResult value) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Return<TResult>(this System.Reactive.Linq.IQbservableProvider provider, TResult value, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> Sample<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan interval) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Sample<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan interval, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Sample<TSource, TSample>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TSample> sampler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Scan<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>> accumulator) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TAccumulate> Scan<TSource, TAccumulate>(this System.Reactive.Linq.IQbservable<TSource> source, TAccumulate seed, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>> accumulator) { return default(System.Reactive.Linq.IQbservable<TAccumulate>); }
    public static System.Reactive.Linq.IQbservable<TResult> Select<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Select<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TResult>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TOther> SelectMany<TSource, TOther>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TOther> other) { return default(System.Reactive.Linq.IQbservable<TOther>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.IObservable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.IObservable<TResult>>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.IObservable<TResult>>> onError, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>>> onCompleted) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Threading.Tasks.Task<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TResult>>> onNext, System.Linq.Expressions.Expression<System.Func<System.Exception, System.IObservable<TResult>>> onError, System.Linq.Expressions.Expression<System.Func<System.IObservable<TResult>>> onCompleted) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task<TResult>>> selector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TCollection, System.Int32, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.IObservable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TCollection, System.Int32, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TTaskResult, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TTaskResult, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TCollection, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TCollection>>> collectionSelector, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.CancellationToken, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, TTaskResult, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> SelectMany<TSource, TTaskResult, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Threading.Tasks.Task<TTaskResult>>> taskSelector, System.Linq.Expressions.Expression<System.Func<TSource, TTaskResult, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> SequenceEqual<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> SequenceEqual<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.Collections.Generic.IEnumerable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> SequenceEqual<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.IObservable<TSource> second) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.Reactive.Linq.IQbservable<System.Boolean> SequenceEqual<TSource>(this System.Reactive.Linq.IQbservable<TSource> first, System.IObservable<TSource> second, System.Collections.Generic.IEqualityComparer<TSource> comparer) { return default(System.Reactive.Linq.IQbservable<System.Boolean>); }
    public static System.Reactive.Linq.IQbservable<TSource> SingleAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SingleAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SingleOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SingleOrDefaultAsync<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Skip<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Skip<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Skip<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SkipLast<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SkipLast<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SkipLast<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SkipUntil<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset startTime) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SkipUntil<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset startTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SkipUntil<TSource, TOther>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TOther> other) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SkipWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SkipWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Unit> Start(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action> action) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Unit>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Unit> Start(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Unit>); }
    public static System.Reactive.Linq.IQbservable<TResult> Start<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TResult>> function) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Start<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Unit> StartAsync(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task>> actionAsync) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Unit>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Unit> StartAsync(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task>> actionAsync) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Unit>); }
    public static System.Reactive.Linq.IQbservable<TResult> StartAsync<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>>> functionAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> StartAsync<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.Tasks.Task<TResult>>> functionAsync) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> StartWith<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, params TSource[] values) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> StartWith<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Collections.Generic.IEnumerable<TSource> values) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> StartWith<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Reactive.Concurrency.IScheduler scheduler, params TSource[] values) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> StartWith<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Reactive.Concurrency.IScheduler scheduler, System.Collections.Generic.IEnumerable<TSource> values) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SubscribeOn<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> SubscribeOn<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Threading.SynchronizationContext context) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Decimal> Sum(this System.Reactive.Linq.IQbservable<System.Decimal> source) { return default(System.Reactive.Linq.IQbservable<System.Decimal>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Sum(this System.Reactive.Linq.IQbservable<System.Double> source) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Sum(this System.Reactive.Linq.IQbservable<System.Int32> source) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Sum(this System.Reactive.Linq.IQbservable<System.Int64> source) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> Sum(this System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Sum(this System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> Sum(this System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> Sum(this System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> Sum(this System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> source) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Single>>); }
    public static System.Reactive.Linq.IQbservable<System.Single> Sum(this System.Reactive.Linq.IQbservable<System.Single> source) { return default(System.Reactive.Linq.IQbservable<System.Single>); }
    public static System.Reactive.Linq.IQbservable<System.Decimal> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>> selector) { return default(System.Reactive.Linq.IQbservable<System.Decimal>); }
    public static System.Reactive.Linq.IQbservable<System.Double> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>> selector) { return default(System.Reactive.Linq.IQbservable<System.Double>); }
    public static System.Reactive.Linq.IQbservable<System.Int32> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>> selector) { return default(System.Reactive.Linq.IQbservable<System.Int32>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>> selector) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Decimal>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Double>> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Double>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int32>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Int64>>); }
    public static System.Reactive.Linq.IQbservable<System.Nullable<System.Single>> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>> selector) { return default(System.Reactive.Linq.IQbservable<System.Nullable<System.Single>>); }
    public static System.Reactive.Linq.IQbservable<System.Single> Sum<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>> selector) { return default(System.Reactive.Linq.IQbservable<System.Single>); }
    public static System.Reactive.Linq.IQbservable<TSource> Switch<TSource>(this System.Reactive.Linq.IQbservable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Switch<TSource>(this System.Reactive.Linq.IQbservable<System.Threading.Tasks.Task<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Synchronize<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Synchronize<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, object gate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Take<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Take<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Take<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Take<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeLast<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler timerScheduler, System.Reactive.Concurrency.IScheduler loopScheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> TakeLastBuffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> TakeLastBuffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> TakeLastBuffer<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan duration, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeUntil<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset endTime) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeUntil<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset endTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeUntil<TSource, TOther>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TOther> other) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> TakeWhile<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Joins.QueryablePlan<TResult> Then<TSource, TResult>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>> selector) { return default(System.Reactive.Joins.QueryablePlan<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> Throttle<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Throttle<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Throttle<TSource, TThrottle>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TThrottle>>> throttleDurationSelector) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> Throw<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Exception exception) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Throw<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Exception exception, TResult witness) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Throw<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Exception exception, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Throw<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Exception exception, System.Reactive.Concurrency.IScheduler scheduler, TResult witness) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.TimeInterval<TSource>> TimeInterval<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<System.Reactive.TimeInterval<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.TimeInterval<TSource>> TimeInterval<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Reactive.TimeInterval<TSource>>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset dueTime) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset dueTime, System.IObservable<TSource> other) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset dueTime, System.IObservable<TSource> other, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime, System.IObservable<TSource> other) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime, System.IObservable<TSource> other, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource, TTimeout>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TTimeout> firstTimeout, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TTimeout>>> timeoutDurationSelector) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource, TTimeout>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TTimeout> firstTimeout, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TTimeout>>> timeoutDurationSelector, System.IObservable<TSource> other) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource, TTimeout>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TTimeout>>> timeoutDurationSelector) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Timeout<TSource, TTimeout>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.IObservable<TTimeout>>> timeoutDurationSelector, System.IObservable<TSource> other) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Timer(this System.Reactive.Linq.IQbservableProvider provider, System.DateTimeOffset dueTime) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Timer(this System.Reactive.Linq.IQbservableProvider provider, System.DateTimeOffset dueTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Timer(this System.Reactive.Linq.IQbservableProvider provider, System.DateTimeOffset dueTime, System.TimeSpan period) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Timer(this System.Reactive.Linq.IQbservableProvider provider, System.DateTimeOffset dueTime, System.TimeSpan period, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Timer(this System.Reactive.Linq.IQbservableProvider provider, System.TimeSpan dueTime) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Timer(this System.Reactive.Linq.IQbservableProvider provider, System.TimeSpan dueTime, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Timer(this System.Reactive.Linq.IQbservableProvider provider, System.TimeSpan dueTime, System.TimeSpan period) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Int64> Timer(this System.Reactive.Linq.IQbservableProvider provider, System.TimeSpan dueTime, System.TimeSpan period, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Int64>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Timestamped<TSource>> Timestamp<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Timestamped<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Reactive.Timestamped<TSource>> Timestamp<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.Reactive.Timestamped<TSource>>); }
    public static System.Reactive.Linq.IQbservable<TSource[]> ToArray<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource[]>); }
    public static System.Func<System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action> action) { return default(System.Func<System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1>> action) { return default(System.Func<TArg1, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<System.Reactive.Linq.IQbservable<TResult>> ToAsync<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TResult>> function) { return default(System.Func<System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<System.Reactive.Linq.IQbservable<TResult>> ToAsync<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, TArg10, TArg11, TArg12, TArg13, TArg14, TArg15, TArg16, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2>> action) { return default(System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TResult>> function) { return default(System.Func<TArg1, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3>> action) { return default(System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TResult>> function) { return default(System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>> action) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<System.Reactive.Unit>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Action<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9>> action, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TArg9, System.Reactive.Linq.IQbservable<System.Reactive.Unit>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>> function) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<TResult>> ToAsync<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, TResult>> function, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TArg8, System.Reactive.Linq.IQbservable<TResult>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TSource>> ToDictionary<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TSource>> ToDictionary<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TElement>> ToDictionary<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TElement>> ToDictionary<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IDictionary<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> ToList<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TSource>> ToLookup<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector) { return default(System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TSource>> ToLookup<TSource, TKey>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TElement>> ToLookup<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector) { return default(System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TElement>> ToLookup<TSource, TKey, TElement>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>> keySelector, System.Linq.Expressions.Expression<System.Func<TSource, TElement>> elementSelector, System.Collections.Generic.IEqualityComparer<TKey> comparer) { return default(System.Reactive.Linq.IQbservable<System.Linq.ILookup<TKey, TElement>>); }
    public static System.Reactive.Linq.IQbservable<TSource> ToObservable<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> ToObservable<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<TSource> source, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> ToQbservable<TSource>(this System.Linq.IQueryable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> ToQbservable<TSource>(this System.Linq.IQueryable<TSource> source, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Linq.IQueryable<TSource> ToQueryable<TSource>(this System.Reactive.Linq.IQbservable<TSource> source) { return default(System.Linq.IQueryable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TResult> Using<TResult, TResource>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<TResource>> resourceFactory, System.Linq.Expressions.Expression<System.Func<TResource, System.IObservable<TResult>>> observableFactory) where TResource : System.IDisposable { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Using<TResult, TResource>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResource>>> resourceFactoryAsync, System.Linq.Expressions.Expression<System.Func<TResource, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.IObservable<TResult>>>> observableFactoryAsync) where TResource : System.IDisposable { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> When<TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.Reactive.Joins.QueryablePlan<TResult>> plans) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> When<TResult>(this System.Reactive.Linq.IQbservableProvider provider, params System.Reactive.Joins.QueryablePlan<TResult>[] plans) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TSource> Where<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> Where<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>> predicate) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<TSource> While<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Linq.Expressions.Expression<System.Func<System.Boolean>> condition, System.IObservable<TSource> source) { return default(System.Reactive.Linq.IQbservable<TSource>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, int count, int skip) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, int count) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, int count, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, System.TimeSpan timeShift) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource>(this System.Reactive.Linq.IQbservable<TSource> source, System.TimeSpan timeSpan, System.TimeSpan timeShift, System.Reactive.Concurrency.IScheduler scheduler) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource, TWindowBoundary>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TWindowBoundary> windowBoundaries) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource, TWindowClosing>(this System.Reactive.Linq.IQbservable<TSource> source, System.Linq.Expressions.Expression<System.Func<System.IObservable<TWindowClosing>>> windowClosingSelector) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.IObservable<TSource>> Window<TSource, TWindowOpening, TWindowClosing>(this System.Reactive.Linq.IQbservable<TSource> source, System.IObservable<TWindowOpening> windowOpenings, System.Linq.Expressions.Expression<System.Func<TWindowOpening, System.IObservable<TWindowClosing>>> windowClosingSelector) { return default(System.Reactive.Linq.IQbservable<System.IObservable<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Zip<TSource>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>> Zip<TSource>(this System.Reactive.Linq.IQbservableProvider provider, params System.IObservable<TSource>[] sources) { return default(System.Reactive.Linq.IQbservable<System.Collections.Generic.IList<TSource>>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.IObservable<TSource13> source13, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.IObservable<TSource13> source13, System.IObservable<TSource14> source14, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.IObservable<TSource13> source13, System.IObservable<TSource14> source14, System.IObservable<TSource15> source15, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.IObservable<TSource9> source9, System.IObservable<TSource10> source10, System.IObservable<TSource11> source11, System.IObservable<TSource12> source12, System.IObservable<TSource13> source13, System.IObservable<TSource14> source14, System.IObservable<TSource15> source15, System.IObservable<TSource16> source16, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TSource9, TSource10, TSource11, TSource12, TSource13, TSource14, TSource15, TSource16, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource, TResult>(this System.Reactive.Linq.IQbservableProvider provider, System.Collections.Generic.IEnumerable<System.IObservable<TSource>> sources, System.Linq.Expressions.Expression<System.Func<System.Collections.Generic.IList<TSource>, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TResult>(this System.Reactive.Linq.IQbservable<TSource1> first, System.Collections.Generic.IEnumerable<TSource2> second, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TResult>(this System.Reactive.Linq.IQbservable<TSource1> first, System.IObservable<TSource2> second, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
    public static System.Reactive.Linq.IQbservable<TResult> Zip<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>(this System.Reactive.Linq.IQbservable<TSource1> source1, System.IObservable<TSource2> source2, System.IObservable<TSource3> source3, System.IObservable<TSource4> source4, System.IObservable<TSource5> source5, System.IObservable<TSource6> source6, System.IObservable<TSource7> source7, System.IObservable<TSource8> source8, System.Linq.Expressions.Expression<System.Func<TSource1, TSource2, TSource3, TSource4, TSource5, TSource6, TSource7, TSource8, TResult>> resultSelector) { return default(System.Reactive.Linq.IQbservable<TResult>); }
  }
}
