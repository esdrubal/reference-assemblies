namespace System.IO.Packaging {
  [System.Security.SecurityCriticalAttribute((System.Security.SecurityCriticalScope)(1))]
  public static partial class PackageStore {
    public static void AddPackage(System.Uri uri, System.IO.Packaging.Package package) { }
    public static System.IO.Packaging.Package GetPackage(System.Uri uri) { return default(System.IO.Packaging.Package); }
    public static void RemovePackage(System.Uri uri) { }
  }
  public sealed partial class PackWebRequest : System.Net.WebRequest {
    internal PackWebRequest() { }
    public override System.Net.Cache.RequestCachePolicy CachePolicy { get { return default(System.Net.Cache.RequestCachePolicy); } set { } }
    public override string ConnectionGroupName { get { return default(string); } set { } }
    public override long ContentLength { get { return default(long); } set { } }
    public override string ContentType { get { return default(string); } set { } }
    public override System.Net.ICredentials Credentials { get { return default(System.Net.ICredentials); } set { } }
    public override System.Net.WebHeaderCollection Headers { get { return default(System.Net.WebHeaderCollection); } set { } }
    public override string Method { get { return default(string); } set { } }
    public override bool PreAuthenticate { get { return default(bool); } set { } }
    public override System.Net.IWebProxy Proxy { [System.Security.SecurityCriticalAttribute]get { return default(System.Net.IWebProxy); } [System.Security.SecurityCriticalAttribute]set { } }
    public override System.Uri RequestUri { get { return default(System.Uri); } }
    public override int Timeout { get { return default(int); } set { } }
    public override bool UseDefaultCredentials { get { return default(bool); } set { } }
    public System.Net.WebRequest GetInnerRequest() { return default(System.Net.WebRequest); }
    public override System.IO.Stream GetRequestStream() { return default(System.IO.Stream); }
    [System.Security.SecurityCriticalAttribute]
    public override System.Net.WebResponse GetResponse() { return default(System.Net.WebResponse); }
  }
  public sealed partial class PackWebRequestFactory : System.Net.IWebRequestCreate {
    public PackWebRequestFactory() { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    System.Net.WebRequest System.Net.IWebRequestCreate.Create(System.Uri uri) { return default(System.Net.WebRequest); }
  }
  public sealed partial class PackWebResponse : System.Net.WebResponse {
    internal PackWebResponse() { }
    public override long ContentLength { get { return default(long); } }
    public override string ContentType { get { return default(string); } }
    public override System.Net.WebHeaderCollection Headers { get { return default(System.Net.WebHeaderCollection); } }
    public System.Net.WebResponse InnerResponse { get { return default(System.Net.WebResponse); } }
    public override bool IsFromCache { get { return default(bool); } }
    public override System.Uri ResponseUri { get { return default(System.Uri); } }
    public override void Close() { }
    protected override void Dispose(bool disposing) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    public override System.IO.Stream GetResponseStream() { return default(System.IO.Stream); }
  }
}
namespace System.Windows {
  public partial class AutoResizedEventArgs : System.EventArgs {
    public AutoResizedEventArgs(System.Windows.Size size) { }
    public System.Windows.Size Size { get { return default(System.Windows.Size); } }
  }
  public delegate void AutoResizedEventHandler(object sender, System.Windows.AutoResizedEventArgs e);
  public enum BaselineAlignment {
    Baseline = 3,
    Bottom = 2,
    Center = 1,
    Subscript = 6,
    Superscript = 7,
    TextBottom = 5,
    TextTop = 4,
    Top = 0,
  }
  public static partial class Clipboard {
    [System.Security.SecurityCriticalAttribute]
    public static void Clear() { }
    public static bool ContainsAudio() { return default(bool); }
    public static bool ContainsData(string format) { return default(bool); }
    public static bool ContainsFileDropList() { return default(bool); }
    public static bool ContainsImage() { return default(bool); }
    public static bool ContainsText() { return default(bool); }
    public static bool ContainsText(System.Windows.TextDataFormat format) { return default(bool); }
    public static void Flush() { }
    public static System.IO.Stream GetAudioStream() { return default(System.IO.Stream); }
    public static object GetData(string format) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.IDataObject GetDataObject() { return default(System.Windows.IDataObject); }
    public static System.Collections.Specialized.StringCollection GetFileDropList() { return default(System.Collections.Specialized.StringCollection); }
    public static System.Windows.Media.Imaging.BitmapSource GetImage() { return default(System.Windows.Media.Imaging.BitmapSource); }
    public static string GetText() { return default(string); }
    public static string GetText(System.Windows.TextDataFormat format) { return default(string); }
    public static bool IsCurrent(System.Windows.IDataObject data) { return default(bool); }
    public static void SetAudio(System.Byte[] audioBytes) { }
    public static void SetAudio(System.IO.Stream audioStream) { }
    public static void SetData(string format, object data) { }
    [System.Security.SecurityCriticalAttribute]
    public static void SetDataObject(object data) { }
    [System.Security.SecurityCriticalAttribute]
    public static void SetDataObject(object data, bool copy) { }
    public static void SetFileDropList(System.Collections.Specialized.StringCollection fileDropList) { }
    public static void SetImage(System.Windows.Media.Imaging.BitmapSource image) { }
    public static void SetText(string text) { }
    public static void SetText(string text, System.Windows.TextDataFormat format) { }
  }
  public partial class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable {
    public static readonly System.Windows.DependencyProperty AllowDropProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    public static readonly System.Windows.RoutedEvent DragEnterEvent;
    public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    public static readonly System.Windows.RoutedEvent DragOverEvent;
    public static readonly System.Windows.RoutedEvent DropEvent;
    [MS.Internal.PresentationCore.CommonDependencyPropertyAttribute]
    public static readonly System.Windows.DependencyProperty FocusableProperty;
    public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    public static readonly System.Windows.RoutedEvent GotFocusEvent;
    public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    public static readonly System.Windows.RoutedEvent KeyDownEvent;
    public static readonly System.Windows.RoutedEvent KeyUpEvent;
    public static readonly System.Windows.RoutedEvent LostFocusEvent;
    public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    public static readonly System.Windows.RoutedEvent MouseDownEvent;
    public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    public static readonly System.Windows.RoutedEvent MouseUpEvent;
    public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    public static readonly System.Windows.RoutedEvent StylusDownEvent;
    public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    public static readonly System.Windows.RoutedEvent StylusUpEvent;
    public static readonly System.Windows.RoutedEvent TextInputEvent;
    public static readonly System.Windows.RoutedEvent TouchDownEvent;
    public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    public static readonly System.Windows.RoutedEvent TouchUpEvent;
    public ContentElement() { }
    public bool AllowDrop { get { return default(bool); } set { } }
    public bool AreAnyTouchesCaptured { get { return default(bool); } }
    public bool AreAnyTouchesCapturedWithin { get { return default(bool); } }
    public bool AreAnyTouchesDirectlyOver { get { return default(bool); } }
    public bool AreAnyTouchesOver { get { return default(bool); } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Input.CommandBindingCollection CommandBindings { get { return default(System.Windows.Input.CommandBindingCollection); } }
    public bool Focusable { get { return default(bool); } set { } }
    public bool HasAnimatedProperties { get { return default(bool); } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Input.InputBindingCollection InputBindings { get { return default(System.Windows.Input.InputBindingCollection); } }
    public bool IsEnabled { get { return default(bool); } set { } }
    protected virtual bool IsEnabledCore { get { return default(bool); } }
    public bool IsFocused { get { return default(bool); } }
    public bool IsInputMethodEnabled { get { return default(bool); } }
    public bool IsKeyboardFocused { get { return default(bool); } }
    public bool IsKeyboardFocusWithin { get { return default(bool); } }
    public bool IsMouseCaptured { get { return default(bool); } }
    public bool IsMouseCaptureWithin { get { return default(bool); } }
    public bool IsMouseDirectlyOver { get { return default(bool); } }
    public bool IsMouseOver { get { return default(bool); } }
    public bool IsStylusCaptured { get { return default(bool); } }
    public bool IsStylusCaptureWithin { get { return default(bool); } }
    public bool IsStylusDirectlyOver { get { return default(bool); } }
    public bool IsStylusOver { get { return default(bool); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public event System.Windows.DragEventHandler DragEnter { add { } remove { } }
    public event System.Windows.DragEventHandler DragLeave { add { } remove { } }
    public event System.Windows.DragEventHandler DragOver { add { } remove { } }
    public event System.Windows.DragEventHandler Drop { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged { add { } remove { } }
    public event System.Windows.GiveFeedbackEventHandler GiveFeedback { add { } remove { } }
    public event System.Windows.RoutedEventHandler GotFocus { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler GotMouseCapture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler GotStylusCapture { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler KeyDown { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler KeyUp { add { } remove { } }
    public event System.Windows.RoutedEventHandler LostFocus { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler LostMouseCapture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler LostStylusCapture { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseDown { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler MouseEnter { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler MouseLeave { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler MouseMove { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseUp { add { } remove { } }
    public event System.Windows.Input.MouseWheelEventHandler MouseWheel { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDragEnter { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDragLeave { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDragOver { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDrop { add { } remove { } }
    public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler PreviewKeyDown { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler PreviewKeyUp { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler PreviewMouseMove { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp { add { } remove { } }
    public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel { add { } remove { } }
    public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp { add { } remove { } }
    public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusInRange { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange { add { } remove { } }
    public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusUp { add { } remove { } }
    public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp { add { } remove { } }
    public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag { add { } remove { } }
    public event System.Windows.Input.QueryCursorEventHandler QueryCursor { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp { add { } remove { } }
    public event System.Windows.Input.StylusDownEventHandler StylusDown { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusEnter { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusInAirMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusInRange { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusLeave { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusOutOfRange { add { } remove { } }
    public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusUp { add { } remove { } }
    public event System.Windows.Input.TextCompositionEventHandler TextInput { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchDown { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchMove { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchUp { add { } remove { } }
    public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
    public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler, bool handledEventsToo) { }
    public void AddToEventRoute(System.Windows.EventRoute route, System.Windows.RoutedEventArgs e) { }
    public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock) { }
    public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
    public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation) { }
    public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
    public bool CaptureMouse() { return default(bool); }
    public bool CaptureStylus() { return default(bool); }
    public bool CaptureTouch(System.Windows.Input.TouchDevice touchDevice) { return default(bool); }
    public bool Focus() { return default(bool); }
    public object GetAnimationBaseValue(System.Windows.DependencyProperty dp) { return default(object); }
    protected internal virtual System.Windows.DependencyObject GetUIParentCore() { return default(System.Windows.DependencyObject); }
    public virtual bool MoveFocus(System.Windows.Input.TraversalRequest request) { return default(bool); }
    protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected internal virtual void OnDragEnter(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnDragLeave(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnDragOver(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnDrop(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
    protected virtual void OnGotFocus(System.Windows.RoutedEventArgs e) { }
    protected internal virtual void OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected internal virtual void OnGotMouseCapture(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnGotStylusCapture(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnGotTouchCapture(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected internal virtual void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
    protected internal virtual void OnKeyUp(System.Windows.Input.KeyEventArgs e) { }
    protected virtual void OnLostFocus(System.Windows.RoutedEventArgs e) { }
    protected internal virtual void OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected internal virtual void OnLostMouseCapture(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnLostStylusCapture(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnLostTouchCapture(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseEnter(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnMouseLeave(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseMove(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
    protected internal virtual void OnPreviewDragEnter(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnPreviewDragLeave(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnPreviewDragOver(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnPreviewDrop(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
    protected internal virtual void OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected internal virtual void OnPreviewKeyDown(System.Windows.Input.KeyEventArgs e) { }
    protected internal virtual void OnPreviewKeyUp(System.Windows.Input.KeyEventArgs e) { }
    protected internal virtual void OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected internal virtual void OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseMove(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
    protected internal virtual void OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
    protected internal virtual void OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
    protected internal virtual void OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
    protected internal virtual void OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
    protected internal virtual void OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewStylusMove(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
    protected internal virtual void OnPreviewStylusUp(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
    protected internal virtual void OnPreviewTouchDown(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnPreviewTouchMove(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnPreviewTouchUp(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
    protected internal virtual void OnQueryCursor(System.Windows.Input.QueryCursorEventArgs e) { }
    protected internal virtual void OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
    protected internal virtual void OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
    protected internal virtual void OnStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
    protected internal virtual void OnStylusEnter(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusInRange(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusLeave(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusMove(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
    protected internal virtual void OnStylusUp(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
    protected internal virtual void OnTouchDown(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnTouchEnter(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnTouchLeave(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnTouchMove(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnTouchUp(System.Windows.Input.TouchEventArgs e) { }
    public virtual System.Windows.DependencyObject PredictFocus(System.Windows.Input.FocusNavigationDirection direction) { return default(System.Windows.DependencyObject); }
    public void RaiseEvent(System.Windows.RoutedEventArgs e) { }
    public void ReleaseAllTouchCaptures() { }
    public void ReleaseMouseCapture() { }
    public void ReleaseStylusCapture() { }
    public bool ReleaseTouchCapture(System.Windows.Input.TouchDevice touchDevice) { return default(bool); }
    public void RemoveHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeCommandBindings() { return default(bool); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeInputBindings() { return default(bool); }
  }
  public static partial class ContentOperations {
    public static System.Windows.DependencyObject GetParent(System.Windows.ContentElement reference) { return default(System.Windows.DependencyObject); }
    public static void SetParent(System.Windows.ContentElement reference, System.Windows.DependencyObject parent) { }
  }
  public static partial class CoreCompatibilityPreferences {
    public static System.Nullable<System.Boolean> EnableMultiMonitorDisplayClipping { get { return default(System.Nullable<System.Boolean>); } set { } }
    public static bool IsAltKeyRequiredInAccessKeyDefaultScope { get { return default(bool); } set { } }
  }
  public partial class CultureInfoIetfLanguageTagConverter : System.ComponentModel.TypeConverter {
    public CultureInfoIetfLanguageTagConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object source) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class DataFormat {
    public DataFormat(string name, int id) { }
    public int Id { get { return default(int); } }
    public string Name { get { return default(string); } }
  }
  public static partial class DataFormats {
    public static readonly string Bitmap;
    public static readonly string CommaSeparatedValue;
    public static readonly string Dib;
    public static readonly string Dif;
    public static readonly string EnhancedMetafile;
    public static readonly string FileDrop;
    public static readonly string Html;
    public static readonly string Locale;
    public static readonly string MetafilePicture;
    public static readonly string OemText;
    public static readonly string Palette;
    public static readonly string PenData;
    public static readonly string Riff;
    public static readonly string Rtf;
    public static readonly string Serializable;
    public static readonly string StringFormat;
    public static readonly string SymbolicLink;
    public static readonly string Text;
    public static readonly string Tiff;
    public static readonly string UnicodeText;
    public static readonly string WaveAudio;
    public static readonly string Xaml;
    public static readonly string XamlPackage;
    public static System.Windows.DataFormat GetDataFormat(int id) { return default(System.Windows.DataFormat); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.DataFormat GetDataFormat(string format) { return default(System.Windows.DataFormat); }
  }
  public sealed partial class DataObject : System.Runtime.InteropServices.ComTypes.IDataObject, System.Windows.IDataObject {
    public static readonly System.Windows.RoutedEvent CopyingEvent;
    public static readonly System.Windows.RoutedEvent PastingEvent;
    public static readonly System.Windows.RoutedEvent SettingDataEvent;
    [System.Security.SecurityCriticalAttribute]
    public DataObject() { }
    [System.Security.SecurityCriticalAttribute]
    public DataObject(object data) { }
    [System.Security.SecurityCriticalAttribute]
    public DataObject(string format, object data) { }
    [System.Security.SecurityCriticalAttribute]
    public DataObject(string format, object data, bool autoConvert) { }
    [System.Security.SecurityCriticalAttribute]
    public DataObject(System.Type format, object data) { }
    public static void AddCopyingHandler(System.Windows.DependencyObject element, System.Windows.DataObjectCopyingEventHandler handler) { }
    public static void AddPastingHandler(System.Windows.DependencyObject element, System.Windows.DataObjectPastingEventHandler handler) { }
    public static void AddSettingDataHandler(System.Windows.DependencyObject element, System.Windows.DataObjectSettingDataEventHandler handler) { }
    public bool ContainsAudio() { return default(bool); }
    public bool ContainsFileDropList() { return default(bool); }
    public bool ContainsImage() { return default(bool); }
    public bool ContainsText() { return default(bool); }
    public bool ContainsText(System.Windows.TextDataFormat format) { return default(bool); }
    public System.IO.Stream GetAudioStream() { return default(System.IO.Stream); }
    public object GetData(string format) { return default(object); }
    public object GetData(string format, bool autoConvert) { return default(object); }
    public object GetData(System.Type format) { return default(object); }
    public bool GetDataPresent(string format) { return default(bool); }
    public bool GetDataPresent(string format, bool autoConvert) { return default(bool); }
    public bool GetDataPresent(System.Type format) { return default(bool); }
    public System.Collections.Specialized.StringCollection GetFileDropList() { return default(System.Collections.Specialized.StringCollection); }
    public System.String[] GetFormats() { return default(System.String[]); }
    public System.String[] GetFormats(bool autoConvert) { return default(System.String[]); }
    public System.Windows.Media.Imaging.BitmapSource GetImage() { return default(System.Windows.Media.Imaging.BitmapSource); }
    public string GetText() { return default(string); }
    public string GetText(System.Windows.TextDataFormat format) { return default(string); }
    public static void RemoveCopyingHandler(System.Windows.DependencyObject element, System.Windows.DataObjectCopyingEventHandler handler) { }
    public static void RemovePastingHandler(System.Windows.DependencyObject element, System.Windows.DataObjectPastingEventHandler handler) { }
    public static void RemoveSettingDataHandler(System.Windows.DependencyObject element, System.Windows.DataObjectSettingDataEventHandler handler) { }
    public void SetAudio(System.Byte[] audioBytes) { }
    public void SetAudio(System.IO.Stream audioStream) { }
    [System.Security.SecurityCriticalAttribute]
    public void SetData(object data) { }
    [System.Security.SecurityCriticalAttribute]
    public void SetData(string format, object data) { }
    [System.Security.SecurityCriticalAttribute]
    public void SetData(string format, object data, bool autoConvert) { }
    [System.Security.SecurityCriticalAttribute]
    public void SetData(System.Type format, object data) { }
    public void SetFileDropList(System.Collections.Specialized.StringCollection fileDropList) { }
    public void SetImage(System.Windows.Media.Imaging.BitmapSource image) { }
    public void SetText(string textData) { }
    public void SetText(string textData, System.Windows.TextDataFormat format) { }
    [System.Security.SecurityCriticalAttribute]
    int System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(ref System.Runtime.InteropServices.ComTypes.FORMATETC pFormatetc, System.Runtime.InteropServices.ComTypes.ADVF advf, System.Runtime.InteropServices.ComTypes.IAdviseSink pAdvSink, out int pdwConnection) { pdwConnection = default(int); return default(int); }
    [System.Security.SecurityCriticalAttribute]
    void System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(int dwConnection) { }
    [System.Security.SecurityCriticalAttribute]
    int System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(out System.Runtime.InteropServices.ComTypes.IEnumSTATDATA enumAdvise) { enumAdvise = default(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA); return default(int); }
    [System.Security.SecurityCriticalAttribute]
    System.Runtime.InteropServices.ComTypes.IEnumFORMATETC System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR dwDirection) { return default(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC); }
    [System.Security.SecurityCriticalAttribute]
    int System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(ref System.Runtime.InteropServices.ComTypes.FORMATETC pformatetcIn, out System.Runtime.InteropServices.ComTypes.FORMATETC pformatetcOut) { pformatetcOut = default(System.Runtime.InteropServices.ComTypes.FORMATETC); return default(int); }
    [System.Security.SecurityCriticalAttribute]
    void System.Runtime.InteropServices.ComTypes.IDataObject.GetData(ref System.Runtime.InteropServices.ComTypes.FORMATETC formatetc, out System.Runtime.InteropServices.ComTypes.STGMEDIUM medium) { medium = default(System.Runtime.InteropServices.ComTypes.STGMEDIUM); }
    [System.Security.SecurityCriticalAttribute]
    void System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(ref System.Runtime.InteropServices.ComTypes.FORMATETC formatetc, ref System.Runtime.InteropServices.ComTypes.STGMEDIUM medium) { }
    [System.Security.SecurityCriticalAttribute]
    int System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(ref System.Runtime.InteropServices.ComTypes.FORMATETC formatetc) { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    void System.Runtime.InteropServices.ComTypes.IDataObject.SetData(ref System.Runtime.InteropServices.ComTypes.FORMATETC pFormatetcIn, ref System.Runtime.InteropServices.ComTypes.STGMEDIUM pmedium, bool fRelease) { }
  }
  public sealed partial class DataObjectCopyingEventArgs : System.Windows.DataObjectEventArgs {
    public DataObjectCopyingEventArgs(System.Windows.IDataObject dataObject, bool isDragDrop) { }
    public System.Windows.IDataObject DataObject { get { return default(System.Windows.IDataObject); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void DataObjectCopyingEventHandler(object sender, System.Windows.DataObjectCopyingEventArgs e);
  public abstract partial class DataObjectEventArgs : System.Windows.RoutedEventArgs {
    internal DataObjectEventArgs() { }
    public bool CommandCancelled { get { return default(bool); } }
    public bool IsDragDrop { get { return default(bool); } }
    public void CancelCommand() { }
  }
  public sealed partial class DataObjectPastingEventArgs : System.Windows.DataObjectEventArgs {
    public DataObjectPastingEventArgs(System.Windows.IDataObject dataObject, bool isDragDrop, string formatToApply) { }
    public System.Windows.IDataObject DataObject { get { return default(System.Windows.IDataObject); } set { } }
    public string FormatToApply { get { return default(string); } set { } }
    public System.Windows.IDataObject SourceDataObject { get { return default(System.Windows.IDataObject); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void DataObjectPastingEventHandler(object sender, System.Windows.DataObjectPastingEventArgs e);
  public sealed partial class DataObjectSettingDataEventArgs : System.Windows.DataObjectEventArgs {
    public DataObjectSettingDataEventArgs(System.Windows.IDataObject dataObject, string format) { }
    public System.Windows.IDataObject DataObject { get { return default(System.Windows.IDataObject); } }
    public string Format { get { return default(string); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void DataObjectSettingDataEventHandler(object sender, System.Windows.DataObjectSettingDataEventArgs e);
  public sealed partial class DpiChangedEventArgs : System.Windows.RoutedEventArgs {
    internal DpiChangedEventArgs() { }
    public System.Windows.DpiScale NewDpi { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.DpiScale); } }
    public System.Windows.DpiScale OldDpi { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.DpiScale); } }
  }
  public delegate void DpiChangedEventHandler(object sender, System.Windows.DpiChangedEventArgs e);
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct DpiScale {
    public DpiScale(double dpiScaleX, double dpiScaleY) { throw new System.NotImplementedException(); }
    public double DpiScaleX { get { return default(double); } }
    public double DpiScaleY { get { return default(double); } }
    public double PixelsPerDip { get { return default(double); } }
    public double PixelsPerInchX { get { return default(double); } }
    public double PixelsPerInchY { get { return default(double); } }
  }
  public enum DragAction {
    Cancel = 2,
    Continue = 0,
    Drop = 1,
  }
  public static partial class DragDrop {
    public static readonly System.Windows.RoutedEvent DragEnterEvent;
    public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    public static readonly System.Windows.RoutedEvent DragOverEvent;
    public static readonly System.Windows.RoutedEvent DropEvent;
    public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    public static void AddDragEnterHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void AddDragLeaveHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void AddDragOverHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void AddDropHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void AddGiveFeedbackHandler(System.Windows.DependencyObject element, System.Windows.GiveFeedbackEventHandler handler) { }
    public static void AddPreviewDragEnterHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void AddPreviewDragLeaveHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void AddPreviewDragOverHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void AddPreviewDropHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void AddPreviewGiveFeedbackHandler(System.Windows.DependencyObject element, System.Windows.GiveFeedbackEventHandler handler) { }
    public static void AddPreviewQueryContinueDragHandler(System.Windows.DependencyObject element, System.Windows.QueryContinueDragEventHandler handler) { }
    public static void AddQueryContinueDragHandler(System.Windows.DependencyObject element, System.Windows.QueryContinueDragEventHandler handler) { }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.DragDropEffects DoDragDrop(System.Windows.DependencyObject dragSource, object data, System.Windows.DragDropEffects allowedEffects) { return default(System.Windows.DragDropEffects); }
    public static void RemoveDragEnterHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void RemoveDragLeaveHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void RemoveDragOverHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void RemoveDropHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void RemoveGiveFeedbackHandler(System.Windows.DependencyObject element, System.Windows.GiveFeedbackEventHandler handler) { }
    public static void RemovePreviewDragEnterHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void RemovePreviewDragLeaveHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void RemovePreviewDragOverHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void RemovePreviewDropHandler(System.Windows.DependencyObject element, System.Windows.DragEventHandler handler) { }
    public static void RemovePreviewGiveFeedbackHandler(System.Windows.DependencyObject element, System.Windows.GiveFeedbackEventHandler handler) { }
    public static void RemovePreviewQueryContinueDragHandler(System.Windows.DependencyObject element, System.Windows.QueryContinueDragEventHandler handler) { }
    public static void RemoveQueryContinueDragHandler(System.Windows.DependencyObject element, System.Windows.QueryContinueDragEventHandler handler) { }
  }
  [System.FlagsAttribute]
  public enum DragDropEffects {
    All = -2147483645,
    Copy = 1,
    Link = 4,
    Move = 2,
    None = 0,
    Scroll = -2147483648,
  }
  [System.FlagsAttribute]
  public enum DragDropKeyStates {
    AltKey = 32,
    ControlKey = 8,
    LeftMouseButton = 1,
    MiddleMouseButton = 16,
    None = 0,
    RightMouseButton = 2,
    ShiftKey = 4,
  }
  public sealed partial class DragEventArgs : System.Windows.RoutedEventArgs {
    internal DragEventArgs() { }
    public System.Windows.DragDropEffects AllowedEffects { get { return default(System.Windows.DragDropEffects); } }
    public System.Windows.IDataObject Data { get { return default(System.Windows.IDataObject); } }
    public System.Windows.DragDropEffects Effects { get { return default(System.Windows.DragDropEffects); } set { } }
    public System.Windows.DragDropKeyStates KeyStates { get { return default(System.Windows.DragDropKeyStates); } }
    public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { return default(System.Windows.Point); }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void DragEventHandler(object sender, System.Windows.DragEventArgs e);
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.DurationConverter))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Duration {
    public Duration(System.TimeSpan timeSpan) { throw new System.NotImplementedException(); }
    public static System.Windows.Duration Automatic { get { return default(System.Windows.Duration); } }
    public static System.Windows.Duration Forever { get { return default(System.Windows.Duration); } }
    public bool HasTimeSpan { get { return default(bool); } }
    public System.TimeSpan TimeSpan { get { return default(System.TimeSpan); } }
    public System.Windows.Duration Add(System.Windows.Duration duration) { return default(System.Windows.Duration); }
    public static int Compare(System.Windows.Duration t1, System.Windows.Duration t2) { return default(int); }
    public override bool Equals(object value) { return default(bool); }
    public bool Equals(System.Windows.Duration duration) { return default(bool); }
    public static bool Equals(System.Windows.Duration t1, System.Windows.Duration t2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Windows.Duration operator +(System.Windows.Duration t1, System.Windows.Duration t2) { return default(System.Windows.Duration); }
    public static bool operator ==(System.Windows.Duration t1, System.Windows.Duration t2) { return default(bool); }
    public static bool operator >(System.Windows.Duration t1, System.Windows.Duration t2) { return default(bool); }
    public static bool operator >=(System.Windows.Duration t1, System.Windows.Duration t2) { return default(bool); }
    public static implicit operator System.Windows.Duration (System.TimeSpan timeSpan) { return default(System.Windows.Duration); }
    public static bool operator !=(System.Windows.Duration t1, System.Windows.Duration t2) { return default(bool); }
    public static bool operator <(System.Windows.Duration t1, System.Windows.Duration t2) { return default(bool); }
    public static bool operator <=(System.Windows.Duration t1, System.Windows.Duration t2) { return default(bool); }
    public static System.Windows.Duration operator -(System.Windows.Duration t1, System.Windows.Duration t2) { return default(System.Windows.Duration); }
    public static System.Windows.Duration operator +(System.Windows.Duration duration) { return default(System.Windows.Duration); }
    public static System.Windows.Duration Plus(System.Windows.Duration duration) { return default(System.Windows.Duration); }
    public System.Windows.Duration Subtract(System.Windows.Duration duration) { return default(System.Windows.Duration); }
    public override string ToString() { return default(string); }
  }
  public partial class DurationConverter : System.ComponentModel.TypeConverter {
    public DurationConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo cultureInfo, object value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { return default(object); }
  }
  public static partial class EventManager {
    public static System.Windows.RoutedEvent[] GetRoutedEvents() { return default(System.Windows.RoutedEvent[]); }
    public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner(System.Type ownerType) { return default(System.Windows.RoutedEvent[]); }
    public static void RegisterClassHandler(System.Type classType, System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
    public static void RegisterClassHandler(System.Type classType, System.Windows.RoutedEvent routedEvent, System.Delegate handler, bool handledEventsToo) { }
    public static System.Windows.RoutedEvent RegisterRoutedEvent(string name, System.Windows.RoutingStrategy routingStrategy, System.Type handlerType, System.Type ownerType) { return default(System.Windows.RoutedEvent); }
  }
  public partial class EventPrivateKey {
    public EventPrivateKey() { }
  }
  public sealed partial class EventRoute {
    public EventRoute(System.Windows.RoutedEvent routedEvent) { }
    public void Add(object target, System.Delegate handler, bool handledEventsToo) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    public object PeekBranchNode() { return default(object); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    public object PeekBranchSource() { return default(object); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    public object PopBranchNode() { return default(object); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    public void PushBranchNode(object node, object source) { }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public enum FlowDirection {
    LeftToRight = 0,
    RightToLeft = 1,
  }
  public enum FontCapitals {
    AllPetiteCaps = 3,
    AllSmallCaps = 1,
    Normal = 0,
    PetiteCaps = 4,
    SmallCaps = 2,
    Titling = 6,
    Unicase = 5,
  }
  public enum FontEastAsianLanguage {
    HojoKanji = 5,
    Jis04 = 4,
    Jis78 = 1,
    Jis83 = 2,
    Jis90 = 3,
    NlcKanji = 6,
    Normal = 0,
    Simplified = 7,
    Traditional = 8,
    TraditionalNames = 9,
  }
  public enum FontEastAsianWidths {
    Full = 2,
    Half = 3,
    Normal = 0,
    Proportional = 1,
    Quarter = 5,
    Third = 4,
  }
  public enum FontFraction {
    Normal = 0,
    Slashed = 1,
    Stacked = 2,
  }
  public enum FontNumeralAlignment {
    Normal = 0,
    Proportional = 1,
    Tabular = 2,
  }
  public enum FontNumeralStyle {
    Lining = 1,
    Normal = 0,
    OldStyle = 2,
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.FontStretchConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct FontStretch : System.IFormattable {
    public static int Compare(System.Windows.FontStretch left, System.Windows.FontStretch right) { return default(int); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.FontStretch obj) { return default(bool); }
    public static System.Windows.FontStretch FromOpenTypeStretch(int stretchValue) { return default(System.Windows.FontStretch); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.FontStretch left, System.Windows.FontStretch right) { return default(bool); }
    public static bool operator >(System.Windows.FontStretch left, System.Windows.FontStretch right) { return default(bool); }
    public static bool operator >=(System.Windows.FontStretch left, System.Windows.FontStretch right) { return default(bool); }
    public static bool operator !=(System.Windows.FontStretch left, System.Windows.FontStretch right) { return default(bool); }
    public static bool operator <(System.Windows.FontStretch left, System.Windows.FontStretch right) { return default(bool); }
    public static bool operator <=(System.Windows.FontStretch left, System.Windows.FontStretch right) { return default(bool); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public int ToOpenTypeStretch() { return default(int); }
    public override string ToString() { return default(string); }
  }
  public sealed partial class FontStretchConverter : System.ComponentModel.TypeConverter {
    public FontStretchConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public static partial class FontStretches {
    public static System.Windows.FontStretch Condensed { get { return default(System.Windows.FontStretch); } }
    public static System.Windows.FontStretch Expanded { get { return default(System.Windows.FontStretch); } }
    public static System.Windows.FontStretch ExtraCondensed { get { return default(System.Windows.FontStretch); } }
    public static System.Windows.FontStretch ExtraExpanded { get { return default(System.Windows.FontStretch); } }
    public static System.Windows.FontStretch Medium { get { return default(System.Windows.FontStretch); } }
    public static System.Windows.FontStretch Normal { get { return default(System.Windows.FontStretch); } }
    public static System.Windows.FontStretch SemiCondensed { get { return default(System.Windows.FontStretch); } }
    public static System.Windows.FontStretch SemiExpanded { get { return default(System.Windows.FontStretch); } }
    public static System.Windows.FontStretch UltraCondensed { get { return default(System.Windows.FontStretch); } }
    public static System.Windows.FontStretch UltraExpanded { get { return default(System.Windows.FontStretch); } }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.FontStyleConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct FontStyle : System.IFormattable {
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.FontStyle obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.FontStyle left, System.Windows.FontStyle right) { return default(bool); }
    public static bool operator !=(System.Windows.FontStyle left, System.Windows.FontStyle right) { return default(bool); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
  }
  public sealed partial class FontStyleConverter : System.ComponentModel.TypeConverter {
    public FontStyleConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public static partial class FontStyles {
    public static System.Windows.FontStyle Italic { get { return default(System.Windows.FontStyle); } }
    public static System.Windows.FontStyle Normal { get { return default(System.Windows.FontStyle); } }
    public static System.Windows.FontStyle Oblique { get { return default(System.Windows.FontStyle); } }
  }
  public enum FontVariants {
    Inferior = 4,
    Normal = 0,
    Ordinal = 3,
    Ruby = 5,
    Subscript = 2,
    Superscript = 1,
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.FontWeightConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct FontWeight : System.IFormattable {
    public static int Compare(System.Windows.FontWeight left, System.Windows.FontWeight right) { return default(int); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.FontWeight obj) { return default(bool); }
    public static System.Windows.FontWeight FromOpenTypeWeight(int weightValue) { return default(System.Windows.FontWeight); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.FontWeight left, System.Windows.FontWeight right) { return default(bool); }
    public static bool operator >(System.Windows.FontWeight left, System.Windows.FontWeight right) { return default(bool); }
    public static bool operator >=(System.Windows.FontWeight left, System.Windows.FontWeight right) { return default(bool); }
    public static bool operator !=(System.Windows.FontWeight left, System.Windows.FontWeight right) { return default(bool); }
    public static bool operator <(System.Windows.FontWeight left, System.Windows.FontWeight right) { return default(bool); }
    public static bool operator <=(System.Windows.FontWeight left, System.Windows.FontWeight right) { return default(bool); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public int ToOpenTypeWeight() { return default(int); }
    public override string ToString() { return default(string); }
  }
  public sealed partial class FontWeightConverter : System.ComponentModel.TypeConverter {
    public FontWeightConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public static partial class FontWeights {
    public static System.Windows.FontWeight Black { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight Bold { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight DemiBold { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight ExtraBlack { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight ExtraBold { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight ExtraLight { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight Heavy { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight Light { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight Medium { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight Normal { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight Regular { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight SemiBold { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight Thin { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight UltraBlack { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight UltraBold { get { return default(System.Windows.FontWeight); } }
    public static System.Windows.FontWeight UltraLight { get { return default(System.Windows.FontWeight); } }
  }
  public partial class FreezableCollection<T> : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged where T : System.Windows.DependencyObject {
    public FreezableCollection() { }
    public FreezableCollection(System.Collections.Generic.IEnumerable<T> collection) { }
    public FreezableCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public T this[int index] { get { return default(T); } set { } }
    bool System.Collections.Generic.ICollection<T>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged { add { } remove { } }
    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
    public void Add(T value) { }
    public void Clear() { }
    public new System.Windows.FreezableCollection<T> Clone() { return default(System.Windows.FreezableCollection<T>); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.FreezableCollection<T> CloneCurrentValue() { return default(System.Windows.FreezableCollection<T>); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(T value) { return default(bool); }
    public void CopyTo(T[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.FreezableCollection<T>.Enumerator GetEnumerator() { return default(System.Windows.FreezableCollection<T>.Enumerator); }
    public int IndexOf(T value) { return default(int); }
    public void Insert(int index, T value) { }
    public bool Remove(T value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable {
      public T Current { get { return default(T); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class GiveFeedbackEventArgs : System.Windows.RoutedEventArgs {
    internal GiveFeedbackEventArgs() { }
    public System.Windows.DragDropEffects Effects { get { return default(System.Windows.DragDropEffects); } }
    public bool UseDefaultCursors { get { return default(bool); } set { } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void GiveFeedbackEventHandler(object sender, System.Windows.GiveFeedbackEventArgs e);
  public sealed partial class HwndDpiChangedEventArgs : System.ComponentModel.HandledEventArgs {
    internal HwndDpiChangedEventArgs() { }
    public System.Windows.DpiScale NewDpi { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.DpiScale); } }
    public System.Windows.DpiScale OldDpi { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.DpiScale); } }
    public System.Windows.Rect SuggestedRect { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Rect); } }
  }
  public delegate void HwndDpiChangedEventHandler(object sender, System.Windows.HwndDpiChangedEventArgs e);
  public partial interface IContentHost {
    System.Collections.Generic.IEnumerator<System.Windows.IInputElement> HostedElements { get; }
    System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Rect> GetRectangles(System.Windows.ContentElement child);
    System.Windows.IInputElement InputHitTest(System.Windows.Point point);
    void OnChildDesiredSizeChanged(System.Windows.UIElement child);
  }
  public partial interface IDataObject {
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    object GetData(string format);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    object GetData(string format, bool autoConvert);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    object GetData(System.Type format);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    bool GetDataPresent(string format);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    bool GetDataPresent(string format, bool autoConvert);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    bool GetDataPresent(System.Type format);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    System.String[] GetFormats();
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    System.String[] GetFormats(bool autoConvert);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    void SetData(object data);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    void SetData(string format, object data);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    void SetData(string format, object data, bool autoConvert);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Clipboard=(System.Security.Permissions.UIPermissionClipboard)(2))]
    void SetData(System.Type format, object data);
  }
  public partial interface IInputElement {
    bool Focusable { get; set; }
    bool IsEnabled { get; }
    bool IsKeyboardFocused { get; }
    bool IsKeyboardFocusWithin { get; }
    bool IsMouseCaptured { get; }
    bool IsMouseDirectlyOver { get; }
    bool IsMouseOver { get; }
    bool IsStylusCaptured { get; }
    bool IsStylusDirectlyOver { get; }
    bool IsStylusOver { get; }
    event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
    event System.Windows.Input.MouseEventHandler GotMouseCapture;
    event System.Windows.Input.StylusEventHandler GotStylusCapture;
    event System.Windows.Input.KeyEventHandler KeyDown;
    event System.Windows.Input.KeyEventHandler KeyUp;
    event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
    event System.Windows.Input.MouseEventHandler LostMouseCapture;
    event System.Windows.Input.StylusEventHandler LostStylusCapture;
    event System.Windows.Input.MouseEventHandler MouseEnter;
    event System.Windows.Input.MouseEventHandler MouseLeave;
    event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
    event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
    event System.Windows.Input.MouseEventHandler MouseMove;
    event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
    event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
    event System.Windows.Input.MouseWheelEventHandler MouseWheel;
    event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
    event System.Windows.Input.KeyEventHandler PreviewKeyDown;
    event System.Windows.Input.KeyEventHandler PreviewKeyUp;
    event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
    event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
    event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
    event System.Windows.Input.MouseEventHandler PreviewMouseMove;
    event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
    event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
    event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
    event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
    event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
    event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
    event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
    event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
    event System.Windows.Input.StylusEventHandler PreviewStylusMove;
    event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
    event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
    event System.Windows.Input.StylusEventHandler PreviewStylusUp;
    event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
    event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
    event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
    event System.Windows.Input.StylusDownEventHandler StylusDown;
    event System.Windows.Input.StylusEventHandler StylusEnter;
    event System.Windows.Input.StylusEventHandler StylusInAirMove;
    event System.Windows.Input.StylusEventHandler StylusInRange;
    event System.Windows.Input.StylusEventHandler StylusLeave;
    event System.Windows.Input.StylusEventHandler StylusMove;
    event System.Windows.Input.StylusEventHandler StylusOutOfRange;
    event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
    event System.Windows.Input.StylusEventHandler StylusUp;
    event System.Windows.Input.TextCompositionEventHandler TextInput;
    void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler);
    bool CaptureMouse();
    bool CaptureStylus();
    bool Focus();
    void RaiseEvent(System.Windows.RoutedEventArgs e);
    void ReleaseMouseCapture();
    void ReleaseStylusCapture();
    void RemoveHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler);
  }
  public partial class KeySplineConverter : System.ComponentModel.TypeConverter {
    public KeySplineConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptor, System.Type destinationType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { return default(object); }
  }
  public partial class KeyTimeConverter : System.ComponentModel.TypeConverter {
    public KeyTimeConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type type) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type type) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { return default(object); }
  }
  public enum LineBreakCondition {
    BreakAlways = 3,
    BreakDesired = 0,
    BreakPossible = 1,
    BreakRestrained = 2,
  }
  [System.AttributeUsageAttribute((System.AttributeTargets)(412), AllowMultiple=false, Inherited=true)]
  public sealed partial class LocalizabilityAttribute : System.Attribute {
    public LocalizabilityAttribute(System.Windows.LocalizationCategory category) { }
    public System.Windows.LocalizationCategory Category { get { return default(System.Windows.LocalizationCategory); } }
    public System.Windows.Modifiability Modifiability { get { return default(System.Windows.Modifiability); } set { } }
    public System.Windows.Readability Readability { get { return default(System.Windows.Readability); } set { } }
  }
  public enum LocalizationCategory {
    Button = 4,
    CheckBox = 5,
    ComboBox = 6,
    Font = 14,
    Hyperlink = 11,
    Ignore = 16,
    Inherit = 15,
    Label = 3,
    ListBox = 7,
    Menu = 8,
    NeverLocalize = 17,
    None = 0,
    RadioButton = 9,
    Text = 1,
    TextFlow = 12,
    Title = 2,
    ToolTip = 10,
    XmlData = 13,
  }
  public enum Modifiability {
    Inherit = 2,
    Modifiable = 1,
    Unmodifiable = 0,
  }
  [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
  public abstract partial class PresentationSource : System.Windows.Threading.DispatcherObject {
    protected PresentationSource() { }
    public System.Windows.Media.CompositionTarget CompositionTarget { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.CompositionTarget); } }
    public static System.Collections.IEnumerable CurrentSources { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.IEnumerable); } }
    public abstract bool IsDisposed { get; }
    public abstract System.Windows.Media.Visual RootVisual { get; [System.Security.SecurityCriticalAttribute]set; }
    public event System.EventHandler ContentRendered { add { } remove { } }
    protected void AddSource() { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Window=(System.Security.Permissions.UIPermissionWindow)(3))]
    public static void AddSourceChangedHandler(System.Windows.IInputElement element, System.Windows.SourceChangedEventHandler handler) { }
    protected void ClearContentRenderedListeners() { }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.PresentationSource FromDependencyObject(System.Windows.DependencyObject dependencyObject) { return default(System.Windows.PresentationSource); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.PresentationSource FromVisual(System.Windows.Media.Visual visual) { return default(System.Windows.PresentationSource); }
    protected abstract System.Windows.Media.CompositionTarget GetCompositionTargetCore();
    protected void RemoveSource() { }
    public static void RemoveSourceChangedHandler(System.Windows.IInputElement e, System.Windows.SourceChangedEventHandler handler) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected void RootChanged(System.Windows.Media.Visual oldRoot, System.Windows.Media.Visual newRoot) { }
  }
  public sealed partial class QueryContinueDragEventArgs : System.Windows.RoutedEventArgs {
    internal QueryContinueDragEventArgs() { }
    public System.Windows.DragAction Action { get { return default(System.Windows.DragAction); } set { } }
    public bool EscapePressed { get { return default(bool); } }
    public System.Windows.DragDropKeyStates KeyStates { get { return default(System.Windows.DragDropKeyStates); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void QueryContinueDragEventHandler(object sender, System.Windows.QueryContinueDragEventArgs e);
  public enum Readability {
    Inherit = 2,
    Readable = 1,
    Unreadable = 0,
  }
  [System.ComponentModel.TypeConverterAttribute("System.Windows.Markup.RoutedEventConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
  [System.Windows.Markup.ValueSerializerAttribute("System.Windows.Markup.RoutedEventValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
  public sealed partial class RoutedEvent {
    internal RoutedEvent() { }
    public System.Type HandlerType { get { return default(System.Type); } }
    public string Name { get { return default(string); } }
    public System.Type OwnerType { get { return default(System.Type); } }
    public System.Windows.RoutingStrategy RoutingStrategy { get { return default(System.Windows.RoutingStrategy); } }
    public System.Windows.RoutedEvent AddOwner(System.Type ownerType) { return default(System.Windows.RoutedEvent); }
    public override string ToString() { return default(string); }
  }
  public partial class RoutedEventArgs : System.EventArgs {
    public RoutedEventArgs() { }
    public RoutedEventArgs(System.Windows.RoutedEvent routedEvent) { }
    public RoutedEventArgs(System.Windows.RoutedEvent routedEvent, object source) { }
    public bool Handled { [System.Security.SecurityCriticalAttribute]get { return default(bool); } [System.Security.SecurityCriticalAttribute]set { } }
    public object OriginalSource { get { return default(object); } }
    public System.Windows.RoutedEvent RoutedEvent { get { return default(System.Windows.RoutedEvent); } set { } }
    public object Source { get { return default(object); } set { } }
    protected virtual void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    protected virtual void OnSetSource(object source) { }
  }
  public delegate void RoutedEventHandler(object sender, System.Windows.RoutedEventArgs e);
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct RoutedEventHandlerInfo {
    public System.Delegate Handler { get { return default(System.Delegate); } }
    public bool InvokeHandledEventsToo { get { return default(bool); } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.RoutedEventHandlerInfo handlerInfo) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.RoutedEventHandlerInfo handlerInfo1, System.Windows.RoutedEventHandlerInfo handlerInfo2) { return default(bool); }
    public static bool operator !=(System.Windows.RoutedEventHandlerInfo handlerInfo1, System.Windows.RoutedEventHandlerInfo handlerInfo2) { return default(bool); }
  }
  public enum RoutingStrategy {
    Bubble = 1,
    Direct = 2,
    Tunnel = 0,
  }
  public partial class SizeChangedInfo {
    public SizeChangedInfo(System.Windows.UIElement element, System.Windows.Size previousSize, bool widthChanged, bool heightChanged) { }
    public bool HeightChanged { get { return default(bool); } }
    public System.Windows.Size NewSize { get { return default(System.Windows.Size); } }
    public System.Windows.Size PreviousSize { get { return default(System.Windows.Size); } }
    public bool WidthChanged { get { return default(bool); } }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public enum SizeToContent {
    Height = 2,
    Manual = 0,
    Width = 1,
    WidthAndHeight = 3,
  }
  public sealed partial class SourceChangedEventArgs : System.Windows.RoutedEventArgs {
    [System.Security.SecurityCriticalAttribute]
    public SourceChangedEventArgs(System.Windows.PresentationSource oldSource, System.Windows.PresentationSource newSource) { }
    [System.Security.SecurityCriticalAttribute]
    public SourceChangedEventArgs(System.Windows.PresentationSource oldSource, System.Windows.PresentationSource newSource, System.Windows.IInputElement element, System.Windows.IInputElement oldParent) { }
    public System.Windows.IInputElement Element { get { return default(System.Windows.IInputElement); } }
    public System.Windows.PresentationSource NewSource { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.PresentationSource); } }
    public System.Windows.IInputElement OldParent { get { return default(System.Windows.IInputElement); } }
    public System.Windows.PresentationSource OldSource { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.PresentationSource); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void SourceChangedEventHandler(object sender, System.Windows.SourceChangedEventArgs e);
  public partial class StrokeCollectionConverter : System.ComponentModel.TypeConverter {
    public StrokeCollectionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public enum TextAlignment {
    Center = 2,
    Justify = 3,
    Left = 0,
    Right = 1,
  }
  public enum TextDataFormat {
    CommaSeparatedValue = 4,
    Html = 3,
    Rtf = 2,
    Text = 0,
    UnicodeText = 1,
    Xaml = 5,
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0))]
  public sealed partial class TextDecoration : System.Windows.Media.Animation.Animatable {
    public static readonly System.Windows.DependencyProperty LocationProperty;
    public static readonly System.Windows.DependencyProperty PenOffsetProperty;
    public static readonly System.Windows.DependencyProperty PenOffsetUnitProperty;
    public static readonly System.Windows.DependencyProperty PenProperty;
    public static readonly System.Windows.DependencyProperty PenThicknessUnitProperty;
    public TextDecoration() { }
    public TextDecoration(System.Windows.TextDecorationLocation location, System.Windows.Media.Pen pen, double penOffset, System.Windows.TextDecorationUnit penOffsetUnit, System.Windows.TextDecorationUnit penThicknessUnit) { }
    public System.Windows.TextDecorationLocation Location { get { return default(System.Windows.TextDecorationLocation); } set { } }
    public System.Windows.Media.Pen Pen { get { return default(System.Windows.Media.Pen); } set { } }
    public double PenOffset { get { return default(double); } set { } }
    public System.Windows.TextDecorationUnit PenOffsetUnit { get { return default(System.Windows.TextDecorationUnit); } set { } }
    public System.Windows.TextDecorationUnit PenThicknessUnit { get { return default(System.Windows.TextDecorationUnit); } set { } }
    public new System.Windows.TextDecoration Clone() { return default(System.Windows.TextDecoration); }
    public new System.Windows.TextDecoration CloneCurrentValue() { return default(System.Windows.TextDecoration); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.TextDecorationCollectionConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public sealed partial class TextDecorationCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.TextDecoration>, System.Collections.Generic.IEnumerable<System.Windows.TextDecoration>, System.Collections.Generic.IList<System.Windows.TextDecoration>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public TextDecorationCollection() { }
    public TextDecorationCollection(System.Collections.Generic.IEnumerable<System.Windows.TextDecoration> collection) { }
    public TextDecorationCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.TextDecoration this[int index] { get { return default(System.Windows.TextDecoration); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.TextDecoration>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    [System.CLSCompliantAttribute(false)]
    public void Add(System.Collections.Generic.IEnumerable<System.Windows.TextDecoration> textDecorations) { }
    public void Add(System.Windows.TextDecoration value) { }
    public void Clear() { }
    public new System.Windows.TextDecorationCollection Clone() { return default(System.Windows.TextDecorationCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.TextDecorationCollection CloneCurrentValue() { return default(System.Windows.TextDecorationCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.TextDecoration value) { return default(bool); }
    public void CopyTo(System.Windows.TextDecoration[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.TextDecorationCollection.Enumerator GetEnumerator() { return default(System.Windows.TextDecorationCollection.Enumerator); }
    public int IndexOf(System.Windows.TextDecoration value) { return default(int); }
    public void Insert(int index, System.Windows.TextDecoration value) { }
    public bool Remove(System.Windows.TextDecoration value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.TextDecoration> System.Collections.Generic.IEnumerable<System.Windows.TextDecoration>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.TextDecoration>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    public bool TryRemove(System.Collections.Generic.IEnumerable<System.Windows.TextDecoration> textDecorations, out System.Windows.TextDecorationCollection result) { result = default(System.Windows.TextDecorationCollection); return default(bool); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.TextDecoration>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.TextDecoration Current { get { return default(System.Windows.TextDecoration); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class TextDecorationCollectionConverter : System.ComponentModel.TypeConverter {
    public TextDecorationCollectionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object input) { return default(object); }
    public static new System.Windows.TextDecorationCollection ConvertFromString(string text) { return default(System.Windows.TextDecorationCollection); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public enum TextDecorationLocation {
    Baseline = 3,
    OverLine = 1,
    Strikethrough = 2,
    Underline = 0,
  }
  public static partial class TextDecorations {
    public static System.Windows.TextDecorationCollection Baseline { get { return default(System.Windows.TextDecorationCollection); } }
    public static System.Windows.TextDecorationCollection OverLine { get { return default(System.Windows.TextDecorationCollection); } }
    public static System.Windows.TextDecorationCollection Strikethrough { get { return default(System.Windows.TextDecorationCollection); } }
    public static System.Windows.TextDecorationCollection Underline { get { return default(System.Windows.TextDecorationCollection); } }
  }
  public enum TextDecorationUnit {
    FontRecommended = 0,
    FontRenderingEmSize = 1,
    Pixel = 2,
  }
  public enum TextMarkerStyle {
    Box = 4,
    Circle = 2,
    Decimal = 9,
    Disc = 1,
    LowerLatin = 7,
    LowerRoman = 5,
    None = 0,
    Square = 3,
    UpperLatin = 8,
    UpperRoman = 6,
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public enum TextTrimming {
    CharacterEllipsis = 1,
    None = 0,
    WordEllipsis = 2,
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public enum TextWrapping {
    NoWrap = 1,
    Wrap = 2,
    WrapWithOverflow = 0,
  }
  [System.Windows.Markup.UidPropertyAttribute("Uid")]
  public partial class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable {
    public static readonly System.Windows.DependencyProperty AllowDropProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;
    public static readonly System.Windows.DependencyProperty BitmapEffectProperty;
    public static readonly System.Windows.DependencyProperty CacheModeProperty;
    public static readonly System.Windows.DependencyProperty ClipProperty;
    [MS.Internal.PresentationCore.CommonDependencyPropertyAttribute]
    public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;
    public static readonly System.Windows.RoutedEvent DragEnterEvent;
    public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    public static readonly System.Windows.RoutedEvent DragOverEvent;
    public static readonly System.Windows.RoutedEvent DropEvent;
    public static readonly System.Windows.DependencyProperty EffectProperty;
    [MS.Internal.PresentationCore.CommonDependencyPropertyAttribute]
    public static readonly System.Windows.DependencyProperty FocusableProperty;
    public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    public static readonly System.Windows.RoutedEvent GotFocusEvent;
    public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    [MS.Internal.PresentationCore.CommonDependencyPropertyAttribute]
    public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
    public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;
    public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    public static readonly System.Windows.DependencyProperty IsVisibleProperty;
    public static readonly System.Windows.RoutedEvent KeyDownEvent;
    public static readonly System.Windows.RoutedEvent KeyUpEvent;
    public static readonly System.Windows.RoutedEvent LostFocusEvent;
    public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;
    public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;
    public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;
    public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;
    public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;
    public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;
    public static readonly System.Windows.RoutedEvent MouseDownEvent;
    public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    public static readonly System.Windows.RoutedEvent MouseUpEvent;
    public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    public static readonly System.Windows.DependencyProperty OpacityMaskProperty;
    public static readonly System.Windows.DependencyProperty OpacityProperty;
    public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;
    [MS.Internal.PresentationCore.CommonDependencyPropertyAttribute]
    public static readonly System.Windows.DependencyProperty RenderTransformProperty;
    public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;
    public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    public static readonly System.Windows.RoutedEvent StylusDownEvent;
    public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    public static readonly System.Windows.RoutedEvent StylusUpEvent;
    public static readonly System.Windows.RoutedEvent TextInputEvent;
    public static readonly System.Windows.RoutedEvent TouchDownEvent;
    public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    public static readonly System.Windows.RoutedEvent TouchUpEvent;
    public static readonly System.Windows.DependencyProperty UidProperty;
    [MS.Internal.PresentationCore.CommonDependencyPropertyAttribute]
    public static readonly System.Windows.DependencyProperty VisibilityProperty;
    public UIElement() { }
    public bool AllowDrop { get { return default(bool); } set { } }
    public bool AreAnyTouchesCaptured { get { return default(bool); } }
    public bool AreAnyTouchesCapturedWithin { get { return default(bool); } }
    public bool AreAnyTouchesDirectlyOver { get { return default(bool); } }
    public bool AreAnyTouchesOver { get { return default(bool); } }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get { return default(System.Windows.Media.Effects.BitmapEffect); } set { } }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get { return default(System.Windows.Media.Effects.BitmapEffectInput); } set { } }
    public System.Windows.Media.CacheMode CacheMode { get { return default(System.Windows.Media.CacheMode); } set { } }
    public System.Windows.Media.Geometry Clip { get { return default(System.Windows.Media.Geometry); } set { } }
    public bool ClipToBounds { get { return default(bool); } set { } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Input.CommandBindingCollection CommandBindings { get { return default(System.Windows.Input.CommandBindingCollection); } }
    public System.Windows.Size DesiredSize { get { return default(System.Windows.Size); } }
    public System.Windows.Media.Effects.Effect Effect { get { return default(System.Windows.Media.Effects.Effect); } set { } }
    public bool Focusable { get { return default(bool); } set { } }
    public bool HasAnimatedProperties { get { return default(bool); } }
    protected internal virtual bool HasEffectiveKeyboardFocus { get { return default(bool); } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Input.InputBindingCollection InputBindings { get { return default(System.Windows.Input.InputBindingCollection); } }
    public bool IsArrangeValid { get { return default(bool); } }
    public bool IsEnabled { get { return default(bool); } set { } }
    protected virtual bool IsEnabledCore { get { return default(bool); } }
    public bool IsFocused { get { return default(bool); } }
    public bool IsHitTestVisible { get { return default(bool); } set { } }
    public bool IsInputMethodEnabled { get { return default(bool); } }
    public bool IsKeyboardFocused { get { return default(bool); } }
    public bool IsKeyboardFocusWithin { get { return default(bool); } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public bool IsManipulationEnabled { get { return default(bool); } set { } }
    public bool IsMeasureValid { get { return default(bool); } }
    public bool IsMouseCaptured { get { return default(bool); } }
    public bool IsMouseCaptureWithin { get { return default(bool); } }
    public bool IsMouseDirectlyOver { get { return default(bool); } }
    public bool IsMouseOver { get { return default(bool); } }
    public bool IsStylusCaptured { get { return default(bool); } }
    public bool IsStylusCaptureWithin { get { return default(bool); } }
    public bool IsStylusDirectlyOver { get { return default(bool); } }
    public bool IsStylusOver { get { return default(bool); } }
    public bool IsVisible { get { return default(bool); } }
    [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
    public double Opacity { get { return default(double); } set { } }
    public System.Windows.Media.Brush OpacityMask { get { return default(System.Windows.Media.Brush); } set { } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
    [System.ObsoleteAttribute("PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.")]
    public int PersistId { get { return default(int); } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
    public System.Windows.Size RenderSize { get { return default(System.Windows.Size); } set { } }
    public System.Windows.Media.Transform RenderTransform { get { return default(System.Windows.Media.Transform); } set { } }
    public System.Windows.Point RenderTransformOrigin { get { return default(System.Windows.Point); } set { } }
    public bool SnapsToDevicePixels { get { return default(bool); } set { } }
    protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get { return default(System.Windows.Input.StylusPlugIns.StylusPlugInCollection); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public string Uid { get { return default(string); } set { } }
    [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
    public System.Windows.Visibility Visibility { get { return default(System.Windows.Visibility); } set { } }
    public event System.Windows.DragEventHandler DragEnter { add { } remove { } }
    public event System.Windows.DragEventHandler DragLeave { add { } remove { } }
    public event System.Windows.DragEventHandler DragOver { add { } remove { } }
    public event System.Windows.DragEventHandler Drop { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged { add { } remove { } }
    public event System.Windows.GiveFeedbackEventHandler GiveFeedback { add { } remove { } }
    public event System.Windows.RoutedEventHandler GotFocus { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler GotMouseCapture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler GotStylusCapture { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler KeyDown { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler KeyUp { add { } remove { } }
    public event System.EventHandler LayoutUpdated { add { } remove { } }
    public event System.Windows.RoutedEventHandler LostFocus { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler LostMouseCapture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler LostStylusCapture { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> ManipulationBoundaryFeedback { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> ManipulationCompleted { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> ManipulationDelta { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.ManipulationStartedEventArgs> ManipulationStarted { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.ManipulationStartingEventArgs> ManipulationStarting { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseDown { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler MouseEnter { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler MouseLeave { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler MouseMove { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseUp { add { } remove { } }
    public event System.Windows.Input.MouseWheelEventHandler MouseWheel { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDragEnter { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDragLeave { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDragOver { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDrop { add { } remove { } }
    public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler PreviewKeyDown { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler PreviewKeyUp { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler PreviewMouseMove { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp { add { } remove { } }
    public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel { add { } remove { } }
    public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp { add { } remove { } }
    public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusInRange { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange { add { } remove { } }
    public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusUp { add { } remove { } }
    public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp { add { } remove { } }
    public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag { add { } remove { } }
    public event System.Windows.Input.QueryCursorEventHandler QueryCursor { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp { add { } remove { } }
    public event System.Windows.Input.StylusDownEventHandler StylusDown { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusEnter { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusInAirMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusInRange { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusLeave { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusOutOfRange { add { } remove { } }
    public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusUp { add { } remove { } }
    public event System.Windows.Input.TextCompositionEventHandler TextInput { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchDown { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchMove { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchUp { add { } remove { } }
    public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
    public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler, bool handledEventsToo) { }
    public void AddToEventRoute(System.Windows.EventRoute route, System.Windows.RoutedEventArgs e) { }
    public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock) { }
    public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
    public void Arrange(System.Windows.Rect finalRect) { }
    protected virtual void ArrangeCore(System.Windows.Rect finalRect) { }
    public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation) { }
    public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
    public bool CaptureMouse() { return default(bool); }
    public bool CaptureStylus() { return default(bool); }
    public bool CaptureTouch(System.Windows.Input.TouchDevice touchDevice) { return default(bool); }
    public bool Focus() { return default(bool); }
    public object GetAnimationBaseValue(System.Windows.DependencyProperty dp) { return default(object); }
    protected virtual System.Windows.Media.Geometry GetLayoutClip(System.Windows.Size layoutSlotSize) { return default(System.Windows.Media.Geometry); }
    protected internal virtual System.Windows.DependencyObject GetUIParentCore() { return default(System.Windows.DependencyObject); }
    protected override System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { return default(System.Windows.Media.GeometryHitTestResult); }
    protected override System.Windows.Media.HitTestResult HitTestCore(System.Windows.Media.PointHitTestParameters hitTestParameters) { return default(System.Windows.Media.HitTestResult); }
    public System.Windows.IInputElement InputHitTest(System.Windows.Point point) { return default(System.Windows.IInputElement); }
    public void InvalidateArrange() { }
    public void InvalidateMeasure() { }
    public void InvalidateVisual() { }
    public void Measure(System.Windows.Size availableSize) { }
    protected virtual System.Windows.Size MeasureCore(System.Windows.Size availableSize) { return default(System.Windows.Size); }
    public virtual bool MoveFocus(System.Windows.Input.TraversalRequest request) { return default(bool); }
    protected virtual void OnAccessKey(System.Windows.Input.AccessKeyEventArgs e) { }
    protected virtual void OnChildDesiredSizeChanged(System.Windows.UIElement child) { }
    protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected virtual void OnDragEnter(System.Windows.DragEventArgs e) { }
    protected virtual void OnDragLeave(System.Windows.DragEventArgs e) { }
    protected virtual void OnDragOver(System.Windows.DragEventArgs e) { }
    protected virtual void OnDrop(System.Windows.DragEventArgs e) { }
    protected virtual void OnGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
    protected virtual void OnGotFocus(System.Windows.RoutedEventArgs e) { }
    protected virtual void OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected virtual void OnGotMouseCapture(System.Windows.Input.MouseEventArgs e) { }
    protected virtual void OnGotStylusCapture(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnGotTouchCapture(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
    protected virtual void OnKeyUp(System.Windows.Input.KeyEventArgs e) { }
    protected virtual void OnLostFocus(System.Windows.RoutedEventArgs e) { }
    protected virtual void OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected virtual void OnLostMouseCapture(System.Windows.Input.MouseEventArgs e) { }
    protected virtual void OnLostStylusCapture(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnLostTouchCapture(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) { }
    protected virtual void OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs e) { }
    protected virtual void OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs e) { }
    protected virtual void OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs e) { }
    protected virtual void OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs e) { }
    protected virtual void OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs e) { }
    protected virtual void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnMouseEnter(System.Windows.Input.MouseEventArgs e) { }
    protected virtual void OnMouseLeave(System.Windows.Input.MouseEventArgs e) { }
    protected virtual void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnMouseMove(System.Windows.Input.MouseEventArgs e) { }
    protected virtual void OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
    protected virtual void OnPreviewDragEnter(System.Windows.DragEventArgs e) { }
    protected virtual void OnPreviewDragLeave(System.Windows.DragEventArgs e) { }
    protected virtual void OnPreviewDragOver(System.Windows.DragEventArgs e) { }
    protected virtual void OnPreviewDrop(System.Windows.DragEventArgs e) { }
    protected virtual void OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
    protected virtual void OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected virtual void OnPreviewKeyDown(System.Windows.Input.KeyEventArgs e) { }
    protected virtual void OnPreviewKeyUp(System.Windows.Input.KeyEventArgs e) { }
    protected virtual void OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected virtual void OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnPreviewMouseMove(System.Windows.Input.MouseEventArgs e) { }
    protected virtual void OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected virtual void OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
    protected virtual void OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
    protected virtual void OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
    protected virtual void OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
    protected virtual void OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
    protected virtual void OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnPreviewStylusMove(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
    protected virtual void OnPreviewStylusUp(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
    protected virtual void OnPreviewTouchDown(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnPreviewTouchMove(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnPreviewTouchUp(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
    protected virtual void OnQueryCursor(System.Windows.Input.QueryCursorEventArgs e) { }
    protected virtual void OnRender(System.Windows.Media.DrawingContext drawingContext) { }
    protected internal virtual void OnRenderSizeChanged(System.Windows.SizeChangedInfo info) { }
    protected virtual void OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
    protected virtual void OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
    protected virtual void OnStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
    protected virtual void OnStylusEnter(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnStylusInRange(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnStylusLeave(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnStylusMove(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
    protected virtual void OnStylusUp(System.Windows.Input.StylusEventArgs e) { }
    protected virtual void OnTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
    protected virtual void OnTouchDown(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnTouchEnter(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnTouchLeave(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnTouchMove(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnTouchUp(System.Windows.Input.TouchEventArgs e) { }
    protected internal override void OnVisualParentChanged(System.Windows.DependencyObject oldParent) { }
    public virtual System.Windows.DependencyObject PredictFocus(System.Windows.Input.FocusNavigationDirection direction) { return default(System.Windows.DependencyObject); }
    public void RaiseEvent(System.Windows.RoutedEventArgs e) { }
    public void ReleaseAllTouchCaptures() { }
    public void ReleaseMouseCapture() { }
    public void ReleaseStylusCapture() { }
    public bool ReleaseTouchCapture(System.Windows.Input.TouchDevice touchDevice) { return default(bool); }
    public void RemoveHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeCommandBindings() { return default(bool); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeInputBindings() { return default(bool); }
    public System.Windows.Point TranslatePoint(System.Windows.Point point, System.Windows.UIElement relativeTo) { return default(System.Windows.Point); }
    public void UpdateLayout() { }
  }
  public abstract partial class UIElement3D : System.Windows.Media.Media3D.Visual3D, System.Windows.IInputElement {
    public static readonly System.Windows.DependencyProperty AllowDropProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    public static readonly System.Windows.RoutedEvent DragEnterEvent;
    public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    public static readonly System.Windows.RoutedEvent DragOverEvent;
    public static readonly System.Windows.RoutedEvent DropEvent;
    [MS.Internal.PresentationCore.CommonDependencyPropertyAttribute]
    public static readonly System.Windows.DependencyProperty FocusableProperty;
    public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    public static readonly System.Windows.RoutedEvent GotFocusEvent;
    public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    [MS.Internal.PresentationCore.CommonDependencyPropertyAttribute]
    public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
    public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    public static readonly System.Windows.DependencyProperty IsVisibleProperty;
    public static readonly System.Windows.RoutedEvent KeyDownEvent;
    public static readonly System.Windows.RoutedEvent KeyUpEvent;
    public static readonly System.Windows.RoutedEvent LostFocusEvent;
    public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    public static readonly System.Windows.RoutedEvent MouseDownEvent;
    public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    public static readonly System.Windows.RoutedEvent MouseUpEvent;
    public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    public static readonly System.Windows.RoutedEvent StylusDownEvent;
    public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    public static readonly System.Windows.RoutedEvent StylusUpEvent;
    public static readonly System.Windows.RoutedEvent TextInputEvent;
    public static readonly System.Windows.RoutedEvent TouchDownEvent;
    public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    public static readonly System.Windows.RoutedEvent TouchUpEvent;
    [MS.Internal.PresentationCore.CommonDependencyPropertyAttribute]
    public static readonly System.Windows.DependencyProperty VisibilityProperty;
    protected UIElement3D() { }
    public bool AllowDrop { get { return default(bool); } set { } }
    public bool AreAnyTouchesCaptured { get { return default(bool); } }
    public bool AreAnyTouchesCapturedWithin { get { return default(bool); } }
    public bool AreAnyTouchesDirectlyOver { get { return default(bool); } }
    public bool AreAnyTouchesOver { get { return default(bool); } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Input.CommandBindingCollection CommandBindings { get { return default(System.Windows.Input.CommandBindingCollection); } }
    public bool Focusable { get { return default(bool); } set { } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Input.InputBindingCollection InputBindings { get { return default(System.Windows.Input.InputBindingCollection); } }
    public bool IsEnabled { get { return default(bool); } set { } }
    protected virtual bool IsEnabledCore { get { return default(bool); } }
    public bool IsFocused { get { return default(bool); } }
    public bool IsHitTestVisible { get { return default(bool); } set { } }
    public bool IsInputMethodEnabled { get { return default(bool); } }
    public bool IsKeyboardFocused { get { return default(bool); } }
    public bool IsKeyboardFocusWithin { get { return default(bool); } }
    public bool IsMouseCaptured { get { return default(bool); } }
    public bool IsMouseCaptureWithin { get { return default(bool); } }
    public bool IsMouseDirectlyOver { get { return default(bool); } }
    public bool IsMouseOver { get { return default(bool); } }
    public bool IsStylusCaptured { get { return default(bool); } }
    public bool IsStylusCaptureWithin { get { return default(bool); } }
    public bool IsStylusDirectlyOver { get { return default(bool); } }
    public bool IsStylusOver { get { return default(bool); } }
    public bool IsVisible { get { return default(bool); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>); } }
    [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
    public System.Windows.Visibility Visibility { get { return default(System.Windows.Visibility); } set { } }
    public event System.Windows.DragEventHandler DragEnter { add { } remove { } }
    public event System.Windows.DragEventHandler DragLeave { add { } remove { } }
    public event System.Windows.DragEventHandler DragOver { add { } remove { } }
    public event System.Windows.DragEventHandler Drop { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged { add { } remove { } }
    public event System.Windows.GiveFeedbackEventHandler GiveFeedback { add { } remove { } }
    public event System.Windows.RoutedEventHandler GotFocus { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler GotMouseCapture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler GotStylusCapture { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged { add { } remove { } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler KeyDown { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler KeyUp { add { } remove { } }
    public event System.Windows.RoutedEventHandler LostFocus { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler LostMouseCapture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler LostStylusCapture { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseDown { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler MouseEnter { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler MouseLeave { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler MouseMove { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler MouseUp { add { } remove { } }
    public event System.Windows.Input.MouseWheelEventHandler MouseWheel { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDragEnter { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDragLeave { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDragOver { add { } remove { } }
    public event System.Windows.DragEventHandler PreviewDrop { add { } remove { } }
    public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler PreviewKeyDown { add { } remove { } }
    public event System.Windows.Input.KeyEventHandler PreviewKeyUp { add { } remove { } }
    public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseEventHandler PreviewMouseMove { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp { add { } remove { } }
    public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp { add { } remove { } }
    public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel { add { } remove { } }
    public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp { add { } remove { } }
    public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusInRange { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange { add { } remove { } }
    public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler PreviewStylusUp { add { } remove { } }
    public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp { add { } remove { } }
    public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag { add { } remove { } }
    public event System.Windows.Input.QueryCursorEventHandler QueryCursor { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown { add { } remove { } }
    public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp { add { } remove { } }
    public event System.Windows.Input.StylusDownEventHandler StylusDown { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusEnter { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusInAirMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusInRange { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusLeave { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusMove { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusOutOfRange { add { } remove { } }
    public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture { add { } remove { } }
    public event System.Windows.Input.StylusEventHandler StylusUp { add { } remove { } }
    public event System.Windows.Input.TextCompositionEventHandler TextInput { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchDown { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchMove { add { } remove { } }
    [MS.Internal.CustomCategoryAttribute("Touch_Category")]
    public event System.EventHandler<System.Windows.Input.TouchEventArgs> TouchUp { add { } remove { } }
    public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
    public void AddHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler, bool handledEventsToo) { }
    public void AddToEventRoute(System.Windows.EventRoute route, System.Windows.RoutedEventArgs e) { }
    public bool CaptureMouse() { return default(bool); }
    public bool CaptureStylus() { return default(bool); }
    public bool CaptureTouch(System.Windows.Input.TouchDevice touchDevice) { return default(bool); }
    public bool Focus() { return default(bool); }
    protected internal System.Windows.DependencyObject GetUIParentCore() { return default(System.Windows.DependencyObject); }
    public void InvalidateModel() { }
    public virtual bool MoveFocus(System.Windows.Input.TraversalRequest request) { return default(bool); }
    protected virtual void OnAccessKey(System.Windows.Input.AccessKeyEventArgs e) { }
    protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected internal virtual void OnDragEnter(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnDragLeave(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnDragOver(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnDrop(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
    protected virtual void OnGotFocus(System.Windows.RoutedEventArgs e) { }
    protected internal virtual void OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected internal virtual void OnGotMouseCapture(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnGotStylusCapture(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnGotTouchCapture(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected virtual void OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
    protected internal virtual void OnKeyDown(System.Windows.Input.KeyEventArgs e) { }
    protected internal virtual void OnKeyUp(System.Windows.Input.KeyEventArgs e) { }
    protected virtual void OnLostFocus(System.Windows.RoutedEventArgs e) { }
    protected internal virtual void OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected internal virtual void OnLostMouseCapture(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnLostStylusCapture(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnLostTouchCapture(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseEnter(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnMouseLeave(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseMove(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
    protected internal virtual void OnPreviewDragEnter(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnPreviewDragLeave(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnPreviewDragOver(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnPreviewDrop(System.Windows.DragEventArgs e) { }
    protected internal virtual void OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs e) { }
    protected internal virtual void OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected internal virtual void OnPreviewKeyDown(System.Windows.Input.KeyEventArgs e) { }
    protected internal virtual void OnPreviewKeyUp(System.Windows.Input.KeyEventArgs e) { }
    protected internal virtual void OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs e) { }
    protected internal virtual void OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseMove(System.Windows.Input.MouseEventArgs e) { }
    protected internal virtual void OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs e) { }
    protected internal virtual void OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs e) { }
    protected internal virtual void OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
    protected internal virtual void OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
    protected internal virtual void OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
    protected internal virtual void OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
    protected internal virtual void OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewStylusMove(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
    protected internal virtual void OnPreviewStylusUp(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
    protected internal virtual void OnPreviewTouchDown(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnPreviewTouchMove(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnPreviewTouchUp(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs e) { }
    protected internal virtual void OnQueryCursor(System.Windows.Input.QueryCursorEventArgs e) { }
    protected internal virtual void OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs e) { }
    protected internal virtual void OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs e) { }
    protected internal virtual void OnStylusDown(System.Windows.Input.StylusDownEventArgs e) { }
    protected internal virtual void OnStylusEnter(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusInAirMove(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusInRange(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusLeave(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusMove(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusOutOfRange(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs e) { }
    protected internal virtual void OnStylusUp(System.Windows.Input.StylusEventArgs e) { }
    protected internal virtual void OnTextInput(System.Windows.Input.TextCompositionEventArgs e) { }
    protected internal virtual void OnTouchDown(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnTouchEnter(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnTouchLeave(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnTouchMove(System.Windows.Input.TouchEventArgs e) { }
    protected internal virtual void OnTouchUp(System.Windows.Input.TouchEventArgs e) { }
    protected virtual void OnUpdateModel() { }
    protected internal override void OnVisualParentChanged(System.Windows.DependencyObject oldParent) { }
    public virtual System.Windows.DependencyObject PredictFocus(System.Windows.Input.FocusNavigationDirection direction) { return default(System.Windows.DependencyObject); }
    public void RaiseEvent(System.Windows.RoutedEventArgs e) { }
    public void ReleaseAllTouchCaptures() { }
    public void ReleaseMouseCapture() { }
    public void ReleaseStylusCapture() { }
    public bool ReleaseTouchCapture(System.Windows.Input.TouchDevice touchDevice) { return default(bool); }
    public void RemoveHandler(System.Windows.RoutedEvent routedEvent, System.Delegate handler) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeCommandBindings() { return default(bool); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeInputBindings() { return default(bool); }
  }
  public partial class UIPropertyMetadata : System.Windows.PropertyMetadata {
    public UIPropertyMetadata() { }
    public UIPropertyMetadata(object defaultValue) { }
    public UIPropertyMetadata(object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback) { }
    public UIPropertyMetadata(object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback) { }
    public UIPropertyMetadata(object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback, bool isAnimationProhibited) { }
    public UIPropertyMetadata(System.Windows.PropertyChangedCallback propertyChangedCallback) { }
    public bool IsAnimationProhibited { get { return default(bool); } set { } }
  }
  public enum Visibility : byte {
    Collapsed = (byte)2,
    Hidden = (byte)1,
    Visible = (byte)0,
  }
}
namespace System.Windows.Automation {
  public static partial class AutomationProperties {
    public static readonly System.Windows.DependencyProperty AcceleratorKeyProperty;
    public static readonly System.Windows.DependencyProperty AccessKeyProperty;
    public static readonly System.Windows.DependencyProperty AutomationIdProperty;
    public static readonly System.Windows.DependencyProperty HelpTextProperty;
    public static readonly System.Windows.DependencyProperty IsColumnHeaderProperty;
    public static readonly System.Windows.DependencyProperty IsOffscreenBehaviorProperty;
    public static readonly System.Windows.DependencyProperty IsRequiredForFormProperty;
    public static readonly System.Windows.DependencyProperty IsRowHeaderProperty;
    public static readonly System.Windows.DependencyProperty ItemStatusProperty;
    public static readonly System.Windows.DependencyProperty ItemTypeProperty;
    public static readonly System.Windows.DependencyProperty LabeledByProperty;
    public static readonly System.Windows.DependencyProperty NameProperty;
    public static string GetAcceleratorKey(System.Windows.DependencyObject element) { return default(string); }
    public static string GetAccessKey(System.Windows.DependencyObject element) { return default(string); }
    public static string GetAutomationId(System.Windows.DependencyObject element) { return default(string); }
    public static string GetHelpText(System.Windows.DependencyObject element) { return default(string); }
    public static bool GetIsColumnHeader(System.Windows.DependencyObject element) { return default(bool); }
    public static System.Windows.Automation.IsOffscreenBehavior GetIsOffscreenBehavior(System.Windows.DependencyObject element) { return default(System.Windows.Automation.IsOffscreenBehavior); }
    public static bool GetIsRequiredForForm(System.Windows.DependencyObject element) { return default(bool); }
    public static bool GetIsRowHeader(System.Windows.DependencyObject element) { return default(bool); }
    public static string GetItemStatus(System.Windows.DependencyObject element) { return default(string); }
    public static string GetItemType(System.Windows.DependencyObject element) { return default(string); }
    public static System.Windows.UIElement GetLabeledBy(System.Windows.DependencyObject element) { return default(System.Windows.UIElement); }
    public static string GetName(System.Windows.DependencyObject element) { return default(string); }
    public static void SetAcceleratorKey(System.Windows.DependencyObject element, string value) { }
    public static void SetAccessKey(System.Windows.DependencyObject element, string value) { }
    public static void SetAutomationId(System.Windows.DependencyObject element, string value) { }
    public static void SetHelpText(System.Windows.DependencyObject element, string value) { }
    public static void SetIsColumnHeader(System.Windows.DependencyObject element, bool value) { }
    public static void SetIsOffscreenBehavior(System.Windows.DependencyObject element, System.Windows.Automation.IsOffscreenBehavior value) { }
    public static void SetIsRequiredForForm(System.Windows.DependencyObject element, bool value) { }
    public static void SetIsRowHeader(System.Windows.DependencyObject element, bool value) { }
    public static void SetItemStatus(System.Windows.DependencyObject element, string value) { }
    public static void SetItemType(System.Windows.DependencyObject element, string value) { }
    public static void SetLabeledBy(System.Windows.DependencyObject element, System.Windows.UIElement value) { }
    public static void SetName(System.Windows.DependencyObject element, string value) { }
  }
  public enum IsOffscreenBehavior {
    Default = 0,
    FromClip = 3,
    Offscreen = 2,
    Onscreen = 1,
  }
}
namespace System.Windows.Automation.Peers {
  public enum AutomationControlType {
    Button = 0,
    Calendar = 1,
    CheckBox = 2,
    ComboBox = 3,
    Custom = 25,
    DataGrid = 28,
    DataItem = 29,
    Document = 30,
    Edit = 4,
    Group = 26,
    Header = 34,
    HeaderItem = 35,
    Hyperlink = 5,
    Image = 6,
    List = 8,
    ListItem = 7,
    Menu = 9,
    MenuBar = 10,
    MenuItem = 11,
    Pane = 33,
    ProgressBar = 12,
    RadioButton = 13,
    ScrollBar = 14,
    Separator = 38,
    Slider = 15,
    Spinner = 16,
    SplitButton = 31,
    StatusBar = 17,
    Tab = 18,
    TabItem = 19,
    Table = 36,
    Text = 20,
    Thumb = 27,
    TitleBar = 37,
    ToolBar = 21,
    ToolTip = 22,
    Tree = 23,
    TreeItem = 24,
    Window = 32,
  }
  public enum AutomationEvents {
    AsyncContentLoaded = 12,
    AutomationFocusChanged = 4,
    InputDiscarded = 17,
    InputReachedOtherElement = 16,
    InputReachedTarget = 15,
    InvokePatternOnInvoked = 5,
    MenuClosed = 3,
    MenuOpened = 2,
    PropertyChanged = 13,
    SelectionItemPatternOnElementAddedToSelection = 6,
    SelectionItemPatternOnElementRemovedFromSelection = 7,
    SelectionItemPatternOnElementSelected = 8,
    SelectionPatternOnInvalidated = 9,
    StructureChanged = 14,
    TextPatternOnTextChanged = 11,
    TextPatternOnTextSelectionChanged = 10,
    ToolTipClosed = 1,
    ToolTipOpened = 0,
  }
  public enum AutomationOrientation {
    Horizontal = 1,
    None = 0,
    Vertical = 2,
  }
  public abstract partial class AutomationPeer : System.Windows.Threading.DispatcherObject {
    protected AutomationPeer() { }
    public System.Windows.Automation.Peers.AutomationPeer EventsSource { get { return default(System.Windows.Automation.Peers.AutomationPeer); } set { } }
    protected internal virtual bool IsHwndHost { get { return default(bool); } }
    public string GetAcceleratorKey() { return default(string); }
    protected abstract string GetAcceleratorKeyCore();
    public string GetAccessKey() { return default(string); }
    protected abstract string GetAccessKeyCore();
    public System.Windows.Automation.Peers.AutomationControlType GetAutomationControlType() { return default(System.Windows.Automation.Peers.AutomationControlType); }
    protected abstract System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore();
    public string GetAutomationId() { return default(string); }
    protected abstract string GetAutomationIdCore();
    public System.Windows.Rect GetBoundingRectangle() { return default(System.Windows.Rect); }
    protected abstract System.Windows.Rect GetBoundingRectangleCore();
    public System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildren() { return default(System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer>); }
    protected abstract System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore();
    public string GetClassName() { return default(string); }
    protected abstract string GetClassNameCore();
    public System.Windows.Point GetClickablePoint() { return default(System.Windows.Point); }
    protected abstract System.Windows.Point GetClickablePointCore();
    public string GetHelpText() { return default(string); }
    protected abstract string GetHelpTextCore();
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected virtual System.Windows.Automation.Peers.HostedWindowWrapper GetHostRawElementProviderCore() { return default(System.Windows.Automation.Peers.HostedWindowWrapper); }
    public string GetItemStatus() { return default(string); }
    protected abstract string GetItemStatusCore();
    public string GetItemType() { return default(string); }
    protected abstract string GetItemTypeCore();
    public System.Windows.Automation.Peers.AutomationPeer GetLabeledBy() { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected abstract System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore();
    public string GetLocalizedControlType() { return default(string); }
    protected virtual string GetLocalizedControlTypeCore() { return default(string); }
    public string GetName() { return default(string); }
    protected abstract string GetNameCore();
    public System.Windows.Automation.Peers.AutomationOrientation GetOrientation() { return default(System.Windows.Automation.Peers.AutomationOrientation); }
    protected abstract System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore();
    public System.Windows.Automation.Peers.AutomationPeer GetParent() { return default(System.Windows.Automation.Peers.AutomationPeer); }
    public abstract object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface);
    public System.Windows.Automation.Peers.AutomationPeer GetPeerFromPoint(System.Windows.Point point) { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected virtual System.Windows.Automation.Peers.AutomationPeer GetPeerFromPointCore(System.Windows.Point point) { return default(System.Windows.Automation.Peers.AutomationPeer); }
    public bool HasKeyboardFocus() { return default(bool); }
    protected abstract bool HasKeyboardFocusCore();
    public void InvalidatePeer() { }
    public bool IsContentElement() { return default(bool); }
    protected abstract bool IsContentElementCore();
    public bool IsControlElement() { return default(bool); }
    protected abstract bool IsControlElementCore();
    public bool IsEnabled() { return default(bool); }
    protected abstract bool IsEnabledCore();
    public bool IsKeyboardFocusable() { return default(bool); }
    protected abstract bool IsKeyboardFocusableCore();
    public bool IsOffscreen() { return default(bool); }
    protected abstract bool IsOffscreenCore();
    public bool IsPassword() { return default(bool); }
    protected abstract bool IsPasswordCore();
    public bool IsRequiredForForm() { return default(bool); }
    protected abstract bool IsRequiredForFormCore();
    public static bool ListenerExists(System.Windows.Automation.Peers.AutomationEvents eventId) { return default(bool); }
    protected System.Windows.Automation.Peers.AutomationPeer PeerFromProvider(System.Windows.Automation.Provider.IRawElementProviderSimple provider) { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected internal System.Windows.Automation.Provider.IRawElementProviderSimple ProviderFromPeer(System.Windows.Automation.Peers.AutomationPeer peer) { return default(System.Windows.Automation.Provider.IRawElementProviderSimple); }
    public void RaiseAsyncContentLoadedEvent(System.Windows.Automation.AsyncContentLoadedEventArgs args) { }
    public void RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents eventId) { }
    public void RaisePropertyChangedEvent(System.Windows.Automation.AutomationProperty property, object oldValue, object newValue) { }
    public void ResetChildrenCache() { }
    public void SetFocus() { }
    protected abstract void SetFocusCore();
  }
  public partial class ContentElementAutomationPeer : System.Windows.Automation.Peers.AutomationPeer {
    public ContentElementAutomationPeer(System.Windows.ContentElement owner) { }
    public System.Windows.ContentElement Owner { get { return default(System.Windows.ContentElement); } }
    public static System.Windows.Automation.Peers.AutomationPeer CreatePeerForElement(System.Windows.ContentElement element) { return default(System.Windows.Automation.Peers.AutomationPeer); }
    public static System.Windows.Automation.Peers.AutomationPeer FromElement(System.Windows.ContentElement element) { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected override string GetAcceleratorKeyCore() { return default(string); }
    protected override string GetAccessKeyCore() { return default(string); }
    protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { return default(System.Windows.Automation.Peers.AutomationControlType); }
    protected override string GetAutomationIdCore() { return default(string); }
    protected override System.Windows.Rect GetBoundingRectangleCore() { return default(System.Windows.Rect); }
    protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { return default(System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer>); }
    protected override string GetClassNameCore() { return default(string); }
    protected override System.Windows.Point GetClickablePointCore() { return default(System.Windows.Point); }
    protected override string GetHelpTextCore() { return default(string); }
    protected override string GetItemStatusCore() { return default(string); }
    protected override string GetItemTypeCore() { return default(string); }
    protected override System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore() { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected override string GetNameCore() { return default(string); }
    protected override System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore() { return default(System.Windows.Automation.Peers.AutomationOrientation); }
    public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { return default(object); }
    protected override bool HasKeyboardFocusCore() { return default(bool); }
    protected override bool IsContentElementCore() { return default(bool); }
    protected override bool IsControlElementCore() { return default(bool); }
    protected override bool IsEnabledCore() { return default(bool); }
    protected override bool IsKeyboardFocusableCore() { return default(bool); }
    protected override bool IsOffscreenCore() { return default(bool); }
    protected override bool IsPasswordCore() { return default(bool); }
    protected override bool IsRequiredForFormCore() { return default(bool); }
    protected override void SetFocusCore() { }
  }
  public partial class GenericRootAutomationPeer : System.Windows.Automation.Peers.UIElementAutomationPeer {
    public GenericRootAutomationPeer(System.Windows.UIElement owner) : base (default(System.Windows.UIElement)) { }
    protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { return default(System.Windows.Automation.Peers.AutomationControlType); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override System.Windows.Rect GetBoundingRectangleCore() { return default(System.Windows.Rect); }
    protected override string GetClassNameCore() { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override string GetNameCore() { return default(string); }
  }
  public sealed partial class HostedWindowWrapper {
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    public HostedWindowWrapper(System.IntPtr hwnd) { }
  }
  public enum PatternInterface {
    Dock = 12,
    ExpandCollapse = 6,
    Grid = 7,
    GridItem = 8,
    Invoke = 0,
    ItemContainer = 18,
    MultipleView = 9,
    RangeValue = 3,
    Scroll = 4,
    ScrollItem = 5,
    Selection = 1,
    SelectionItem = 11,
    SynchronizedInput = 20,
    Table = 13,
    TableItem = 14,
    Text = 17,
    Toggle = 15,
    Transform = 16,
    Value = 2,
    VirtualizedItem = 19,
    Window = 10,
  }
  public partial class UIElement3DAutomationPeer : System.Windows.Automation.Peers.AutomationPeer {
    public UIElement3DAutomationPeer(System.Windows.UIElement3D owner) { }
    public System.Windows.UIElement3D Owner { get { return default(System.Windows.UIElement3D); } }
    public static System.Windows.Automation.Peers.AutomationPeer CreatePeerForElement(System.Windows.UIElement3D element) { return default(System.Windows.Automation.Peers.AutomationPeer); }
    public static System.Windows.Automation.Peers.AutomationPeer FromElement(System.Windows.UIElement3D element) { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected override string GetAcceleratorKeyCore() { return default(string); }
    protected override string GetAccessKeyCore() { return default(string); }
    protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { return default(System.Windows.Automation.Peers.AutomationControlType); }
    protected override string GetAutomationIdCore() { return default(string); }
    protected override System.Windows.Rect GetBoundingRectangleCore() { return default(System.Windows.Rect); }
    protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { return default(System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer>); }
    protected override string GetClassNameCore() { return default(string); }
    protected override System.Windows.Point GetClickablePointCore() { return default(System.Windows.Point); }
    protected override string GetHelpTextCore() { return default(string); }
    protected override string GetItemStatusCore() { return default(string); }
    protected override string GetItemTypeCore() { return default(string); }
    protected override System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore() { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected override string GetNameCore() { return default(string); }
    protected override System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore() { return default(System.Windows.Automation.Peers.AutomationOrientation); }
    public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { return default(object); }
    protected override bool HasKeyboardFocusCore() { return default(bool); }
    protected override bool IsContentElementCore() { return default(bool); }
    protected override bool IsControlElementCore() { return default(bool); }
    protected override bool IsEnabledCore() { return default(bool); }
    protected override bool IsKeyboardFocusableCore() { return default(bool); }
    protected override bool IsOffscreenCore() { return default(bool); }
    protected override bool IsPasswordCore() { return default(bool); }
    protected override bool IsRequiredForFormCore() { return default(bool); }
    protected override void SetFocusCore() { }
  }
  public partial class UIElementAutomationPeer : System.Windows.Automation.Peers.AutomationPeer {
    public UIElementAutomationPeer(System.Windows.UIElement owner) { }
    public System.Windows.UIElement Owner { get { return default(System.Windows.UIElement); } }
    public static System.Windows.Automation.Peers.AutomationPeer CreatePeerForElement(System.Windows.UIElement element) { return default(System.Windows.Automation.Peers.AutomationPeer); }
    public static System.Windows.Automation.Peers.AutomationPeer FromElement(System.Windows.UIElement element) { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected override string GetAcceleratorKeyCore() { return default(string); }
    protected override string GetAccessKeyCore() { return default(string); }
    protected override System.Windows.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { return default(System.Windows.Automation.Peers.AutomationControlType); }
    protected override string GetAutomationIdCore() { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override System.Windows.Rect GetBoundingRectangleCore() { return default(System.Windows.Rect); }
    protected override System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer> GetChildrenCore() { return default(System.Collections.Generic.List<System.Windows.Automation.Peers.AutomationPeer>); }
    protected override string GetClassNameCore() { return default(string); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override System.Windows.Point GetClickablePointCore() { return default(System.Windows.Point); }
    protected override string GetHelpTextCore() { return default(string); }
    protected override string GetItemStatusCore() { return default(string); }
    protected override string GetItemTypeCore() { return default(string); }
    protected override System.Windows.Automation.Peers.AutomationPeer GetLabeledByCore() { return default(System.Windows.Automation.Peers.AutomationPeer); }
    protected override string GetNameCore() { return default(string); }
    protected override System.Windows.Automation.Peers.AutomationOrientation GetOrientationCore() { return default(System.Windows.Automation.Peers.AutomationOrientation); }
    public override object GetPattern(System.Windows.Automation.Peers.PatternInterface patternInterface) { return default(object); }
    protected override bool HasKeyboardFocusCore() { return default(bool); }
    protected override bool IsContentElementCore() { return default(bool); }
    protected override bool IsControlElementCore() { return default(bool); }
    protected override bool IsEnabledCore() { return default(bool); }
    protected override bool IsKeyboardFocusableCore() { return default(bool); }
    protected override bool IsOffscreenCore() { return default(bool); }
    protected override bool IsPasswordCore() { return default(bool); }
    protected override bool IsRequiredForFormCore() { return default(bool); }
    protected override void SetFocusCore() { }
  }
}
namespace System.Windows.Diagnostics {
  public static partial class VisualDiagnostics {
    public static event System.EventHandler<System.Windows.Diagnostics.VisualTreeChangeEventArgs> VisualTreeChanged { add { } remove { } }
    public static System.Windows.Diagnostics.XamlSourceInfo GetXamlSourceInfo(object obj) { return default(System.Windows.Diagnostics.XamlSourceInfo); }
  }
  public partial class VisualTreeChangeEventArgs : System.EventArgs {
    public VisualTreeChangeEventArgs(System.Windows.DependencyObject parent, System.Windows.DependencyObject child, int childIndex, System.Windows.Diagnostics.VisualTreeChangeType changeType) { }
    public System.Windows.Diagnostics.VisualTreeChangeType ChangeType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Diagnostics.VisualTreeChangeType); } }
    public System.Windows.DependencyObject Child { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.DependencyObject); } }
    public int ChildIndex { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } }
    public System.Windows.DependencyObject Parent { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.DependencyObject); } }
  }
  public enum VisualTreeChangeType {
    Add = 0,
    Remove = 1,
  }
  [System.Diagnostics.DebuggerDisplayAttribute("{line={LineNumber}, offset={LinePosition}, uri={SourceUri}}")]
  public partial class XamlSourceInfo {
    public XamlSourceInfo(System.Uri sourceUri, int lineNumber, int linePosition) { }
    public int LineNumber { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } }
    public int LinePosition { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } }
    public System.Uri SourceUri { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Uri); } }
  }
}
namespace System.Windows.Documents {
  public abstract partial class ContentPosition {
    public static readonly System.Windows.Documents.ContentPosition Missing;
    protected ContentPosition() { }
  }
  public partial class DocumentPage : System.IDisposable {
    public static readonly System.Windows.Documents.DocumentPage Missing;
    public DocumentPage(System.Windows.Media.Visual visual) { }
    public DocumentPage(System.Windows.Media.Visual visual, System.Windows.Size pageSize, System.Windows.Rect bleedBox, System.Windows.Rect contentBox) { }
    public virtual System.Windows.Rect BleedBox { get { return default(System.Windows.Rect); } }
    public virtual System.Windows.Rect ContentBox { get { return default(System.Windows.Rect); } }
    public virtual System.Windows.Size Size { get { return default(System.Windows.Size); } }
    public virtual System.Windows.Media.Visual Visual { get { return default(System.Windows.Media.Visual); } }
    public event System.EventHandler PageDestroyed { add { } remove { } }
    public virtual void Dispose() { }
    protected void OnPageDestroyed(System.EventArgs e) { }
    protected void SetBleedBox(System.Windows.Rect bleedBox) { }
    protected void SetContentBox(System.Windows.Rect contentBox) { }
    protected void SetSize(System.Windows.Size size) { }
    protected void SetVisual(System.Windows.Media.Visual visual) { }
  }
  public abstract partial class DocumentPaginator {
    protected DocumentPaginator() { }
    public abstract bool IsPageCountValid { get; }
    public abstract int PageCount { get; }
    public abstract System.Windows.Size PageSize { get; set; }
    public abstract System.Windows.Documents.IDocumentPaginatorSource Source { get; }
    public event System.ComponentModel.AsyncCompletedEventHandler ComputePageCountCompleted { add { } remove { } }
    public event System.Windows.Documents.GetPageCompletedEventHandler GetPageCompleted { add { } remove { } }
    public event System.Windows.Documents.PagesChangedEventHandler PagesChanged { add { } remove { } }
    public virtual void CancelAsync(object userState) { }
    public virtual void ComputePageCount() { }
    public virtual void ComputePageCountAsync() { }
    public virtual void ComputePageCountAsync(object userState) { }
    public abstract System.Windows.Documents.DocumentPage GetPage(int pageNumber);
    public virtual void GetPageAsync(int pageNumber) { }
    public virtual void GetPageAsync(int pageNumber, object userState) { }
    protected virtual void OnComputePageCountCompleted(System.ComponentModel.AsyncCompletedEventArgs e) { }
    protected virtual void OnGetPageCompleted(System.Windows.Documents.GetPageCompletedEventArgs e) { }
    protected virtual void OnPagesChanged(System.Windows.Documents.PagesChangedEventArgs e) { }
  }
  public abstract partial class DynamicDocumentPaginator : System.Windows.Documents.DocumentPaginator {
    protected DynamicDocumentPaginator() { }
    public virtual bool IsBackgroundPaginationEnabled { get { return default(bool); } set { } }
    public event System.Windows.Documents.GetPageNumberCompletedEventHandler GetPageNumberCompleted { add { } remove { } }
    public event System.EventHandler PaginationCompleted { add { } remove { } }
    public event System.Windows.Documents.PaginationProgressEventHandler PaginationProgress { add { } remove { } }
    public abstract System.Windows.Documents.ContentPosition GetObjectPosition(object value);
    public abstract int GetPageNumber(System.Windows.Documents.ContentPosition contentPosition);
    public virtual void GetPageNumberAsync(System.Windows.Documents.ContentPosition contentPosition) { }
    public virtual void GetPageNumberAsync(System.Windows.Documents.ContentPosition contentPosition, object userState) { }
    public abstract System.Windows.Documents.ContentPosition GetPagePosition(System.Windows.Documents.DocumentPage page);
    protected virtual void OnGetPageNumberCompleted(System.Windows.Documents.GetPageNumberCompletedEventArgs e) { }
    protected virtual void OnPaginationCompleted(System.EventArgs e) { }
    protected virtual void OnPaginationProgress(System.Windows.Documents.PaginationProgressEventArgs e) { }
  }
  public partial class GetPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    public GetPageCompletedEventArgs(System.Windows.Documents.DocumentPage page, int pageNumber, System.Exception error, bool cancelled, object userState) { }
    public System.Windows.Documents.DocumentPage DocumentPage { get { return default(System.Windows.Documents.DocumentPage); } }
    public int PageNumber { get { return default(int); } }
  }
  public delegate void GetPageCompletedEventHandler(object sender, System.Windows.Documents.GetPageCompletedEventArgs e);
  public partial class GetPageNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    public GetPageNumberCompletedEventArgs(System.Windows.Documents.ContentPosition contentPosition, int pageNumber, System.Exception error, bool cancelled, object userState) { }
    public System.Windows.Documents.ContentPosition ContentPosition { get { return default(System.Windows.Documents.ContentPosition); } }
    public int PageNumber { get { return default(int); } }
  }
  public delegate void GetPageNumberCompletedEventHandler(object sender, System.Windows.Documents.GetPageNumberCompletedEventArgs e);
  public partial interface IDocumentPaginatorSource {
    System.Windows.Documents.DocumentPaginator DocumentPaginator { get; }
  }
  public partial class PagesChangedEventArgs : System.EventArgs {
    public PagesChangedEventArgs(int start, int count) { }
    public int Count { get { return default(int); } }
    public int Start { get { return default(int); } }
  }
  public delegate void PagesChangedEventHandler(object sender, System.Windows.Documents.PagesChangedEventArgs e);
  public partial class PaginationProgressEventArgs : System.EventArgs {
    public PaginationProgressEventArgs(int start, int count) { }
    public int Count { get { return default(int); } }
    public int Start { get { return default(int); } }
  }
  public delegate void PaginationProgressEventHandler(object sender, System.Windows.Documents.PaginationProgressEventArgs e);
}
namespace System.Windows.Ink {
  public enum ApplicationGesture {
    AllGestures = 0,
    ArrowDown = 61497,
    ArrowLeft = 61498,
    ArrowRight = 61499,
    ArrowUp = 61496,
    Check = 61445,
    ChevronDown = 61489,
    ChevronLeft = 61490,
    ChevronRight = 61491,
    ChevronUp = 61488,
    Circle = 61472,
    Curlicue = 61456,
    DoubleCircle = 61473,
    DoubleCurlicue = 61457,
    DoubleTap = 61681,
    Down = 61529,
    DownLeft = 61546,
    DownLeftLong = 61542,
    DownRight = 61547,
    DownRightLong = 61543,
    DownUp = 61537,
    Exclamation = 61604,
    Left = 61530,
    LeftDown = 61549,
    LeftRight = 61538,
    LeftUp = 61548,
    NoGesture = 61440,
    Right = 61531,
    RightDown = 61551,
    RightLeft = 61539,
    RightUp = 61550,
    ScratchOut = 61441,
    SemicircleLeft = 61480,
    SemicircleRight = 61481,
    Square = 61443,
    Star = 61444,
    Tap = 61680,
    Triangle = 61442,
    Up = 61528,
    UpDown = 61536,
    UpLeft = 61544,
    UpLeftLong = 61540,
    UpRight = 61545,
    UpRightLong = 61541,
  }
  public static partial class DrawingAttributeIds {
    public static readonly System.Guid Color;
    public static readonly System.Guid DrawingFlags;
    public static readonly System.Guid IsHighlighter;
    public static readonly System.Guid StylusHeight;
    public static readonly System.Guid StylusTip;
    public static readonly System.Guid StylusTipTransform;
    public static readonly System.Guid StylusWidth;
  }
  public partial class DrawingAttributes : System.ComponentModel.INotifyPropertyChanged {
    public static readonly double MaxHeight;
    public static readonly double MaxWidth;
    public static readonly double MinHeight;
    public static readonly double MinWidth;
    public DrawingAttributes() { }
    public System.Windows.Media.Color Color { get { return default(System.Windows.Media.Color); } set { } }
    public bool FitToCurve { get { return default(bool); } set { } }
    public double Height { get { return default(double); } set { } }
    public bool IgnorePressure { get { return default(bool); } set { } }
    public bool IsHighlighter { get { return default(bool); } set { } }
    public System.Windows.Ink.StylusTip StylusTip { get { return default(System.Windows.Ink.StylusTip); } set { } }
    public System.Windows.Media.Matrix StylusTipTransform { get { return default(System.Windows.Media.Matrix); } set { } }
    public double Width { get { return default(double); } set { } }
    public event System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged { add { } remove { } }
    public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged { add { } remove { } }
    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
    public void AddPropertyData(System.Guid propertyDataId, object propertyData) { }
    public virtual System.Windows.Ink.DrawingAttributes Clone() { return default(System.Windows.Ink.DrawingAttributes); }
    public bool ContainsPropertyData(System.Guid propertyDataId) { return default(bool); }
    public override bool Equals(object o) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public object GetPropertyData(System.Guid propertyDataId) { return default(object); }
    public System.Guid[] GetPropertyDataIds() { return default(System.Guid[]); }
    protected virtual void OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
    protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
    protected virtual void OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
    public static bool operator ==(System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second) { return default(bool); }
    public static bool operator !=(System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second) { return default(bool); }
    public void RemovePropertyData(System.Guid propertyDataId) { }
  }
  public partial class DrawingAttributesReplacedEventArgs : System.EventArgs {
    public DrawingAttributesReplacedEventArgs(System.Windows.Ink.DrawingAttributes newDrawingAttributes, System.Windows.Ink.DrawingAttributes previousDrawingAttributes) { }
    public System.Windows.Ink.DrawingAttributes NewDrawingAttributes { get { return default(System.Windows.Ink.DrawingAttributes); } }
    public System.Windows.Ink.DrawingAttributes PreviousDrawingAttributes { get { return default(System.Windows.Ink.DrawingAttributes); } }
  }
  public delegate void DrawingAttributesReplacedEventHandler(object sender, System.Windows.Ink.DrawingAttributesReplacedEventArgs e);
  public sealed partial class EllipseStylusShape : System.Windows.Ink.StylusShape {
    public EllipseStylusShape(double width, double height) { }
    public EllipseStylusShape(double width, double height, double rotation) { }
  }
  public partial class GestureRecognitionResult {
    internal GestureRecognitionResult() { }
    public System.Windows.Ink.ApplicationGesture ApplicationGesture { get { return default(System.Windows.Ink.ApplicationGesture); } }
    public System.Windows.Ink.RecognitionConfidence RecognitionConfidence { get { return default(System.Windows.Ink.RecognitionConfidence); } }
  }
  public sealed partial class GestureRecognizer : System.Windows.DependencyObject, System.IDisposable {
    public GestureRecognizer() { }
    public GestureRecognizer(System.Collections.Generic.IEnumerable<System.Windows.Ink.ApplicationGesture> enabledApplicationGestures) { }
    public bool IsRecognizerAvailable { get { return default(bool); } }
    public void Dispose() { }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Ink.ApplicationGesture> GetEnabledGestures() { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Ink.ApplicationGesture>); }
    [System.Security.SecurityCriticalAttribute]
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Ink.GestureRecognitionResult> Recognize(System.Windows.Ink.StrokeCollection strokes) { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Ink.GestureRecognitionResult>); }
    public void SetEnabledGestures(System.Collections.Generic.IEnumerable<System.Windows.Ink.ApplicationGesture> applicationGestures) { }
  }
  public abstract partial class IncrementalHitTester {
    internal IncrementalHitTester() { }
    public bool IsValid { get { return default(bool); } }
    public void AddPoint(System.Windows.Point point) { }
    public void AddPoints(System.Collections.Generic.IEnumerable<System.Windows.Point> points) { }
    public void AddPoints(System.Windows.Input.StylusPointCollection stylusPoints) { }
    protected abstract void AddPointsCore(System.Collections.Generic.IEnumerable<System.Windows.Point> points);
    public void EndHitTesting() { }
  }
  public partial class IncrementalLassoHitTester : System.Windows.Ink.IncrementalHitTester {
    internal IncrementalLassoHitTester() { }
    public event System.Windows.Ink.LassoSelectionChangedEventHandler SelectionChanged { add { } remove { } }
    protected override void AddPointsCore(System.Collections.Generic.IEnumerable<System.Windows.Point> points) { }
    protected void OnSelectionChanged(System.Windows.Ink.LassoSelectionChangedEventArgs eventArgs) { }
  }
  public partial class IncrementalStrokeHitTester : System.Windows.Ink.IncrementalHitTester {
    internal IncrementalStrokeHitTester() { }
    public event System.Windows.Ink.StrokeHitEventHandler StrokeHit { add { } remove { } }
    protected override void AddPointsCore(System.Collections.Generic.IEnumerable<System.Windows.Point> points) { }
    protected void OnStrokeHit(System.Windows.Ink.StrokeHitEventArgs eventArgs) { }
  }
  public partial class LassoSelectionChangedEventArgs : System.EventArgs {
    internal LassoSelectionChangedEventArgs() { }
    public System.Windows.Ink.StrokeCollection DeselectedStrokes { get { return default(System.Windows.Ink.StrokeCollection); } }
    public System.Windows.Ink.StrokeCollection SelectedStrokes { get { return default(System.Windows.Ink.StrokeCollection); } }
  }
  public delegate void LassoSelectionChangedEventHandler(object sender, System.Windows.Ink.LassoSelectionChangedEventArgs e);
  public partial class PropertyDataChangedEventArgs : System.EventArgs {
    public PropertyDataChangedEventArgs(System.Guid propertyGuid, object newValue, object previousValue) { }
    public object NewValue { get { return default(object); } }
    public object PreviousValue { get { return default(object); } }
    public System.Guid PropertyGuid { get { return default(System.Guid); } }
  }
  public delegate void PropertyDataChangedEventHandler(object sender, System.Windows.Ink.PropertyDataChangedEventArgs e);
  public enum RecognitionConfidence {
    Intermediate = 1,
    Poor = 2,
    Strong = 0,
  }
  public sealed partial class RectangleStylusShape : System.Windows.Ink.StylusShape {
    public RectangleStylusShape(double width, double height) { }
    public RectangleStylusShape(double width, double height, double rotation) { }
  }
  public partial class Stroke : System.ComponentModel.INotifyPropertyChanged {
    public Stroke(System.Windows.Input.StylusPointCollection stylusPoints) { }
    public Stroke(System.Windows.Input.StylusPointCollection stylusPoints, System.Windows.Ink.DrawingAttributes drawingAttributes) { }
    public System.Windows.Ink.DrawingAttributes DrawingAttributes { get { return default(System.Windows.Ink.DrawingAttributes); } set { } }
    public System.Windows.Input.StylusPointCollection StylusPoints { get { return default(System.Windows.Input.StylusPointCollection); } set { } }
    public event System.Windows.Ink.PropertyDataChangedEventHandler DrawingAttributesChanged { add { } remove { } }
    public event System.Windows.Ink.DrawingAttributesReplacedEventHandler DrawingAttributesReplaced { add { } remove { } }
    public event System.EventHandler Invalidated { add { } remove { } }
    public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged { add { } remove { } }
    public event System.EventHandler StylusPointsChanged { add { } remove { } }
    public event System.Windows.Ink.StylusPointsReplacedEventHandler StylusPointsReplaced { add { } remove { } }
    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
    public void AddPropertyData(System.Guid propertyDataId, object propertyData) { }
    public virtual System.Windows.Ink.Stroke Clone() { return default(System.Windows.Ink.Stroke); }
    public bool ContainsPropertyData(System.Guid propertyDataId) { return default(bool); }
    public void Draw(System.Windows.Media.DrawingContext context) { }
    public void Draw(System.Windows.Media.DrawingContext drawingContext, System.Windows.Ink.DrawingAttributes drawingAttributes) { }
    protected virtual void DrawCore(System.Windows.Media.DrawingContext drawingContext, System.Windows.Ink.DrawingAttributes drawingAttributes) { }
    public System.Windows.Input.StylusPointCollection GetBezierStylusPoints() { return default(System.Windows.Input.StylusPointCollection); }
    public virtual System.Windows.Rect GetBounds() { return default(System.Windows.Rect); }
    public System.Windows.Ink.StrokeCollection GetClipResult(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints) { return default(System.Windows.Ink.StrokeCollection); }
    public System.Windows.Ink.StrokeCollection GetClipResult(System.Windows.Rect bounds) { return default(System.Windows.Ink.StrokeCollection); }
    public System.Windows.Ink.StrokeCollection GetEraseResult(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints) { return default(System.Windows.Ink.StrokeCollection); }
    public System.Windows.Ink.StrokeCollection GetEraseResult(System.Collections.Generic.IEnumerable<System.Windows.Point> eraserPath, System.Windows.Ink.StylusShape eraserShape) { return default(System.Windows.Ink.StrokeCollection); }
    public System.Windows.Ink.StrokeCollection GetEraseResult(System.Windows.Rect bounds) { return default(System.Windows.Ink.StrokeCollection); }
    public System.Windows.Media.Geometry GetGeometry() { return default(System.Windows.Media.Geometry); }
    public System.Windows.Media.Geometry GetGeometry(System.Windows.Ink.DrawingAttributes drawingAttributes) { return default(System.Windows.Media.Geometry); }
    public object GetPropertyData(System.Guid propertyDataId) { return default(object); }
    public System.Guid[] GetPropertyDataIds() { return default(System.Guid[]); }
    public bool HitTest(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints, int percentageWithinLasso) { return default(bool); }
    public bool HitTest(System.Collections.Generic.IEnumerable<System.Windows.Point> path, System.Windows.Ink.StylusShape stylusShape) { return default(bool); }
    public bool HitTest(System.Windows.Point point) { return default(bool); }
    public bool HitTest(System.Windows.Point point, double diameter) { return default(bool); }
    public bool HitTest(System.Windows.Rect bounds, int percentageWithinBounds) { return default(bool); }
    protected virtual void OnDrawingAttributesChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
    protected virtual void OnDrawingAttributesReplaced(System.Windows.Ink.DrawingAttributesReplacedEventArgs e) { }
    protected virtual void OnInvalidated(System.EventArgs e) { }
    protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
    protected virtual void OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
    protected virtual void OnStylusPointsChanged(System.EventArgs e) { }
    protected virtual void OnStylusPointsReplaced(System.Windows.Ink.StylusPointsReplacedEventArgs e) { }
    public void RemovePropertyData(System.Guid propertyDataId) { }
    public virtual void Transform(System.Windows.Media.Matrix transformMatrix, bool applyToStylusTip) { }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.StrokeCollectionConverter))]
  public partial class StrokeCollection : System.Collections.ObjectModel.Collection<System.Windows.Ink.Stroke>, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged {
    public static readonly string InkSerializedFormat;
    public StrokeCollection() { }
    public StrokeCollection(System.Collections.Generic.IEnumerable<System.Windows.Ink.Stroke> strokes) { }
    public StrokeCollection(System.IO.Stream stream) { }
    public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged { add { } remove { } }
    public event System.Windows.Ink.StrokeCollectionChangedEventHandler StrokesChanged { add { } remove { } }
    event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged { add { } remove { } }
    event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
    public void Add(System.Windows.Ink.StrokeCollection strokes) { }
    public void AddPropertyData(System.Guid propertyDataId, object propertyData) { }
    protected sealed override void ClearItems() { }
    public void Clip(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints) { }
    public void Clip(System.Windows.Rect bounds) { }
    public virtual System.Windows.Ink.StrokeCollection Clone() { return default(System.Windows.Ink.StrokeCollection); }
    public bool ContainsPropertyData(System.Guid propertyDataId) { return default(bool); }
    public void Draw(System.Windows.Media.DrawingContext context) { }
    public void Erase(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints) { }
    public void Erase(System.Collections.Generic.IEnumerable<System.Windows.Point> eraserPath, System.Windows.Ink.StylusShape eraserShape) { }
    public void Erase(System.Windows.Rect bounds) { }
    public System.Windows.Rect GetBounds() { return default(System.Windows.Rect); }
    public System.Windows.Ink.IncrementalLassoHitTester GetIncrementalLassoHitTester(int percentageWithinLasso) { return default(System.Windows.Ink.IncrementalLassoHitTester); }
    public System.Windows.Ink.IncrementalStrokeHitTester GetIncrementalStrokeHitTester(System.Windows.Ink.StylusShape eraserShape) { return default(System.Windows.Ink.IncrementalStrokeHitTester); }
    public object GetPropertyData(System.Guid propertyDataId) { return default(object); }
    public System.Guid[] GetPropertyDataIds() { return default(System.Guid[]); }
    public System.Windows.Ink.StrokeCollection HitTest(System.Collections.Generic.IEnumerable<System.Windows.Point> lassoPoints, int percentageWithinLasso) { return default(System.Windows.Ink.StrokeCollection); }
    public System.Windows.Ink.StrokeCollection HitTest(System.Collections.Generic.IEnumerable<System.Windows.Point> path, System.Windows.Ink.StylusShape stylusShape) { return default(System.Windows.Ink.StrokeCollection); }
    public System.Windows.Ink.StrokeCollection HitTest(System.Windows.Point point) { return default(System.Windows.Ink.StrokeCollection); }
    public System.Windows.Ink.StrokeCollection HitTest(System.Windows.Point point, double diameter) { return default(System.Windows.Ink.StrokeCollection); }
    public System.Windows.Ink.StrokeCollection HitTest(System.Windows.Rect bounds, int percentageWithinBounds) { return default(System.Windows.Ink.StrokeCollection); }
    public new int IndexOf(System.Windows.Ink.Stroke stroke) { return default(int); }
    protected sealed override void InsertItem(int index, System.Windows.Ink.Stroke stroke) { }
    protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
    protected virtual void OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs e) { }
    protected virtual void OnStrokesChanged(System.Windows.Ink.StrokeCollectionChangedEventArgs e) { }
    public void Remove(System.Windows.Ink.StrokeCollection strokes) { }
    protected sealed override void RemoveItem(int index) { }
    public void RemovePropertyData(System.Guid propertyDataId) { }
    public void Replace(System.Windows.Ink.Stroke strokeToReplace, System.Windows.Ink.StrokeCollection strokesToReplaceWith) { }
    public void Replace(System.Windows.Ink.StrokeCollection strokesToReplace, System.Windows.Ink.StrokeCollection strokesToReplaceWith) { }
    public void Save(System.IO.Stream stream) { }
    public virtual void Save(System.IO.Stream stream, bool compress) { }
    protected sealed override void SetItem(int index, System.Windows.Ink.Stroke stroke) { }
    public void Transform(System.Windows.Media.Matrix transformMatrix, bool applyToStylusTip) { }
  }
  public partial class StrokeCollectionChangedEventArgs : System.EventArgs {
    public StrokeCollectionChangedEventArgs(System.Windows.Ink.StrokeCollection added, System.Windows.Ink.StrokeCollection removed) { }
    public System.Windows.Ink.StrokeCollection Added { get { return default(System.Windows.Ink.StrokeCollection); } }
    public System.Windows.Ink.StrokeCollection Removed { get { return default(System.Windows.Ink.StrokeCollection); } }
  }
  public delegate void StrokeCollectionChangedEventHandler(object sender, System.Windows.Ink.StrokeCollectionChangedEventArgs e);
  public partial class StrokeHitEventArgs : System.EventArgs {
    internal StrokeHitEventArgs() { }
    public System.Windows.Ink.Stroke HitStroke { get { return default(System.Windows.Ink.Stroke); } }
    public System.Windows.Ink.StrokeCollection GetPointEraseResults() { return default(System.Windows.Ink.StrokeCollection); }
  }
  public delegate void StrokeHitEventHandler(object sender, System.Windows.Ink.StrokeHitEventArgs e);
  public partial class StylusPointsReplacedEventArgs : System.EventArgs {
    public StylusPointsReplacedEventArgs(System.Windows.Input.StylusPointCollection newStylusPoints, System.Windows.Input.StylusPointCollection previousStylusPoints) { }
    public System.Windows.Input.StylusPointCollection NewStylusPoints { get { return default(System.Windows.Input.StylusPointCollection); } }
    public System.Windows.Input.StylusPointCollection PreviousStylusPoints { get { return default(System.Windows.Input.StylusPointCollection); } }
  }
  public delegate void StylusPointsReplacedEventHandler(object sender, System.Windows.Ink.StylusPointsReplacedEventArgs e);
  public abstract partial class StylusShape {
    internal StylusShape() { }
    public double Height { get { return default(double); } }
    public double Rotation { get { return default(double); } }
    public double Width { get { return default(double); } }
  }
  public enum StylusTip {
    Ellipse = 1,
    Rectangle = 0,
  }
}
namespace System.Windows.Input {
  public partial class AccessKeyEventArgs : System.EventArgs {
    internal AccessKeyEventArgs() { }
    public bool IsMultiple { get { return default(bool); } }
    public string Key { get { return default(string); } }
  }
  public sealed partial class AccessKeyManager {
    internal AccessKeyManager() { }
    public static readonly System.Windows.RoutedEvent AccessKeyPressedEvent;
    public static void AddAccessKeyPressedHandler(System.Windows.DependencyObject element, System.Windows.Input.AccessKeyPressedEventHandler handler) { }
    public static bool IsKeyRegistered(object scope, string key) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public static bool ProcessKey(object scope, string key, bool isMultiple) { return default(bool); }
    public static void Register(string key, System.Windows.IInputElement element) { }
    public static void RemoveAccessKeyPressedHandler(System.Windows.DependencyObject element, System.Windows.Input.AccessKeyPressedEventHandler handler) { }
    public static void Unregister(string key, System.Windows.IInputElement element) { }
  }
  public partial class AccessKeyPressedEventArgs : System.Windows.RoutedEventArgs {
    public AccessKeyPressedEventArgs() { }
    public AccessKeyPressedEventArgs(string key) { }
    public string Key { get { return default(string); } }
    public object Scope { get { return default(object); } set { } }
    public System.Windows.UIElement Target { get { return default(System.Windows.UIElement); } set { } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void AccessKeyPressedEventHandler(object sender, System.Windows.Input.AccessKeyPressedEventArgs e);
  public static partial class ApplicationCommands {
    public static System.Windows.Input.RoutedUICommand CancelPrint { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Close { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ContextMenu { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Copy { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand CorrectionList { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Cut { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Delete { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Find { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Help { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand New { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand NotACommand { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Open { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Paste { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Print { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand PrintPreview { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Properties { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Redo { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Replace { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Save { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand SaveAs { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand SelectAll { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Stop { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Undo { get { return default(System.Windows.Input.RoutedUICommand); } }
  }
  public partial class CanExecuteChangedEventManager : System.Windows.WeakEventManager {
    internal CanExecuteChangedEventManager() { }
    public static void AddHandler(System.Windows.Input.ICommand source, System.EventHandler<System.EventArgs> handler) { }
    protected override bool Purge(object source, object data, bool purgeAll) { return default(bool); }
    public static void RemoveHandler(System.Windows.Input.ICommand source, System.EventHandler<System.EventArgs> handler) { }
    protected override void StartListening(object source) { }
    protected override void StopListening(object source) { }
  }
  public sealed partial class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs {
    internal CanExecuteRoutedEventArgs() { }
    public bool CanExecute { get { return default(bool); } set { } }
    public System.Windows.Input.ICommand Command { get { return default(System.Windows.Input.ICommand); } }
    public bool ContinueRouting { get { return default(bool); } set { } }
    public object Parameter { get { return default(object); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object target) { }
  }
  public delegate void CanExecuteRoutedEventHandler(object sender, System.Windows.Input.CanExecuteRoutedEventArgs e);
  public enum CaptureMode {
    Element = 1,
    None = 0,
    SubTree = 2,
  }
  public partial class CommandBinding {
    public CommandBinding() { }
    public CommandBinding(System.Windows.Input.ICommand command) { }
    public CommandBinding(System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed) { }
    public CommandBinding(System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute) { }
    [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(17))]
    public System.Windows.Input.ICommand Command { get { return default(System.Windows.Input.ICommand); } set { } }
    public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute { add { } remove { } }
    public event System.Windows.Input.ExecutedRoutedEventHandler Executed { add { } remove { } }
    public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute { add { } remove { } }
    public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted { add { } remove { } }
  }
  public sealed partial class CommandBindingCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public CommandBindingCollection() { }
    public CommandBindingCollection(System.Collections.IList commandBindings) { }
    public int Count { get { return default(int); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Input.CommandBinding this[int index] { get { return default(System.Windows.Input.CommandBinding); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Input.CommandBinding commandBinding) { return default(int); }
    public void AddRange(System.Collections.ICollection collection) { }
    public void Clear() { }
    public bool Contains(System.Windows.Input.CommandBinding commandBinding) { return default(bool); }
    public void CopyTo(System.Windows.Input.CommandBinding[] commandBindings, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Input.CommandBinding value) { return default(int); }
    public void Insert(int index, System.Windows.Input.CommandBinding commandBinding) { }
    public void Remove(System.Windows.Input.CommandBinding commandBinding) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object commandBinding) { return default(int); }
    bool System.Collections.IList.Contains(object key) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object commandBinding) { }
  }
  public sealed partial class CommandManager {
    internal CommandManager() { }
    public static readonly System.Windows.RoutedEvent CanExecuteEvent;
    public static readonly System.Windows.RoutedEvent ExecutedEvent;
    public static readonly System.Windows.RoutedEvent PreviewCanExecuteEvent;
    public static readonly System.Windows.RoutedEvent PreviewExecutedEvent;
    public static event System.EventHandler RequerySuggested { add { } remove { } }
    public static void AddCanExecuteHandler(System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler) { }
    public static void AddExecutedHandler(System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler) { }
    public static void AddPreviewCanExecuteHandler(System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler) { }
    public static void AddPreviewExecutedHandler(System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler) { }
    public static void InvalidateRequerySuggested() { }
    public static void RegisterClassCommandBinding(System.Type type, System.Windows.Input.CommandBinding commandBinding) { }
    public static void RegisterClassInputBinding(System.Type type, System.Windows.Input.InputBinding inputBinding) { }
    public static void RemoveCanExecuteHandler(System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler) { }
    public static void RemoveExecutedHandler(System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler) { }
    public static void RemovePreviewCanExecuteHandler(System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler) { }
    public static void RemovePreviewExecutedHandler(System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler) { }
  }
  public static partial class ComponentCommands {
    public static System.Windows.Input.RoutedUICommand ExtendSelectionDown { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ExtendSelectionLeft { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ExtendSelectionRight { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ExtendSelectionUp { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveDown { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveFocusBack { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveFocusDown { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveFocusForward { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveFocusPageDown { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveFocusPageUp { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveFocusUp { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveLeft { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveRight { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveToEnd { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveToHome { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveToPageDown { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveToPageUp { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MoveUp { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ScrollByLine { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ScrollPageDown { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ScrollPageLeft { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ScrollPageRight { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ScrollPageUp { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand SelectToEnd { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand SelectToHome { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand SelectToPageDown { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand SelectToPageUp { get { return default(System.Windows.Input.RoutedUICommand); } }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.CursorConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public sealed partial class Cursor : System.IDisposable {
    public Cursor(System.IO.Stream cursorStream) { }
    public Cursor(System.IO.Stream cursorStream, bool scaleWithDpi) { }
    public Cursor(string cursorFile) { }
    public Cursor(string cursorFile, bool scaleWithDpi) { }
    public void Dispose() { }
    ~Cursor() { }
    public override string ToString() { return default(string); }
  }
  public partial class CursorConverter : System.ComponentModel.TypeConverter {
    public CursorConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
    public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) { return default(System.ComponentModel.TypeConverter.StandardValuesCollection); }
    public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) { return default(bool); }
  }
  public static partial class Cursors {
    public static System.Windows.Input.Cursor AppStarting { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor Arrow { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ArrowCD { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor Cross { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor Hand { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor Help { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor IBeam { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor No { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor None { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor Pen { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollAll { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollE { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollN { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollNE { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollNS { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollNW { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollS { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollSE { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollSW { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollW { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor ScrollWE { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor SizeAll { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor SizeNESW { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor SizeNS { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor SizeNWSE { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor SizeWE { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor UpArrow { get { return default(System.Windows.Input.Cursor); } }
    public static System.Windows.Input.Cursor Wait { get { return default(System.Windows.Input.Cursor); } }
  }
  public enum CursorType {
    AppStarting = 3,
    Arrow = 2,
    ArrowCD = 27,
    Cross = 4,
    Hand = 14,
    Help = 5,
    IBeam = 6,
    No = 1,
    None = 0,
    Pen = 15,
    ScrollAll = 18,
    ScrollE = 22,
    ScrollN = 19,
    ScrollNE = 24,
    ScrollNS = 16,
    ScrollNW = 23,
    ScrollS = 20,
    ScrollSE = 26,
    ScrollSW = 25,
    ScrollW = 21,
    ScrollWE = 17,
    SizeAll = 7,
    SizeNESW = 8,
    SizeNS = 9,
    SizeNWSE = 10,
    SizeWE = 11,
    UpArrow = 12,
    Wait = 13,
  }
  public sealed partial class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs {
    internal ExecutedRoutedEventArgs() { }
    public System.Windows.Input.ICommand Command { get { return default(System.Windows.Input.ICommand); } }
    public object Parameter { get { return default(object); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object target) { }
  }
  public delegate void ExecutedRoutedEventHandler(object sender, System.Windows.Input.ExecutedRoutedEventArgs e);
  public static partial class FocusManager {
    public static readonly System.Windows.DependencyProperty FocusedElementProperty;
    public static readonly System.Windows.RoutedEvent GotFocusEvent;
    public static readonly System.Windows.DependencyProperty IsFocusScopeProperty;
    public static readonly System.Windows.RoutedEvent LostFocusEvent;
    public static void AddGotFocusHandler(System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler) { }
    public static void AddLostFocusHandler(System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler) { }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
    public static System.Windows.IInputElement GetFocusedElement(System.Windows.DependencyObject element) { return default(System.Windows.IInputElement); }
    public static System.Windows.DependencyObject GetFocusScope(System.Windows.DependencyObject element) { return default(System.Windows.DependencyObject); }
    public static bool GetIsFocusScope(System.Windows.DependencyObject element) { return default(bool); }
    public static void RemoveGotFocusHandler(System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler) { }
    public static void RemoveLostFocusHandler(System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler) { }
    public static void SetFocusedElement(System.Windows.DependencyObject element, System.Windows.IInputElement value) { }
    public static void SetIsFocusScope(System.Windows.DependencyObject element, bool value) { }
  }
  public partial interface ICommandSource {
    System.Windows.Input.ICommand Command { get; }
    object CommandParameter { get; }
    System.Windows.IInputElement CommandTarget { get; }
  }
  public partial interface IInputLanguageSource {
    System.Globalization.CultureInfo CurrentInputLanguage { get; set; }
    System.Collections.IEnumerable InputLanguageList { get; }
    void Initialize();
    void Uninitialize();
  }
  public partial interface IManipulator {
    int Id { get; }
    event System.EventHandler Updated;
    System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo);
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    void ManipulationEnded(bool cancel);
  }
  [System.FlagsAttribute]
  public enum ImeConversionModeValues {
    Alphanumeric = 512,
    CharCode = 16,
    DoNotCare = -2147483648,
    Eudc = 64,
    Fixed = 256,
    FullShape = 4,
    Katakana = 2,
    Native = 1,
    NoConversion = 32,
    Roman = 8,
    Symbol = 128,
  }
  [System.FlagsAttribute]
  public enum ImeSentenceModeValues {
    Automatic = 4,
    Conversation = 16,
    DoNotCare = -2147483648,
    None = 0,
    PhrasePrediction = 8,
    PluralClause = 1,
    SingleConversion = 2,
  }
  public partial class InertiaExpansionBehavior {
    public InertiaExpansionBehavior() { }
    public double DesiredDeceleration { get { return default(double); } set { } }
    public System.Windows.Vector DesiredExpansion { get { return default(System.Windows.Vector); } set { } }
    public double InitialRadius { get { return default(double); } set { } }
    public System.Windows.Vector InitialVelocity { get { return default(System.Windows.Vector); } set { } }
  }
  public partial class InertiaRotationBehavior {
    public InertiaRotationBehavior() { }
    public double DesiredDeceleration { get { return default(double); } set { } }
    public double DesiredRotation { get { return default(double); } set { } }
    public double InitialVelocity { get { return default(double); } set { } }
  }
  public partial class InertiaTranslationBehavior {
    public InertiaTranslationBehavior() { }
    public double DesiredDeceleration { get { return default(double); } set { } }
    public double DesiredDisplacement { get { return default(double); } set { } }
    public System.Windows.Vector InitialVelocity { get { return default(System.Windows.Vector); } set { } }
  }
  public partial class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource {
    public static readonly System.Windows.DependencyProperty CommandParameterProperty;
    public static readonly System.Windows.DependencyProperty CommandProperty;
    public static readonly System.Windows.DependencyProperty CommandTargetProperty;
    protected InputBinding() { }
    [System.Security.SecurityCriticalAttribute]
    public InputBinding(System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture) { }
    [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
    [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(17))]
    public System.Windows.Input.ICommand Command { get { return default(System.Windows.Input.ICommand); } set { } }
    public object CommandParameter { get { return default(object); } set { } }
    public System.Windows.IInputElement CommandTarget { get { return default(System.Windows.IInputElement); } set { } }
    public virtual System.Windows.Input.InputGesture Gesture { get { return default(System.Windows.Input.InputGesture); } [System.Security.SecurityCriticalAttribute]set { } }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
  }
  public sealed partial class InputBindingCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public InputBindingCollection() { }
    public InputBindingCollection(System.Collections.IList inputBindings) { }
    public int Count { get { return default(int); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Input.InputBinding this[int index] { get { return default(System.Windows.Input.InputBinding); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Input.InputBinding inputBinding) { return default(int); }
    public void AddRange(System.Collections.ICollection collection) { }
    public void Clear() { }
    public bool Contains(System.Windows.Input.InputBinding key) { return default(bool); }
    public void CopyTo(System.Windows.Input.InputBinding[] inputBindings, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Input.InputBinding value) { return default(int); }
    public void Insert(int index, System.Windows.Input.InputBinding inputBinding) { }
    public void Remove(System.Windows.Input.InputBinding inputBinding) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object inputBinding) { return default(int); }
    bool System.Collections.IList.Contains(object key) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object inputBinding) { }
  }
  public abstract partial class InputDevice : System.Windows.Threading.DispatcherObject {
    protected InputDevice() { }
    public abstract System.Windows.PresentationSource ActiveSource { get; }
    public abstract System.Windows.IInputElement Target { get; }
  }
  [MS.Internal.PresentationCore.FriendAccessAllowedAttribute]
  public partial class InputEventArgs : System.Windows.RoutedEventArgs {
    public InputEventArgs(System.Windows.Input.InputDevice inputDevice, int timestamp) { }
    public System.Windows.Input.InputDevice Device { get { return default(System.Windows.Input.InputDevice); } }
    public int Timestamp { get { return default(int); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void InputEventHandler(object sender, System.Windows.Input.InputEventArgs e);
  public abstract partial class InputGesture {
    protected InputGesture() { }
    public abstract bool Matches(object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
  }
  public sealed partial class InputGestureCollection : System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public InputGestureCollection() { }
    public InputGestureCollection(System.Collections.IList inputGestures) { }
    public int Count { get { return default(int); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Input.InputGesture this[int index] { get { return default(System.Windows.Input.InputGesture); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Input.InputGesture inputGesture) { return default(int); }
    public void AddRange(System.Collections.ICollection collection) { }
    public void Clear() { }
    public bool Contains(System.Windows.Input.InputGesture key) { return default(bool); }
    public void CopyTo(System.Windows.Input.InputGesture[] inputGestures, int index) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Input.InputGesture value) { return default(int); }
    public void Insert(int index, System.Windows.Input.InputGesture inputGesture) { }
    public void Remove(System.Windows.Input.InputGesture inputGesture) { }
    public void RemoveAt(int index) { }
    public void Seal() { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object inputGesture) { return default(int); }
    bool System.Collections.IList.Contains(object key) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object inputGesture) { }
  }
  public partial class InputLanguageChangedEventArgs : System.Windows.Input.InputLanguageEventArgs {
    public InputLanguageChangedEventArgs(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) : base (default(System.Globalization.CultureInfo), default(System.Globalization.CultureInfo)) { }
  }
  public partial class InputLanguageChangingEventArgs : System.Windows.Input.InputLanguageEventArgs {
    public InputLanguageChangingEventArgs(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) : base (default(System.Globalization.CultureInfo), default(System.Globalization.CultureInfo)) { }
    public bool Rejected { get { return default(bool); } set { } }
  }
  public abstract partial class InputLanguageEventArgs : System.EventArgs {
    protected InputLanguageEventArgs(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) { }
    public virtual System.Globalization.CultureInfo NewLanguage { get { return default(System.Globalization.CultureInfo); } }
    public virtual System.Globalization.CultureInfo PreviousLanguage { get { return default(System.Globalization.CultureInfo); } }
  }
  public delegate void InputLanguageEventHandler(object sender, System.Windows.Input.InputLanguageEventArgs e);
  public sealed partial class InputLanguageManager : System.Windows.Threading.DispatcherObject {
    internal InputLanguageManager() { }
    public static readonly System.Windows.DependencyProperty InputLanguageProperty;
    public static readonly System.Windows.DependencyProperty RestoreInputLanguageProperty;
    public System.Collections.IEnumerable AvailableInputLanguages { get { return default(System.Collections.IEnumerable); } }
    public static System.Windows.Input.InputLanguageManager Current { get { return default(System.Windows.Input.InputLanguageManager); } }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]
    public System.Globalization.CultureInfo CurrentInputLanguage { get { return default(System.Globalization.CultureInfo); } set { } }
    public event System.Windows.Input.InputLanguageEventHandler InputLanguageChanged { add { } remove { } }
    public event System.Windows.Input.InputLanguageEventHandler InputLanguageChanging { add { } remove { } }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Globalization.CultureInfo GetInputLanguage(System.Windows.DependencyObject target) { return default(System.Globalization.CultureInfo); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static bool GetRestoreInputLanguage(System.Windows.DependencyObject target) { return default(bool); }
    public void RegisterInputLanguageSource(System.Windows.Input.IInputLanguageSource inputLanguageSource) { }
    public void ReportInputLanguageChanged(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) { }
    public bool ReportInputLanguageChanging(System.Globalization.CultureInfo newLanguageId, System.Globalization.CultureInfo previousLanguageId) { return default(bool); }
    public static void SetInputLanguage(System.Windows.DependencyObject target, System.Globalization.CultureInfo inputLanguage) { }
    public static void SetRestoreInputLanguage(System.Windows.DependencyObject target, bool restore) { }
  }
  public sealed partial class InputManager : System.Windows.Threading.DispatcherObject {
    internal InputManager() { }
    public static System.Windows.Input.InputManager Current { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.InputManager); } }
    public System.Collections.ICollection InputProviders { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.ICollection); } }
    public bool IsInMenuMode { get { return default(bool); } }
    public System.Windows.Input.InputDevice MostRecentInputDevice { get { return default(System.Windows.Input.InputDevice); } }
    public System.Windows.Input.KeyboardDevice PrimaryKeyboardDevice { get { return default(System.Windows.Input.KeyboardDevice); } }
    public System.Windows.Input.MouseDevice PrimaryMouseDevice { get { return default(System.Windows.Input.MouseDevice); } }
    public event System.EventHandler EnterMenuMode { add { } remove { } }
    public event System.EventHandler HitTestInvalidatedAsync { add { } remove { } }
    public event System.EventHandler LeaveMenuMode { add { } remove { } }
    public event System.Windows.Input.NotifyInputEventHandler PostNotifyInput { add { } remove { } }
    public event System.Windows.Input.ProcessInputEventHandler PostProcessInput { add { } remove { } }
    public event System.Windows.Input.NotifyInputEventHandler PreNotifyInput { add { } remove { } }
    public event System.Windows.Input.PreProcessInputEventHandler PreProcessInput { add { } remove { } }
    public void PopMenuMode(System.Windows.PresentationSource menuSite) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public bool ProcessInput(System.Windows.Input.InputEventArgs input) { return default(bool); }
    public void PushMenuMode(System.Windows.PresentationSource menuSite) { }
  }
  public partial class InputMethod : System.Windows.Threading.DispatcherObject {
    internal InputMethod() { }
    public static readonly System.Windows.DependencyProperty InputScopeProperty;
    public static readonly System.Windows.DependencyProperty IsInputMethodEnabledProperty;
    public static readonly System.Windows.DependencyProperty IsInputMethodSuspendedProperty;
    public static readonly System.Windows.DependencyProperty PreferredImeConversionModeProperty;
    public static readonly System.Windows.DependencyProperty PreferredImeSentenceModeProperty;
    public static readonly System.Windows.DependencyProperty PreferredImeStateProperty;
    public bool CanShowConfigurationUI { get { return default(bool); } }
    public bool CanShowRegisterWordUI { get { return default(bool); } }
    public static System.Windows.Input.InputMethod Current { get { return default(System.Windows.Input.InputMethod); } }
    public System.Windows.Input.InputMethodState HandwritingState { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.InputMethodState); } [System.Security.SecurityCriticalAttribute]set { } }
    public System.Windows.Input.ImeConversionModeValues ImeConversionMode { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.ImeConversionModeValues); } [System.Security.SecurityCriticalAttribute]set { } }
    public System.Windows.Input.ImeSentenceModeValues ImeSentenceMode { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.ImeSentenceModeValues); } [System.Security.SecurityCriticalAttribute]set { } }
    public System.Windows.Input.InputMethodState ImeState { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.InputMethodState); } [System.Security.SecurityCriticalAttribute]set { } }
    public System.Windows.Input.InputMethodState MicrophoneState { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.InputMethodState); } [System.Security.SecurityCriticalAttribute]set { } }
    public System.Windows.Input.SpeechMode SpeechMode { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.SpeechMode); } [System.Security.SecurityCriticalAttribute]set { } }
    public event System.Windows.Input.InputMethodStateChangedEventHandler StateChanged { add { } remove { } }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Windows.Input.InputScope GetInputScope(System.Windows.DependencyObject target) { return default(System.Windows.Input.InputScope); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static bool GetIsInputMethodEnabled(System.Windows.DependencyObject target) { return default(bool); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static bool GetIsInputMethodSuspended(System.Windows.DependencyObject target) { return default(bool); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Windows.Input.ImeConversionModeValues GetPreferredImeConversionMode(System.Windows.DependencyObject target) { return default(System.Windows.Input.ImeConversionModeValues); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Windows.Input.ImeSentenceModeValues GetPreferredImeSentenceMode(System.Windows.DependencyObject target) { return default(System.Windows.Input.ImeSentenceModeValues); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Windows.Input.InputMethodState GetPreferredImeState(System.Windows.DependencyObject target) { return default(System.Windows.Input.InputMethodState); }
    public static void SetInputScope(System.Windows.DependencyObject target, System.Windows.Input.InputScope value) { }
    public static void SetIsInputMethodEnabled(System.Windows.DependencyObject target, bool value) { }
    public static void SetIsInputMethodSuspended(System.Windows.DependencyObject target, bool value) { }
    public static void SetPreferredImeConversionMode(System.Windows.DependencyObject target, System.Windows.Input.ImeConversionModeValues value) { }
    public static void SetPreferredImeSentenceMode(System.Windows.DependencyObject target, System.Windows.Input.ImeSentenceModeValues value) { }
    public static void SetPreferredImeState(System.Windows.DependencyObject target, System.Windows.Input.InputMethodState value) { }
    public void ShowConfigureUI() { }
    public void ShowConfigureUI(System.Windows.UIElement element) { }
    public void ShowRegisterWordUI() { }
    public void ShowRegisterWordUI(string registeredText) { }
    public void ShowRegisterWordUI(System.Windows.UIElement element, string registeredText) { }
  }
  public enum InputMethodState {
    DoNotCare = 2,
    Off = 0,
    On = 1,
  }
  public partial class InputMethodStateChangedEventArgs : System.EventArgs {
    internal InputMethodStateChangedEventArgs() { }
    public bool IsHandwritingStateChanged { get { return default(bool); } }
    public bool IsImeConversionModeChanged { get { return default(bool); } }
    public bool IsImeSentenceModeChanged { get { return default(bool); } }
    public bool IsImeStateChanged { get { return default(bool); } }
    public bool IsMicrophoneStateChanged { get { return default(bool); } }
    public bool IsSpeechModeChanged { get { return default(bool); } }
  }
  public delegate void InputMethodStateChangedEventHandler(object sender, System.Windows.Input.InputMethodStateChangedEventArgs e);
  public enum InputMode {
    Foreground = 0,
    Sink = 1,
  }
  [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.InputScopeConverter, PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
  public partial class InputScope {
    public InputScope() { }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Collections.IList Names { get { return default(System.Collections.IList); } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Collections.IList PhraseList { get { return default(System.Collections.IList); } }
    [System.ComponentModel.DefaultValueAttribute(null)]
    public string RegularExpression { get { return default(string); } set { } }
    [System.ComponentModel.DefaultValueAttribute(null)]
    public string SrgsMarkup { get { return default(string); } set { } }
  }
  public partial class InputScopeConverter : System.ComponentModel.TypeConverter {
    public InputScopeConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.InputScopeNameConverter, PresentationCore, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
  [System.Windows.Markup.ContentPropertyAttribute("NameValue")]
  public partial class InputScopeName : System.Windows.Markup.IAddChild {
    public InputScopeName() { }
    public InputScopeName(System.Windows.Input.InputScopeNameValue nameValue) { }
    public System.Windows.Input.InputScopeNameValue NameValue { get { return default(System.Windows.Input.InputScopeNameValue); } set { } }
    public void AddChild(object value) { }
    public void AddText(string name) { }
  }
  public partial class InputScopeNameConverter : System.ComponentModel.TypeConverter {
    public InputScopeNameConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public enum InputScopeNameValue {
    AddressCity = 17,
    AddressCountryName = 18,
    AddressCountryShortName = 19,
    AddressStateOrProvince = 16,
    AddressStreet = 15,
    AlphanumericFullWidth = 41,
    AlphanumericHalfWidth = 40,
    Bopomofo = 43,
    CurrencyAmount = 21,
    CurrencyAmountAndSymbol = 20,
    CurrencyChinese = 42,
    Date = 22,
    DateDay = 24,
    DateDayName = 27,
    DateMonth = 23,
    DateMonthName = 26,
    DateYear = 25,
    Default = 0,
    Digits = 28,
    EmailSmtpAddress = 5,
    EmailUserName = 4,
    FileName = 3,
    FullFilePath = 2,
    Hanja = 47,
    Hiragana = 44,
    KatakanaFullWidth = 46,
    KatakanaHalfWidth = 45,
    LogOnName = 6,
    Number = 29,
    NumberFullWidth = 39,
    OneChar = 30,
    Password = 31,
    PersonalFullName = 7,
    PersonalGivenName = 9,
    PersonalMiddleName = 10,
    PersonalNamePrefix = 8,
    PersonalNameSuffix = 12,
    PersonalSurname = 11,
    PhraseList = -1,
    PostalAddress = 13,
    PostalCode = 14,
    RegularExpression = -2,
    Srgs = -3,
    TelephoneAreaCode = 34,
    TelephoneCountryCode = 33,
    TelephoneLocalNumber = 35,
    TelephoneNumber = 32,
    Time = 36,
    TimeHour = 37,
    TimeMinorSec = 38,
    Url = 1,
    Xml = -4,
  }
  [System.Windows.Markup.ContentPropertyAttribute("Name")]
  public partial class InputScopePhrase : System.Windows.Markup.IAddChild {
    public InputScopePhrase() { }
    public InputScopePhrase(string name) { }
    public string Name { get { return default(string); } set { } }
    public void AddChild(object value) { }
    public void AddText(string name) { }
  }
  public enum InputType {
    Command = 5,
    Hid = 3,
    Keyboard = 0,
    Mouse = 1,
    Stylus = 2,
    Text = 4,
  }
  public partial class KeyBinding : System.Windows.Input.InputBinding {
    public static readonly System.Windows.DependencyProperty KeyProperty;
    public static readonly System.Windows.DependencyProperty ModifiersProperty;
    public KeyBinding() { }
    public KeyBinding(System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers) { }
    public KeyBinding(System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture) { }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.KeyGestureConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.KeyGestureValueSerializer))]
    public override System.Windows.Input.InputGesture Gesture { get { return default(System.Windows.Input.InputGesture); } set { } }
    public System.Windows.Input.Key Key { get { return default(System.Windows.Input.Key); } set { } }
    public System.Windows.Input.ModifierKeys Modifiers { get { return default(System.Windows.Input.ModifierKeys); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public static partial class Keyboard {
    public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent KeyboardInputProviderAcquireFocusEvent;
    public static readonly System.Windows.RoutedEvent KeyDownEvent;
    public static readonly System.Windows.RoutedEvent KeyUpEvent;
    public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    public static readonly System.Windows.RoutedEvent PreviewKeyboardInputProviderAcquireFocusEvent;
    public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    public static System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode { get { return default(System.Windows.Input.RestoreFocusMode); } set { } }
    public static System.Windows.IInputElement FocusedElement { get { return default(System.Windows.IInputElement); } }
    public static System.Windows.Input.ModifierKeys Modifiers { get { return default(System.Windows.Input.ModifierKeys); } }
    public static System.Windows.Input.KeyboardDevice PrimaryDevice { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.KeyboardDevice); } }
    public static void AddGotKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
    public static void AddKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) { }
    public static void AddKeyDownHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
    public static void AddKeyUpHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
    public static void AddLostKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
    public static void AddPreviewGotKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
    public static void AddPreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) { }
    public static void AddPreviewKeyDownHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
    public static void AddPreviewKeyUpHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
    public static void AddPreviewLostKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
    public static void ClearFocus() { }
    public static System.Windows.IInputElement Focus(System.Windows.IInputElement element) { return default(System.Windows.IInputElement); }
    public static System.Windows.Input.KeyStates GetKeyStates(System.Windows.Input.Key key) { return default(System.Windows.Input.KeyStates); }
    public static bool IsKeyDown(System.Windows.Input.Key key) { return default(bool); }
    public static bool IsKeyToggled(System.Windows.Input.Key key) { return default(bool); }
    public static bool IsKeyUp(System.Windows.Input.Key key) { return default(bool); }
    public static void RemoveGotKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
    public static void RemoveKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) { }
    public static void RemoveKeyDownHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
    public static void RemoveKeyUpHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
    public static void RemoveLostKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
    public static void RemovePreviewGotKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
    public static void RemovePreviewKeyboardInputProviderAcquireFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardInputProviderAcquireFocusEventHandler handler) { }
    public static void RemovePreviewKeyDownHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
    public static void RemovePreviewKeyUpHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyEventHandler handler) { }
    public static void RemovePreviewLostKeyboardFocusHandler(System.Windows.DependencyObject element, System.Windows.Input.KeyboardFocusChangedEventHandler handler) { }
  }
  public abstract partial class KeyboardDevice : System.Windows.Input.InputDevice {
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected KeyboardDevice(System.Windows.Input.InputManager inputManager) { }
    public override System.Windows.PresentationSource ActiveSource { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.PresentationSource); } }
    public System.Windows.Input.RestoreFocusMode DefaultRestoreFocusMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.RestoreFocusMode); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public System.Windows.IInputElement FocusedElement { get { return default(System.Windows.IInputElement); } }
    public System.Windows.Input.ModifierKeys Modifiers { get { return default(System.Windows.Input.ModifierKeys); } }
    public override System.Windows.IInputElement Target { get { return default(System.Windows.IInputElement); } }
    public void ClearFocus() { }
    [System.Security.SecurityCriticalAttribute]
    public System.Windows.IInputElement Focus(System.Windows.IInputElement element) { return default(System.Windows.IInputElement); }
    public System.Windows.Input.KeyStates GetKeyStates(System.Windows.Input.Key key) { return default(System.Windows.Input.KeyStates); }
    protected abstract System.Windows.Input.KeyStates GetKeyStatesFromSystem(System.Windows.Input.Key key);
    public bool IsKeyDown(System.Windows.Input.Key key) { return default(bool); }
    public bool IsKeyToggled(System.Windows.Input.Key key) { return default(bool); }
    public bool IsKeyUp(System.Windows.Input.Key key) { return default(bool); }
  }
  public partial class KeyboardEventArgs : System.Windows.Input.InputEventArgs {
    public KeyboardEventArgs(System.Windows.Input.KeyboardDevice keyboard, int timestamp) : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public System.Windows.Input.KeyboardDevice KeyboardDevice { get { return default(System.Windows.Input.KeyboardDevice); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void KeyboardEventHandler(object sender, System.Windows.Input.KeyboardEventArgs e);
  public partial class KeyboardFocusChangedEventArgs : System.Windows.Input.KeyboardEventArgs {
    public KeyboardFocusChangedEventArgs(System.Windows.Input.KeyboardDevice keyboard, int timestamp, System.Windows.IInputElement oldFocus, System.Windows.IInputElement newFocus) : base (default(System.Windows.Input.KeyboardDevice), default(int)) { }
    public System.Windows.IInputElement NewFocus { get { return default(System.Windows.IInputElement); } }
    public System.Windows.IInputElement OldFocus { get { return default(System.Windows.IInputElement); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void KeyboardFocusChangedEventHandler(object sender, System.Windows.Input.KeyboardFocusChangedEventArgs e);
  public partial class KeyboardInputProviderAcquireFocusEventArgs : System.Windows.Input.KeyboardEventArgs {
    public KeyboardInputProviderAcquireFocusEventArgs(System.Windows.Input.KeyboardDevice keyboard, int timestamp, bool focusAcquired) : base (default(System.Windows.Input.KeyboardDevice), default(int)) { }
    public bool FocusAcquired { get { return default(bool); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void KeyboardInputProviderAcquireFocusEventHandler(object sender, System.Windows.Input.KeyboardInputProviderAcquireFocusEventArgs e);
  public partial class KeyEventArgs : System.Windows.Input.KeyboardEventArgs {
    [System.Security.SecurityCriticalAttribute]
    public KeyEventArgs(System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key) : base (default(System.Windows.Input.KeyboardDevice), default(int)) { }
    public System.Windows.Input.Key DeadCharProcessedKey { get { return default(System.Windows.Input.Key); } }
    public System.Windows.Input.Key ImeProcessedKey { get { return default(System.Windows.Input.Key); } }
    public System.Windows.PresentationSource InputSource { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.PresentationSource); } }
    public bool IsDown { get { return default(bool); } }
    public bool IsRepeat { get { return default(bool); } }
    public bool IsToggled { get { return default(bool); } }
    public bool IsUp { get { return default(bool); } }
    public System.Windows.Input.Key Key { get { return default(System.Windows.Input.Key); } }
    public System.Windows.Input.KeyStates KeyStates { get { return default(System.Windows.Input.KeyStates); } }
    public System.Windows.Input.Key SystemKey { get { return default(System.Windows.Input.Key); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void KeyEventHandler(object sender, System.Windows.Input.KeyEventArgs e);
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.KeyGestureConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.KeyGestureValueSerializer))]
  public partial class KeyGesture : System.Windows.Input.InputGesture {
    public KeyGesture(System.Windows.Input.Key key) { }
    public KeyGesture(System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers) { }
    public KeyGesture(System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString) { }
    public string DisplayString { get { return default(string); } }
    public System.Windows.Input.Key Key { get { return default(System.Windows.Input.Key); } }
    public System.Windows.Input.ModifierKeys Modifiers { get { return default(System.Windows.Input.ModifierKeys); } }
    public string GetDisplayStringForCulture(System.Globalization.CultureInfo culture) { return default(string); }
    public override bool Matches(object targetElement, System.Windows.Input.InputEventArgs inputEventArgs) { return default(bool); }
  }
  public partial class KeyGestureConverter : System.ComponentModel.TypeConverter {
    public KeyGestureConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class KeyGestureValueSerializer : System.Windows.Markup.ValueSerializer {
    public KeyGestureValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  [System.FlagsAttribute]
  public enum KeyStates : byte {
    Down = (byte)1,
    None = (byte)0,
    Toggled = (byte)2,
  }
  public static partial class Manipulation {
    public static void AddManipulator(System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator) { }
    public static void CompleteManipulation(System.Windows.UIElement element) { }
    public static System.Windows.IInputElement GetManipulationContainer(System.Windows.UIElement element) { return default(System.Windows.IInputElement); }
    public static System.Windows.Input.ManipulationModes GetManipulationMode(System.Windows.UIElement element) { return default(System.Windows.Input.ManipulationModes); }
    public static System.Windows.Input.ManipulationPivot GetManipulationPivot(System.Windows.UIElement element) { return default(System.Windows.Input.ManipulationPivot); }
    public static bool IsManipulationActive(System.Windows.UIElement element) { return default(bool); }
    public static void RemoveManipulator(System.Windows.UIElement element, System.Windows.Input.IManipulator manipulator) { }
    public static void SetManipulationContainer(System.Windows.UIElement element, System.Windows.IInputElement container) { }
    public static void SetManipulationMode(System.Windows.UIElement element, System.Windows.Input.ManipulationModes mode) { }
    [System.ComponentModel.BrowsableAttribute(false)]
    public static void SetManipulationParameter(System.Windows.UIElement element, System.Windows.Input.Manipulations.ManipulationParameters2D parameter) { }
    public static void SetManipulationPivot(System.Windows.UIElement element, System.Windows.Input.ManipulationPivot pivot) { }
    public static void StartInertia(System.Windows.UIElement element) { }
  }
  public sealed partial class ManipulationBoundaryFeedbackEventArgs : System.Windows.Input.InputEventArgs {
    internal ManipulationBoundaryFeedbackEventArgs() : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public System.Windows.Input.ManipulationDelta BoundaryFeedback { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.ManipulationDelta); } }
    public System.Windows.IInputElement ManipulationContainer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.IInputElement); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public sealed partial class ManipulationCompletedEventArgs : System.Windows.Input.InputEventArgs {
    internal ManipulationCompletedEventArgs() : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public System.Windows.Input.ManipulationVelocities FinalVelocities { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.ManipulationVelocities); } }
    public bool IsInertial { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public System.Windows.IInputElement ManipulationContainer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.IInputElement); } }
    public System.Windows.Point ManipulationOrigin { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Point); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>); } }
    public System.Windows.Input.ManipulationDelta TotalManipulation { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.ManipulationDelta); } }
    public bool Cancel() { return default(bool); }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public partial class ManipulationDelta {
    public ManipulationDelta(System.Windows.Vector translation, double rotation, System.Windows.Vector scale, System.Windows.Vector expansion) { }
    public System.Windows.Vector Expansion { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Vector); } }
    public double Rotation { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(double); } }
    public System.Windows.Vector Scale { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Vector); } }
    public System.Windows.Vector Translation { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Vector); } }
  }
  public sealed partial class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs {
    internal ManipulationDeltaEventArgs() : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public System.Windows.Input.ManipulationDelta CumulativeManipulation { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.ManipulationDelta); } }
    public System.Windows.Input.ManipulationDelta DeltaManipulation { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.ManipulationDelta); } }
    public bool IsInertial { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } }
    public System.Windows.IInputElement ManipulationContainer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.IInputElement); } }
    public System.Windows.Point ManipulationOrigin { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Point); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>); } }
    public System.Windows.Input.ManipulationVelocities Velocities { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.ManipulationVelocities); } }
    public bool Cancel() { return default(bool); }
    public void Complete() { }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    public void ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta unusedManipulation) { }
    public void StartInertia() { }
  }
  public sealed partial class ManipulationInertiaStartingEventArgs : System.Windows.Input.InputEventArgs {
    internal ManipulationInertiaStartingEventArgs() : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public System.Windows.Input.InertiaExpansionBehavior ExpansionBehavior { get { return default(System.Windows.Input.InertiaExpansionBehavior); } set { } }
    public System.Windows.Input.ManipulationVelocities InitialVelocities { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.ManipulationVelocities); } }
    public System.Windows.IInputElement ManipulationContainer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.IInputElement); } }
    public System.Windows.Point ManipulationOrigin { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Point); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>); } }
    public System.Windows.Input.InertiaRotationBehavior RotationBehavior { get { return default(System.Windows.Input.InertiaRotationBehavior); } set { } }
    public System.Windows.Input.InertiaTranslationBehavior TranslationBehavior { get { return default(System.Windows.Input.InertiaTranslationBehavior); } set { } }
    public bool Cancel() { return default(bool); }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    [System.ComponentModel.BrowsableAttribute(false)]
    public void SetInertiaParameter(System.Windows.Input.Manipulations.InertiaParameters2D parameter) { }
  }
  [System.FlagsAttribute]
  public enum ManipulationModes {
    All = 15,
    None = 0,
    Rotate = 4,
    Scale = 8,
    Translate = 3,
    TranslateX = 1,
    TranslateY = 2,
  }
  public partial class ManipulationPivot {
    public ManipulationPivot() { }
    public ManipulationPivot(System.Windows.Point center, double radius) { }
    public System.Windows.Point Center { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Point); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public double Radius { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(double); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
  }
  public sealed partial class ManipulationStartedEventArgs : System.Windows.Input.InputEventArgs {
    internal ManipulationStartedEventArgs() : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public System.Windows.IInputElement ManipulationContainer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.IInputElement); } }
    public System.Windows.Point ManipulationOrigin { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Point); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>); } }
    public bool Cancel() { return default(bool); }
    public void Complete() { }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public sealed partial class ManipulationStartingEventArgs : System.Windows.Input.InputEventArgs {
    internal ManipulationStartingEventArgs() : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public bool IsSingleTouchEnabled { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public System.Windows.IInputElement ManipulationContainer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.IInputElement); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get { return default(System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>); } }
    public System.Windows.Input.ManipulationModes Mode { get { return default(System.Windows.Input.ManipulationModes); } set { } }
    public System.Windows.Input.ManipulationPivot Pivot { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.ManipulationPivot); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    public bool Cancel() { return default(bool); }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
    [System.ComponentModel.BrowsableAttribute(false)]
    public void SetManipulationParameter(System.Windows.Input.Manipulations.ManipulationParameters2D parameter) { }
  }
  public partial class ManipulationVelocities {
    public ManipulationVelocities(System.Windows.Vector linearVelocity, double angularVelocity, System.Windows.Vector expansionVelocity) { }
    public double AngularVelocity { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(double); } }
    public System.Windows.Vector ExpansionVelocity { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Vector); } }
    public System.Windows.Vector LinearVelocity { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Vector); } }
  }
  public static partial class MediaCommands {
    public static System.Windows.Input.RoutedUICommand BoostBass { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ChannelDown { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ChannelUp { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand DecreaseBass { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand DecreaseMicrophoneVolume { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand DecreaseTreble { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand DecreaseVolume { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand FastForward { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand IncreaseBass { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand IncreaseMicrophoneVolume { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand IncreaseTreble { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand IncreaseVolume { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MuteMicrophoneVolume { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand MuteVolume { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand NextTrack { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Pause { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Play { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand PreviousTrack { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Record { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Rewind { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Select { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Stop { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand ToggleMicrophoneOnOff { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand TogglePlayPause { get { return default(System.Windows.Input.RoutedUICommand); } }
  }
  public static partial class Mouse {
    public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    public static readonly System.Windows.RoutedEvent MouseDownEvent;
    public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    public static readonly System.Windows.RoutedEvent MouseUpEvent;
    public const int MouseWheelDeltaForOneLine = 120;
    public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseDownOutsideCapturedElementEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseUpOutsideCapturedElementEvent;
    public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    public static System.Windows.IInputElement Captured { get { return default(System.Windows.IInputElement); } }
    public static System.Windows.IInputElement DirectlyOver { get { return default(System.Windows.IInputElement); } }
    public static System.Windows.Input.MouseButtonState LeftButton { get { return default(System.Windows.Input.MouseButtonState); } }
    public static System.Windows.Input.MouseButtonState MiddleButton { get { return default(System.Windows.Input.MouseButtonState); } }
    public static System.Windows.Input.Cursor OverrideCursor { get { return default(System.Windows.Input.Cursor); } set { } }
    public static System.Windows.Input.MouseDevice PrimaryDevice { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.MouseDevice); } }
    public static System.Windows.Input.MouseButtonState RightButton { get { return default(System.Windows.Input.MouseButtonState); } }
    public static System.Windows.Input.MouseButtonState XButton1 { get { return default(System.Windows.Input.MouseButtonState); } }
    public static System.Windows.Input.MouseButtonState XButton2 { get { return default(System.Windows.Input.MouseButtonState); } }
    public static void AddGotMouseCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void AddLostMouseCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void AddMouseDownHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void AddMouseEnterHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void AddMouseLeaveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void AddMouseMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void AddMouseUpHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void AddMouseWheelHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler) { }
    public static void AddPreviewMouseDownHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void AddPreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void AddPreviewMouseMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void AddPreviewMouseUpHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void AddPreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void AddPreviewMouseWheelHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler) { }
    public static void AddQueryCursorHandler(System.Windows.DependencyObject element, System.Windows.Input.QueryCursorEventHandler handler) { }
    public static bool Capture(System.Windows.IInputElement element) { return default(bool); }
    public static bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public static int GetIntermediatePoints(System.Windows.IInputElement relativeTo, System.Windows.Point[] points) { return default(int); }
    public static System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { return default(System.Windows.Point); }
    public static void RemoveGotMouseCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void RemoveLostMouseCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void RemoveMouseDownHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void RemoveMouseEnterHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void RemoveMouseLeaveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void RemoveMouseMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void RemoveMouseUpHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void RemoveMouseWheelHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler) { }
    public static void RemovePreviewMouseDownHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void RemovePreviewMouseDownOutsideCapturedElementHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void RemovePreviewMouseMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseEventHandler handler) { }
    public static void RemovePreviewMouseUpHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void RemovePreviewMouseUpOutsideCapturedElementHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseButtonEventHandler handler) { }
    public static void RemovePreviewMouseWheelHandler(System.Windows.DependencyObject element, System.Windows.Input.MouseWheelEventHandler handler) { }
    public static void RemoveQueryCursorHandler(System.Windows.DependencyObject element, System.Windows.Input.QueryCursorEventHandler handler) { }
    public static bool SetCursor(System.Windows.Input.Cursor cursor) { return default(bool); }
    public static void Synchronize() { }
    public static void UpdateCursor() { }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.MouseActionConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.MouseActionValueSerializer))]
  public enum MouseAction : byte {
    LeftClick = (byte)1,
    LeftDoubleClick = (byte)5,
    MiddleClick = (byte)3,
    MiddleDoubleClick = (byte)7,
    None = (byte)0,
    RightClick = (byte)2,
    RightDoubleClick = (byte)6,
    WheelClick = (byte)4,
  }
  public partial class MouseActionConverter : System.ComponentModel.TypeConverter {
    public MouseActionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class MouseActionValueSerializer : System.Windows.Markup.ValueSerializer {
    public MouseActionValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class MouseBinding : System.Windows.Input.InputBinding {
    public static readonly System.Windows.DependencyProperty MouseActionProperty;
    public MouseBinding() { }
    public MouseBinding(System.Windows.Input.ICommand command, System.Windows.Input.MouseGesture gesture) { }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.MouseGestureConverter))]
    [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.MouseGestureValueSerializer))]
    public override System.Windows.Input.InputGesture Gesture { get { return default(System.Windows.Input.InputGesture); } set { } }
    public System.Windows.Input.MouseAction MouseAction { get { return default(System.Windows.Input.MouseAction); } set { } }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
  }
  public enum MouseButton {
    Left = 0,
    Middle = 1,
    Right = 2,
    XButton1 = 3,
    XButton2 = 4,
  }
  public partial class MouseButtonEventArgs : System.Windows.Input.MouseEventArgs {
    public MouseButtonEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, System.Windows.Input.MouseButton button) : base (default(System.Windows.Input.MouseDevice), default(int)) { }
    public MouseButtonEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, System.Windows.Input.MouseButton button, System.Windows.Input.StylusDevice stylusDevice) : base (default(System.Windows.Input.MouseDevice), default(int)) { }
    public System.Windows.Input.MouseButtonState ButtonState { get { return default(System.Windows.Input.MouseButtonState); } }
    public System.Windows.Input.MouseButton ChangedButton { get { return default(System.Windows.Input.MouseButton); } }
    public int ClickCount { get { return default(int); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void MouseButtonEventHandler(object sender, System.Windows.Input.MouseButtonEventArgs e);
  public enum MouseButtonState {
    Pressed = 1,
    Released = 0,
  }
  public abstract partial class MouseDevice : System.Windows.Input.InputDevice {
    internal MouseDevice() { }
    public override System.Windows.PresentationSource ActiveSource { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.PresentationSource); } }
    public System.Windows.IInputElement Captured { get { return default(System.Windows.IInputElement); } }
    public System.Windows.IInputElement DirectlyOver { get { return default(System.Windows.IInputElement); } }
    public System.Windows.Input.MouseButtonState LeftButton { get { return default(System.Windows.Input.MouseButtonState); } }
    public System.Windows.Input.MouseButtonState MiddleButton { get { return default(System.Windows.Input.MouseButtonState); } }
    public System.Windows.Input.Cursor OverrideCursor { get { return default(System.Windows.Input.Cursor); } set { } }
    public System.Windows.Input.MouseButtonState RightButton { get { return default(System.Windows.Input.MouseButtonState); } }
    public override System.Windows.IInputElement Target { get { return default(System.Windows.IInputElement); } }
    public System.Windows.Input.MouseButtonState XButton1 { get { return default(System.Windows.Input.MouseButtonState); } }
    public System.Windows.Input.MouseButtonState XButton2 { get { return default(System.Windows.Input.MouseButtonState); } }
    public bool Capture(System.Windows.IInputElement element) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { return default(bool); }
    protected System.Windows.Input.MouseButtonState GetButtonState(System.Windows.Input.MouseButton mouseButton) { return default(System.Windows.Input.MouseButtonState); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected System.Windows.Point GetClientPosition() { return default(System.Windows.Point); }
    protected System.Windows.Point GetClientPosition(System.Windows.PresentationSource presentationSource) { return default(System.Windows.Point); }
    [System.Security.SecurityCriticalAttribute]
    public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { return default(System.Windows.Point); }
    protected System.Windows.Point GetScreenPosition() { return default(System.Windows.Point); }
    [System.Security.SecurityCriticalAttribute]
    public bool SetCursor(System.Windows.Input.Cursor cursor) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public void Synchronize() { }
    public void UpdateCursor() { }
  }
  public partial class MouseEventArgs : System.Windows.Input.InputEventArgs {
    public MouseEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp) : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public MouseEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, System.Windows.Input.StylusDevice stylusDevice) : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public System.Windows.Input.MouseButtonState LeftButton { get { return default(System.Windows.Input.MouseButtonState); } }
    public System.Windows.Input.MouseButtonState MiddleButton { get { return default(System.Windows.Input.MouseButtonState); } }
    public System.Windows.Input.MouseDevice MouseDevice { get { return default(System.Windows.Input.MouseDevice); } }
    public System.Windows.Input.MouseButtonState RightButton { get { return default(System.Windows.Input.MouseButtonState); } }
    public System.Windows.Input.StylusDevice StylusDevice { get { return default(System.Windows.Input.StylusDevice); } }
    public System.Windows.Input.MouseButtonState XButton1 { get { return default(System.Windows.Input.MouseButtonState); } }
    public System.Windows.Input.MouseButtonState XButton2 { get { return default(System.Windows.Input.MouseButtonState); } }
    public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { return default(System.Windows.Point); }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void MouseEventHandler(object sender, System.Windows.Input.MouseEventArgs e);
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Input.MouseGestureConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Input.MouseGestureValueSerializer))]
  public partial class MouseGesture : System.Windows.Input.InputGesture {
    public MouseGesture() { }
    public MouseGesture(System.Windows.Input.MouseAction mouseAction) { }
    public MouseGesture(System.Windows.Input.MouseAction mouseAction, System.Windows.Input.ModifierKeys modifiers) { }
    public System.Windows.Input.ModifierKeys Modifiers { get { return default(System.Windows.Input.ModifierKeys); } set { } }
    public System.Windows.Input.MouseAction MouseAction { get { return default(System.Windows.Input.MouseAction); } set { } }
    public override bool Matches(object targetElement, System.Windows.Input.InputEventArgs inputEventArgs) { return default(bool); }
  }
  public partial class MouseGestureConverter : System.ComponentModel.TypeConverter {
    public MouseGestureConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class MouseGestureValueSerializer : System.Windows.Markup.ValueSerializer {
    public MouseGestureValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class MouseWheelEventArgs : System.Windows.Input.MouseEventArgs {
    public MouseWheelEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, int delta) : base (default(System.Windows.Input.MouseDevice), default(int)) { }
    public int Delta { get { return default(int); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void MouseWheelEventHandler(object sender, System.Windows.Input.MouseWheelEventArgs e);
  public static partial class NavigationCommands {
    public static System.Windows.Input.RoutedUICommand BrowseBack { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand BrowseForward { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand BrowseHome { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand BrowseStop { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand DecreaseZoom { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Favorites { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand FirstPage { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand GoToPage { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand IncreaseZoom { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand LastPage { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand NavigateJournal { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand NextPage { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand PreviousPage { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Refresh { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Search { get { return default(System.Windows.Input.RoutedUICommand); } }
    public static System.Windows.Input.RoutedUICommand Zoom { get { return default(System.Windows.Input.RoutedUICommand); } }
  }
  public partial class NotifyInputEventArgs : System.EventArgs {
    internal NotifyInputEventArgs() { }
    public System.Windows.Input.InputManager InputManager { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.InputManager); } }
    public System.Windows.Input.StagingAreaInputItem StagingItem { get { return default(System.Windows.Input.StagingAreaInputItem); } }
  }
  public delegate void NotifyInputEventHandler(object sender, System.Windows.Input.NotifyInputEventArgs e);
  public sealed partial class PreProcessInputEventArgs : System.Windows.Input.ProcessInputEventArgs {
    internal PreProcessInputEventArgs() { }
    public bool Canceled { get { return default(bool); } }
    public void Cancel() { }
  }
  public delegate void PreProcessInputEventHandler(object sender, System.Windows.Input.PreProcessInputEventArgs e);
  public partial class ProcessInputEventArgs : System.Windows.Input.NotifyInputEventArgs {
    internal ProcessInputEventArgs() { }
    [System.Security.SecurityCriticalAttribute]
    public System.Windows.Input.StagingAreaInputItem PeekInput() { return default(System.Windows.Input.StagingAreaInputItem); }
    [System.Security.SecurityCriticalAttribute]
    public System.Windows.Input.StagingAreaInputItem PopInput() { return default(System.Windows.Input.StagingAreaInputItem); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public System.Windows.Input.StagingAreaInputItem PushInput(System.Windows.Input.InputEventArgs input, System.Windows.Input.StagingAreaInputItem promote) { return default(System.Windows.Input.StagingAreaInputItem); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public System.Windows.Input.StagingAreaInputItem PushInput(System.Windows.Input.StagingAreaInputItem input) { return default(System.Windows.Input.StagingAreaInputItem); }
  }
  public delegate void ProcessInputEventHandler(object sender, System.Windows.Input.ProcessInputEventArgs e);
  public partial class QueryCursorEventArgs : System.Windows.Input.MouseEventArgs {
    public QueryCursorEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp) : base (default(System.Windows.Input.MouseDevice), default(int)) { }
    public QueryCursorEventArgs(System.Windows.Input.MouseDevice mouse, int timestamp, System.Windows.Input.StylusDevice stylusDevice) : base (default(System.Windows.Input.MouseDevice), default(int)) { }
    public System.Windows.Input.Cursor Cursor { get { return default(System.Windows.Input.Cursor); } set { } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void QueryCursorEventHandler(object sender, System.Windows.Input.QueryCursorEventArgs e);
  public enum RestoreFocusMode {
    Auto = 0,
    None = 1,
  }
  [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
  [System.Windows.Markup.ValueSerializerAttribute("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
  public partial class RoutedCommand : System.Windows.Input.ICommand {
    public RoutedCommand() { }
    public RoutedCommand(string name, System.Type ownerType) { }
    public RoutedCommand(string name, System.Type ownerType, System.Windows.Input.InputGestureCollection inputGestures) { }
    public System.Windows.Input.InputGestureCollection InputGestures { get { return default(System.Windows.Input.InputGestureCollection); } }
    public string Name { get { return default(string); } }
    public System.Type OwnerType { get { return default(System.Type); } }
    public event System.EventHandler CanExecuteChanged { add { } remove { } }
    [System.Security.SecurityCriticalAttribute]
    public bool CanExecute(object parameter, System.Windows.IInputElement target) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public void Execute(object parameter, System.Windows.IInputElement target) { }
    [System.Security.SecurityCriticalAttribute]
    bool System.Windows.Input.ICommand.CanExecute(object parameter) { return default(bool); }
    void System.Windows.Input.ICommand.Execute(object parameter) { }
  }
  [System.ComponentModel.TypeConverterAttribute("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]
  public partial class RoutedUICommand : System.Windows.Input.RoutedCommand {
    public RoutedUICommand() { }
    public RoutedUICommand(string text, string name, System.Type ownerType) { }
    public RoutedUICommand(string text, string name, System.Type ownerType, System.Windows.Input.InputGestureCollection inputGestures) { }
    public string Text { get { return default(string); } set { } }
  }
  public enum SpeechMode {
    Command = 1,
    Dictation = 0,
    Indeterminate = 2,
  }
  public partial class StagingAreaInputItem {
    internal StagingAreaInputItem() { }
    public System.Windows.Input.InputEventArgs Input { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.InputEventArgs); } }
    public object GetData(object key) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public void SetData(object key, object value) { }
  }
  public static partial class Stylus {
    public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    public static readonly System.Windows.DependencyProperty IsFlicksEnabledProperty;
    public static readonly System.Windows.DependencyProperty IsPressAndHoldEnabledProperty;
    public static readonly System.Windows.DependencyProperty IsTapFeedbackEnabledProperty;
    public static readonly System.Windows.DependencyProperty IsTouchFeedbackEnabledProperty;
    public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    public static readonly System.Windows.RoutedEvent StylusDownEvent;
    public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    public static readonly System.Windows.RoutedEvent StylusUpEvent;
    public static System.Windows.IInputElement Captured { get { return default(System.Windows.IInputElement); } }
    public static System.Windows.Input.StylusDevice CurrentStylusDevice { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.StylusDevice); } }
    public static System.Windows.IInputElement DirectlyOver { get { return default(System.Windows.IInputElement); } }
    public static void AddGotStylusCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddLostStylusCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddPreviewStylusButtonDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
    public static void AddPreviewStylusButtonUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
    public static void AddPreviewStylusDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusDownEventHandler handler) { }
    public static void AddPreviewStylusInAirMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddPreviewStylusInRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddPreviewStylusMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddPreviewStylusOutOfRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddPreviewStylusSystemGestureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusSystemGestureEventHandler handler) { }
    public static void AddPreviewStylusUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddStylusButtonDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
    public static void AddStylusButtonUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
    public static void AddStylusDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusDownEventHandler handler) { }
    public static void AddStylusEnterHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddStylusInAirMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddStylusInRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddStylusLeaveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddStylusMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddStylusOutOfRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void AddStylusSystemGestureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusSystemGestureEventHandler handler) { }
    public static void AddStylusUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static bool Capture(System.Windows.IInputElement element) { return default(bool); }
    public static bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { return default(bool); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static bool GetIsFlicksEnabled(System.Windows.DependencyObject element) { return default(bool); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static bool GetIsPressAndHoldEnabled(System.Windows.DependencyObject element) { return default(bool); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static bool GetIsTapFeedbackEnabled(System.Windows.DependencyObject element) { return default(bool); }
    public static bool GetIsTouchFeedbackEnabled(System.Windows.DependencyObject element) { return default(bool); }
    public static void RemoveGotStylusCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemoveLostStylusCaptureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemovePreviewStylusButtonDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
    public static void RemovePreviewStylusButtonUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
    public static void RemovePreviewStylusDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusDownEventHandler handler) { }
    public static void RemovePreviewStylusInAirMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemovePreviewStylusInRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemovePreviewStylusMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemovePreviewStylusOutOfRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemovePreviewStylusSystemGestureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusSystemGestureEventHandler handler) { }
    public static void RemovePreviewStylusUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemoveStylusButtonDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
    public static void RemoveStylusButtonUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusButtonEventHandler handler) { }
    public static void RemoveStylusDownHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusDownEventHandler handler) { }
    public static void RemoveStylusEnterHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemoveStylusInAirMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemoveStylusInRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemoveStylusLeaveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemoveStylusMoveHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemoveStylusOutOfRangeHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void RemoveStylusSystemGestureHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusSystemGestureEventHandler handler) { }
    public static void RemoveStylusUpHandler(System.Windows.DependencyObject element, System.Windows.Input.StylusEventHandler handler) { }
    public static void SetIsFlicksEnabled(System.Windows.DependencyObject element, bool enabled) { }
    public static void SetIsPressAndHoldEnabled(System.Windows.DependencyObject element, bool enabled) { }
    public static void SetIsTapFeedbackEnabled(System.Windows.DependencyObject element, bool enabled) { }
    public static void SetIsTouchFeedbackEnabled(System.Windows.DependencyObject element, bool enabled) { }
    public static void Synchronize() { }
  }
  public partial class StylusButton {
    internal StylusButton() { }
    public System.Guid Guid { get { return default(System.Guid); } }
    public string Name { get { return default(string); } }
    public System.Windows.Input.StylusButtonState StylusButtonState { get { return default(System.Windows.Input.StylusButtonState); } }
    public System.Windows.Input.StylusDevice StylusDevice { get { return default(System.Windows.Input.StylusDevice); } }
    public override string ToString() { return default(string); }
  }
  public partial class StylusButtonCollection : System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusButton> {
    internal StylusButtonCollection() : base (default(System.Collections.Generic.IList<System.Windows.Input.StylusButton>)) { }
    public System.Windows.Input.StylusButton GetStylusButtonByGuid(System.Guid guid) { return default(System.Windows.Input.StylusButton); }
  }
  public partial class StylusButtonEventArgs : System.Windows.Input.StylusEventArgs {
    public StylusButtonEventArgs(System.Windows.Input.StylusDevice stylusDevice, int timestamp, System.Windows.Input.StylusButton button) : base (default(System.Windows.Input.StylusDevice), default(int)) { }
    public System.Windows.Input.StylusButton StylusButton { get { return default(System.Windows.Input.StylusButton); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void StylusButtonEventHandler(object sender, System.Windows.Input.StylusButtonEventArgs e);
  public enum StylusButtonState {
    Down = 1,
    Up = 0,
  }
  public sealed partial class StylusDevice : System.Windows.Input.InputDevice {
    internal StylusDevice() { }
    public override System.Windows.PresentationSource ActiveSource { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.PresentationSource); } }
    public System.Windows.IInputElement Captured { get { return default(System.Windows.IInputElement); } }
    public System.Windows.IInputElement DirectlyOver { get { return default(System.Windows.IInputElement); } }
    public int Id { get { return default(int); } }
    public bool InAir { get { return default(bool); } }
    public bool InRange { get { return default(bool); } }
    public bool Inverted { get { return default(bool); } }
    public bool IsValid { get { return default(bool); } }
    public string Name { get { return default(string); } }
    public System.Windows.Input.StylusButtonCollection StylusButtons { get { return default(System.Windows.Input.StylusButtonCollection); } }
    public System.Windows.Input.TabletDevice TabletDevice { get { return default(System.Windows.Input.TabletDevice); } }
    public override System.Windows.IInputElement Target { get { return default(System.Windows.IInputElement); } }
    public bool Capture(System.Windows.IInputElement element) { return default(bool); }
    public bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { return default(System.Windows.Point); }
    public System.Windows.Input.StylusPointCollection GetStylusPoints(System.Windows.IInputElement relativeTo) { return default(System.Windows.Input.StylusPointCollection); }
    public System.Windows.Input.StylusPointCollection GetStylusPoints(System.Windows.IInputElement relativeTo, System.Windows.Input.StylusPointDescription subsetToReformatTo) { return default(System.Windows.Input.StylusPointCollection); }
    [System.Security.SecurityCriticalAttribute]
    public void Synchronize() { }
    public override string ToString() { return default(string); }
  }
  public partial class StylusDeviceCollection : System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusDevice> {
    internal StylusDeviceCollection() : base (default(System.Collections.Generic.IList<System.Windows.Input.StylusDevice>)) { }
  }
  public partial class StylusDownEventArgs : System.Windows.Input.StylusEventArgs {
    public StylusDownEventArgs(System.Windows.Input.StylusDevice stylusDevice, int timestamp) : base (default(System.Windows.Input.StylusDevice), default(int)) { }
    public int TapCount { get { return default(int); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void StylusDownEventHandler(object sender, System.Windows.Input.StylusDownEventArgs e);
  public partial class StylusEventArgs : System.Windows.Input.InputEventArgs {
    public StylusEventArgs(System.Windows.Input.StylusDevice stylus, int timestamp) : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public bool InAir { get { return default(bool); } }
    public bool Inverted { get { return default(bool); } }
    public System.Windows.Input.StylusDevice StylusDevice { get { return default(System.Windows.Input.StylusDevice); } }
    public System.Windows.Point GetPosition(System.Windows.IInputElement relativeTo) { return default(System.Windows.Point); }
    public System.Windows.Input.StylusPointCollection GetStylusPoints(System.Windows.IInputElement relativeTo) { return default(System.Windows.Input.StylusPointCollection); }
    public System.Windows.Input.StylusPointCollection GetStylusPoints(System.Windows.IInputElement relativeTo, System.Windows.Input.StylusPointDescription subsetToReformatTo) { return default(System.Windows.Input.StylusPointCollection); }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void StylusEventHandler(object sender, System.Windows.Input.StylusEventArgs e);
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct StylusPoint : System.IEquatable<System.Windows.Input.StylusPoint> {
    public static readonly double MaxXY;
    public static readonly double MinXY;
    public StylusPoint(double x, double y) { throw new System.NotImplementedException(); }
    public StylusPoint(double x, double y, float pressureFactor) { throw new System.NotImplementedException(); }
    public StylusPoint(double x, double y, float pressureFactor, System.Windows.Input.StylusPointDescription stylusPointDescription, System.Int32[] additionalValues) { throw new System.NotImplementedException(); }
    public System.Windows.Input.StylusPointDescription Description { get { return default(System.Windows.Input.StylusPointDescription); } }
    public float PressureFactor { get { return default(float); } set { } }
    public double X { get { return default(double); } set { } }
    public double Y { get { return default(double); } set { } }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Input.StylusPoint value) { return default(bool); }
    public static bool Equals(System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public int GetPropertyValue(System.Windows.Input.StylusPointProperty stylusPointProperty) { return default(int); }
    public bool HasProperty(System.Windows.Input.StylusPointProperty stylusPointProperty) { return default(bool); }
    public static bool operator ==(System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2) { return default(bool); }
    public static explicit operator System.Windows.Point (System.Windows.Input.StylusPoint stylusPoint) { return default(System.Windows.Point); }
    public static bool operator !=(System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2) { return default(bool); }
    public void SetPropertyValue(System.Windows.Input.StylusPointProperty stylusPointProperty, int value) { }
    public System.Windows.Point ToPoint() { return default(System.Windows.Point); }
  }
  public partial class StylusPointCollection : System.Collections.ObjectModel.Collection<System.Windows.Input.StylusPoint> {
    public StylusPointCollection() { }
    public StylusPointCollection(System.Collections.Generic.IEnumerable<System.Windows.Input.StylusPoint> stylusPoints) { }
    public StylusPointCollection(System.Collections.Generic.IEnumerable<System.Windows.Point> points) { }
    public StylusPointCollection(int initialCapacity) { }
    public StylusPointCollection(System.Windows.Input.StylusPointDescription stylusPointDescription) { }
    public StylusPointCollection(System.Windows.Input.StylusPointDescription stylusPointDescription, int initialCapacity) { }
    public System.Windows.Input.StylusPointDescription Description { get { return default(System.Windows.Input.StylusPointDescription); } }
    public event System.EventHandler Changed { add { } remove { } }
    public void Add(System.Windows.Input.StylusPointCollection stylusPoints) { }
    protected sealed override void ClearItems() { }
    public System.Windows.Input.StylusPointCollection Clone() { return default(System.Windows.Input.StylusPointCollection); }
    protected sealed override void InsertItem(int index, System.Windows.Input.StylusPoint stylusPoint) { }
    protected virtual void OnChanged(System.EventArgs e) { }
    public static explicit operator System.Windows.Point[] (System.Windows.Input.StylusPointCollection stylusPoints) { return default(System.Windows.Point[]); }
    public System.Windows.Input.StylusPointCollection Reformat(System.Windows.Input.StylusPointDescription subsetToReformatTo) { return default(System.Windows.Input.StylusPointCollection); }
    protected sealed override void RemoveItem(int index) { }
    protected sealed override void SetItem(int index, System.Windows.Input.StylusPoint stylusPoint) { }
    public System.Int32[] ToHiMetricArray() { return default(System.Int32[]); }
  }
  public partial class StylusPointDescription {
    public StylusPointDescription() { }
    public StylusPointDescription(System.Collections.Generic.IEnumerable<System.Windows.Input.StylusPointPropertyInfo> stylusPointPropertyInfos) { }
    public int PropertyCount { get { return default(int); } }
    public static bool AreCompatible(System.Windows.Input.StylusPointDescription stylusPointDescription1, System.Windows.Input.StylusPointDescription stylusPointDescription2) { return default(bool); }
    public static System.Windows.Input.StylusPointDescription GetCommonDescription(System.Windows.Input.StylusPointDescription stylusPointDescription, System.Windows.Input.StylusPointDescription stylusPointDescriptionPreserveInfo) { return default(System.Windows.Input.StylusPointDescription); }
    public System.Windows.Input.StylusPointPropertyInfo GetPropertyInfo(System.Windows.Input.StylusPointProperty stylusPointProperty) { return default(System.Windows.Input.StylusPointPropertyInfo); }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusPointPropertyInfo> GetStylusPointProperties() { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusPointPropertyInfo>); }
    public bool HasProperty(System.Windows.Input.StylusPointProperty stylusPointProperty) { return default(bool); }
    public bool IsSubsetOf(System.Windows.Input.StylusPointDescription stylusPointDescriptionSuperset) { return default(bool); }
  }
  public static partial class StylusPointProperties {
    public static readonly System.Windows.Input.StylusPointProperty AltitudeOrientation;
    public static readonly System.Windows.Input.StylusPointProperty AzimuthOrientation;
    public static readonly System.Windows.Input.StylusPointProperty BarrelButton;
    public static readonly System.Windows.Input.StylusPointProperty ButtonPressure;
    public static readonly System.Windows.Input.StylusPointProperty Height;
    public static readonly System.Windows.Input.StylusPointProperty NormalPressure;
    public static readonly System.Windows.Input.StylusPointProperty PacketStatus;
    public static readonly System.Windows.Input.StylusPointProperty PitchRotation;
    public static readonly System.Windows.Input.StylusPointProperty RollRotation;
    public static readonly System.Windows.Input.StylusPointProperty SecondaryTipButton;
    public static readonly System.Windows.Input.StylusPointProperty SerialNumber;
    public static readonly System.Windows.Input.StylusPointProperty SystemTouch;
    public static readonly System.Windows.Input.StylusPointProperty TangentPressure;
    public static readonly System.Windows.Input.StylusPointProperty TipButton;
    public static readonly System.Windows.Input.StylusPointProperty TwistOrientation;
    public static readonly System.Windows.Input.StylusPointProperty Width;
    public static readonly System.Windows.Input.StylusPointProperty X;
    public static readonly System.Windows.Input.StylusPointProperty XTiltOrientation;
    public static readonly System.Windows.Input.StylusPointProperty Y;
    public static readonly System.Windows.Input.StylusPointProperty YawRotation;
    public static readonly System.Windows.Input.StylusPointProperty YTiltOrientation;
    public static readonly System.Windows.Input.StylusPointProperty Z;
  }
  public partial class StylusPointProperty {
    public StylusPointProperty(System.Guid identifier, bool isButton) { }
    protected StylusPointProperty(System.Windows.Input.StylusPointProperty stylusPointProperty) { }
    public System.Guid Id { get { return default(System.Guid); } }
    public bool IsButton { get { return default(bool); } }
    public override string ToString() { return default(string); }
  }
  public partial class StylusPointPropertyInfo : System.Windows.Input.StylusPointProperty {
    public StylusPointPropertyInfo(System.Windows.Input.StylusPointProperty stylusPointProperty) : base (default(System.Guid), default(bool)) { }
    public StylusPointPropertyInfo(System.Windows.Input.StylusPointProperty stylusPointProperty, int minimum, int maximum, System.Windows.Input.StylusPointPropertyUnit unit, float resolution) : base (default(System.Guid), default(bool)) { }
    public int Maximum { get { return default(int); } }
    public int Minimum { get { return default(int); } }
    public float Resolution { get { return default(float); } }
    public System.Windows.Input.StylusPointPropertyUnit Unit { get { return default(System.Windows.Input.StylusPointPropertyUnit); } }
  }
  public enum StylusPointPropertyUnit {
    Centimeters = 2,
    Degrees = 3,
    Grams = 7,
    Inches = 1,
    None = 0,
    Pounds = 6,
    Radians = 4,
    Seconds = 5,
  }
  public partial class StylusSystemGestureEventArgs : System.Windows.Input.StylusEventArgs {
    public StylusSystemGestureEventArgs(System.Windows.Input.StylusDevice stylusDevice, int timestamp, System.Windows.Input.SystemGesture systemGesture) : base (default(System.Windows.Input.StylusDevice), default(int)) { }
    public System.Windows.Input.SystemGesture SystemGesture { get { return default(System.Windows.Input.SystemGesture); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void StylusSystemGestureEventHandler(object sender, System.Windows.Input.StylusSystemGestureEventArgs e);
  public enum SystemGesture {
    Drag = 19,
    Flick = 31,
    HoldEnter = 21,
    HoldLeave = 22,
    HoverEnter = 23,
    HoverLeave = 24,
    None = 0,
    RightDrag = 20,
    RightTap = 18,
    Tap = 16,
    TwoFingerTap = 4352,
  }
  public static partial class Tablet {
    public static System.Windows.Input.TabletDevice CurrentTabletDevice { get { return default(System.Windows.Input.TabletDevice); } }
    public static System.Windows.Input.TabletDeviceCollection TabletDevices { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Input.TabletDeviceCollection); } }
  }
  public sealed partial class TabletDevice : System.Windows.Input.InputDevice {
    internal TabletDevice() { }
    public override System.Windows.PresentationSource ActiveSource { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.PresentationSource); } }
    public int Id { get { return default(int); } }
    public string Name { get { return default(string); } }
    public string ProductId { get { return default(string); } }
    public System.Windows.Input.StylusDeviceCollection StylusDevices { get { return default(System.Windows.Input.StylusDeviceCollection); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusPointProperty> SupportedStylusPointProperties { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Input.StylusPointProperty>); } }
    public System.Windows.Input.TabletHardwareCapabilities TabletHardwareCapabilities { get { return default(System.Windows.Input.TabletHardwareCapabilities); } }
    public override System.Windows.IInputElement Target { get { return default(System.Windows.IInputElement); } }
    public System.Windows.Input.TabletDeviceType Type { get { return default(System.Windows.Input.TabletDeviceType); } }
    public override string ToString() { return default(string); }
  }
  public partial class TabletDeviceCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    internal TabletDeviceCollection() { }
    public int Count { get { return default(int); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Input.TabletDevice this[int index] { get { return default(System.Windows.Input.TabletDevice); } }
    public object SyncRoot { get { return default(object); } }
    public void CopyTo(System.Windows.Input.TabletDevice[] array, int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public enum TabletDeviceType {
    Stylus = 0,
    Touch = 1,
  }
  [System.FlagsAttribute]
  public enum TabletHardwareCapabilities {
    HardProximity = 4,
    Integrated = 1,
    None = 0,
    StylusHasPhysicalIds = 8,
    StylusMustTouch = 2,
    SupportsPressure = 1073741824,
  }
  public partial class TextComposition : System.Windows.Threading.DispatcherObject {
    public TextComposition(System.Windows.Input.InputManager inputManager, System.Windows.IInputElement source, string resultText) { }
    [System.Security.SecurityCriticalAttribute]
    public TextComposition(System.Windows.Input.InputManager inputManager, System.Windows.IInputElement source, string resultText, System.Windows.Input.TextCompositionAutoComplete autoComplete) { }
    public System.Windows.Input.TextCompositionAutoComplete AutoComplete { get { return default(System.Windows.Input.TextCompositionAutoComplete); } }
    [System.CLSCompliantAttribute(false)]
    public string CompositionText { get { return default(string); } protected set { } }
    [System.CLSCompliantAttribute(false)]
    public string ControlText { get { return default(string); } protected set { } }
    [System.CLSCompliantAttribute(false)]
    public string SystemCompositionText { get { return default(string); } protected set { } }
    [System.CLSCompliantAttribute(false)]
    public string SystemText { get { return default(string); } protected set { } }
    [System.CLSCompliantAttribute(false)]
    public string Text { get { return default(string); } protected set { } }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public virtual void Complete() { }
  }
  public enum TextCompositionAutoComplete {
    Off = 0,
    On = 1,
  }
  public partial class TextCompositionEventArgs : System.Windows.Input.InputEventArgs {
    public TextCompositionEventArgs(System.Windows.Input.InputDevice inputDevice, System.Windows.Input.TextComposition composition) : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public string ControlText { get { return default(string); } }
    public string SystemText { get { return default(string); } }
    public string Text { get { return default(string); } }
    public System.Windows.Input.TextComposition TextComposition { get { return default(System.Windows.Input.TextComposition); } }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public delegate void TextCompositionEventHandler(object sender, System.Windows.Input.TextCompositionEventArgs e);
  public sealed partial class TextCompositionManager : System.Windows.Threading.DispatcherObject {
    internal TextCompositionManager() { }
    public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    public static readonly System.Windows.RoutedEvent PreviewTextInputStartEvent;
    public static readonly System.Windows.RoutedEvent PreviewTextInputUpdateEvent;
    public static readonly System.Windows.RoutedEvent TextInputEvent;
    public static readonly System.Windows.RoutedEvent TextInputStartEvent;
    public static readonly System.Windows.RoutedEvent TextInputUpdateEvent;
    public static void AddPreviewTextInputHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void AddPreviewTextInputStartHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void AddPreviewTextInputUpdateHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void AddTextInputHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void AddTextInputStartHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void AddTextInputUpdateHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public static bool CompleteComposition(System.Windows.Input.TextComposition composition) { return default(bool); }
    public static void RemovePreviewTextInputHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void RemovePreviewTextInputStartHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void RemovePreviewTextInputUpdateHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void RemoveTextInputHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void RemoveTextInputStartHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    public static void RemoveTextInputUpdateHandler(System.Windows.DependencyObject element, System.Windows.Input.TextCompositionEventHandler handler) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public static bool StartComposition(System.Windows.Input.TextComposition composition) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    public static bool UpdateComposition(System.Windows.Input.TextComposition composition) { return default(bool); }
  }
  public static partial class Touch {
    public static event System.Windows.Input.TouchFrameEventHandler FrameReported { add { } remove { } }
  }
  public enum TouchAction {
    Down = 0,
    Move = 1,
    Up = 2,
  }
  [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Unrestricted=true)]
  public abstract partial class TouchDevice : System.Windows.Input.InputDevice, System.Windows.Input.IManipulator {
    [System.Security.SecurityCriticalAttribute]
    protected TouchDevice(int deviceId) { }
    public sealed override System.Windows.PresentationSource ActiveSource { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.PresentationSource); } }
    public System.Windows.IInputElement Captured { get { return default(System.Windows.IInputElement); } }
    public System.Windows.Input.CaptureMode CaptureMode { get { return default(System.Windows.Input.CaptureMode); } }
    public System.Windows.IInputElement DirectlyOver { get { return default(System.Windows.IInputElement); } }
    public int Id { get { return default(int); } }
    public bool IsActive { get { return default(bool); } }
    int System.Windows.Input.IManipulator.Id { get { return default(int); } }
    public sealed override System.Windows.IInputElement Target { get { return default(System.Windows.IInputElement); } }
    public event System.EventHandler Activated { add { } remove { } }
    public event System.EventHandler Deactivated { add { } remove { } }
    public event System.EventHandler Updated { add { } remove { } }
    protected void Activate() { }
    public bool Capture(System.Windows.IInputElement element) { return default(bool); }
    public bool Capture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { return default(bool); }
    protected void Deactivate() { }
    public abstract System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints(System.Windows.IInputElement relativeTo);
    public abstract System.Windows.Input.TouchPoint GetTouchPoint(System.Windows.IInputElement relativeTo);
    protected virtual void OnCapture(System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    protected virtual void OnManipulationEnded(bool cancel) { }
    protected virtual void OnManipulationStarted() { }
    protected bool ReportDown() { return default(bool); }
    protected bool ReportMove() { return default(bool); }
    protected bool ReportUp() { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    protected void SetActiveSource(System.Windows.PresentationSource activeSource) { }
    [System.Security.SecurityCriticalAttribute]
    public void Synchronize() { }
    System.Windows.Point System.Windows.Input.IManipulator.GetPosition(System.Windows.IInputElement relativeTo) { return default(System.Windows.Point); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    void System.Windows.Input.IManipulator.ManipulationEnded(bool cancel) { }
  }
  public partial class TouchEventArgs : System.Windows.Input.InputEventArgs {
    public TouchEventArgs(System.Windows.Input.TouchDevice touchDevice, int timestamp) : base (default(System.Windows.Input.InputDevice), default(int)) { }
    public System.Windows.Input.TouchDevice TouchDevice { get { return default(System.Windows.Input.TouchDevice); } }
    public System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints(System.Windows.IInputElement relativeTo) { return default(System.Windows.Input.TouchPointCollection); }
    public System.Windows.Input.TouchPoint GetTouchPoint(System.Windows.IInputElement relativeTo) { return default(System.Windows.Input.TouchPoint); }
    protected override void InvokeEventHandler(System.Delegate genericHandler, object genericTarget) { }
  }
  public sealed partial class TouchFrameEventArgs : System.EventArgs {
    internal TouchFrameEventArgs() { }
    public int Timestamp { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } }
    public System.Windows.Input.TouchPoint GetPrimaryTouchPoint(System.Windows.IInputElement relativeTo) { return default(System.Windows.Input.TouchPoint); }
    public System.Windows.Input.TouchPointCollection GetTouchPoints(System.Windows.IInputElement relativeTo) { return default(System.Windows.Input.TouchPointCollection); }
    public void SuspendMousePromotionUntilTouchUp() { }
  }
  public delegate void TouchFrameEventHandler(object sender, System.Windows.Input.TouchFrameEventArgs e);
  public partial class TouchPoint : System.IEquatable<System.Windows.Input.TouchPoint> {
    public TouchPoint(System.Windows.Input.TouchDevice device, System.Windows.Point position, System.Windows.Rect bounds, System.Windows.Input.TouchAction action) { }
    public System.Windows.Input.TouchAction Action { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.TouchAction); } }
    public System.Windows.Rect Bounds { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Rect); } }
    public System.Windows.Point Position { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Point); } }
    public System.Windows.Size Size { get { return default(System.Windows.Size); } }
    public System.Windows.Input.TouchDevice TouchDevice { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Input.TouchDevice); } }
    bool System.IEquatable<System.Windows.Input.TouchPoint>.Equals(System.Windows.Input.TouchPoint other) { return default(bool); }
  }
  public partial class TouchPointCollection : System.Collections.ObjectModel.Collection<System.Windows.Input.TouchPoint> {
    public TouchPointCollection() { }
  }
}
namespace System.Windows.Input.StylusPlugIns {
  public partial class DynamicRenderer : System.Windows.Input.StylusPlugIns.StylusPlugIn {
    public DynamicRenderer() { }
    public System.Windows.Ink.DrawingAttributes DrawingAttributes { get { return default(System.Windows.Ink.DrawingAttributes); } set { } }
    public System.Windows.Media.Visual RootVisual { get { return default(System.Windows.Media.Visual); } }
    protected System.Windows.Threading.Dispatcher GetDispatcher() { return default(System.Windows.Threading.Dispatcher); }
    protected override void OnAdded() { }
    protected virtual void OnDraw(System.Windows.Media.DrawingContext drawingContext, System.Windows.Input.StylusPointCollection stylusPoints, System.Windows.Media.Geometry geometry, System.Windows.Media.Brush fillBrush) { }
    protected virtual void OnDrawingAttributesReplaced() { }
    protected override void OnEnabledChanged() { }
    protected override void OnIsActiveForInputChanged() { }
    protected override void OnRemoved() { }
    protected override void OnStylusDown(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
    protected override void OnStylusDownProcessed(object callbackData, bool targetVerified) { }
    protected override void OnStylusEnter(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput, bool confirmed) { }
    protected override void OnStylusLeave(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput, bool confirmed) { }
    protected override void OnStylusMove(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
    protected override void OnStylusUp(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
    protected override void OnStylusUpProcessed(object callbackData, bool targetVerified) { }
    public virtual void Reset(System.Windows.Input.StylusDevice stylusDevice, System.Windows.Input.StylusPointCollection stylusPoints) { }
  }
  public partial class RawStylusInput {
    internal RawStylusInput() { }
    public int StylusDeviceId { get { return default(int); } }
    public int TabletDeviceId { get { return default(int); } }
    public int Timestamp { get { return default(int); } }
    public System.Windows.Input.StylusPointCollection GetStylusPoints() { return default(System.Windows.Input.StylusPointCollection); }
    public void NotifyWhenProcessed(object callbackData) { }
    [System.Security.SecuritySafeCriticalAttribute]
    public void SetStylusPoints(System.Windows.Input.StylusPointCollection stylusPoints) { }
  }
  public abstract partial class StylusPlugIn {
    protected StylusPlugIn() { }
    public System.Windows.UIElement Element { get { return default(System.Windows.UIElement); } }
    public System.Windows.Rect ElementBounds { get { return default(System.Windows.Rect); } }
    public bool Enabled { get { return default(bool); } set { } }
    public bool IsActiveForInput { get { return default(bool); } }
    protected virtual void OnAdded() { }
    protected virtual void OnEnabledChanged() { }
    protected virtual void OnIsActiveForInputChanged() { }
    protected virtual void OnRemoved() { }
    protected virtual void OnStylusDown(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
    protected virtual void OnStylusDownProcessed(object callbackData, bool targetVerified) { }
    protected virtual void OnStylusEnter(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput, bool confirmed) { }
    protected virtual void OnStylusLeave(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput, bool confirmed) { }
    protected virtual void OnStylusMove(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
    protected virtual void OnStylusMoveProcessed(object callbackData, bool targetVerified) { }
    protected virtual void OnStylusUp(System.Windows.Input.StylusPlugIns.RawStylusInput rawStylusInput) { }
    protected virtual void OnStylusUpProcessed(object callbackData, bool targetVerified) { }
  }
  public sealed partial class StylusPlugInCollection : System.Collections.ObjectModel.Collection<System.Windows.Input.StylusPlugIns.StylusPlugIn> {
    internal StylusPlugInCollection() { }
    protected override void ClearItems() { }
    protected override void InsertItem(int index, System.Windows.Input.StylusPlugIns.StylusPlugIn plugIn) { }
    protected override void RemoveItem(int index) { }
    protected override void SetItem(int index, System.Windows.Input.StylusPlugIns.StylusPlugIn plugIn) { }
  }
}
namespace System.Windows.Interop {
  public static partial class CursorInteropHelper {
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.Input.Cursor Create(System.Runtime.InteropServices.SafeHandle cursorHandle) { return default(System.Windows.Input.Cursor); }
  }
  [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, UnmanagedCode=true)]
  public partial class D3DImage : System.Windows.Media.ImageSource {
    public static readonly System.Windows.DependencyProperty IsFrontBufferAvailableProperty;
    public D3DImage() { }
    [System.Security.SecurityCriticalAttribute]
    public D3DImage(double dpiX, double dpiY) { }
    public sealed override double Height { get { return default(double); } }
    public bool IsFrontBufferAvailable { get { return default(bool); } }
    public sealed override System.Windows.Media.ImageMetadata Metadata { get { return default(System.Windows.Media.ImageMetadata); } }
    public int PixelHeight { get { return default(int); } }
    public int PixelWidth { get { return default(int); } }
    public sealed override double Width { get { return default(double); } }
    public event System.Windows.DependencyPropertyChangedEventHandler IsFrontBufferAvailableChanged { add { } remove { } }
    [System.Security.SecurityCriticalAttribute]
    public void AddDirtyRect(System.Windows.Int32Rect dirtyRect) { }
    public new System.Windows.Interop.D3DImage Clone() { return default(System.Windows.Interop.D3DImage); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Interop.D3DImage CloneCurrentValue() { return default(System.Windows.Interop.D3DImage); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected internal virtual System.Windows.Media.Imaging.BitmapSource CopyBackBuffer() { return default(System.Windows.Media.Imaging.BitmapSource); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    ~D3DImage() { }
    protected sealed override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public void Lock() { }
    public void SetBackBuffer(System.Windows.Interop.D3DResourceType backBufferType, System.IntPtr backBuffer) { }
    [System.Security.SecurityCriticalAttribute]
    public void SetBackBuffer(System.Windows.Interop.D3DResourceType backBufferType, System.IntPtr backBuffer, bool enableSoftwareFallback) { }
    public bool TryLock(System.Windows.Duration timeout) { return default(bool); }
    public void Unlock() { }
  }
  public enum D3DResourceType {
    IDirect3DSurface9 = 0,
  }
  public partial class HwndSource : System.Windows.PresentationSource, System.IDisposable, System.Windows.Interop.IKeyboardInputSink, System.Windows.Interop.IWin32Window {
    [System.Security.SecurityCriticalAttribute]
    public HwndSource(int classStyle, int style, int exStyle, int x, int y, int width, int height, string name, System.IntPtr parent) { }
    [System.Security.SecurityCriticalAttribute]
    public HwndSource(int classStyle, int style, int exStyle, int x, int y, int width, int height, string name, System.IntPtr parent, bool adjustSizingForNonClientArea) { }
    [System.Security.SecurityCriticalAttribute]
    public HwndSource(int classStyle, int style, int exStyle, int x, int y, string name, System.IntPtr parent) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Window=(System.Security.Permissions.UIPermissionWindow)(3))]
    public HwndSource(System.Windows.Interop.HwndSourceParameters parameters) { }
    public bool AcquireHwndFocusInMenuMode { get { return default(bool); } }
    public System.Collections.Generic.IEnumerable<System.Windows.Interop.IKeyboardInputSink> ChildKeyboardInputSinks { [System.Runtime.CompilerServices.IteratorStateMachineAttribute(typeof(System.Windows.Interop.HwndSource.<get_ChildKeyboardInputSinks>d__29))]get { return default(System.Collections.Generic.IEnumerable<System.Windows.Interop.IKeyboardInputSink>); } }
    public new System.Windows.Interop.HwndTarget CompositionTarget { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Interop.HwndTarget); } }
    public static bool DefaultAcquireHwndFocusInMenuMode { get { return default(bool); } set { } }
    public System.IntPtr Handle { [System.Security.SecurityCriticalAttribute]get { return default(System.IntPtr); } }
    public override bool IsDisposed { get { return default(bool); } }
    protected System.Windows.Interop.IKeyboardInputSite KeyboardInputSiteCore { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Interop.IKeyboardInputSite); } [System.Security.SecurityCriticalAttribute]set { } }
    public System.Windows.Input.RestoreFocusMode RestoreFocusMode { get { return default(System.Windows.Input.RestoreFocusMode); } }
    public override System.Windows.Media.Visual RootVisual { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Visual); } [System.Security.SecurityCriticalAttribute]set { } }
    public System.Windows.SizeToContent SizeToContent { get { return default(System.Windows.SizeToContent); } set { } }
    System.Windows.Interop.IKeyboardInputSite System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite { get { return default(System.Windows.Interop.IKeyboardInputSite); } [System.Security.SecurityCriticalAttribute]set { } }
    public bool UsesPerPixelOpacity { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    public event System.Windows.AutoResizedEventHandler AutoResized { add { } remove { } }
    public event System.EventHandler Disposed { add { } remove { } }
    public event System.Windows.HwndDpiChangedEventHandler DpiChanged { add { } remove { } }
    public event System.EventHandler SizeToContentChanged { add { } remove { } }
    [System.Security.SecurityCriticalAttribute]
    public void AddHook(System.Windows.Interop.HwndSourceHook hook) { }
    public System.Runtime.InteropServices.HandleRef CreateHandleRef() { return default(System.Runtime.InteropServices.HandleRef); }
    public void Dispose() { }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.Interop.HwndSource FromHwnd(System.IntPtr hwnd) { return default(System.Windows.Interop.HwndSource); }
    [System.Security.SecurityCriticalAttribute]
    protected override System.Windows.Media.CompositionTarget GetCompositionTargetCore() { return default(System.Windows.Media.CompositionTarget); }
    protected virtual bool HasFocusWithinCore() { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    protected virtual void OnDpiChanged(System.Windows.HwndDpiChangedEventArgs e) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    protected virtual bool OnMnemonicCore(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.Demand, Unrestricted=true)]
    protected System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSinkCore(System.Windows.Interop.IKeyboardInputSink sink) { return default(System.Windows.Interop.IKeyboardInputSite); }
    [System.Security.SecurityCriticalAttribute]
    public void RemoveHook(System.Windows.Interop.HwndSourceHook hook) { }
    bool System.Windows.Interop.IKeyboardInputSink.HasFocusWithin() { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    bool System.Windows.Interop.IKeyboardInputSink.OnMnemonic(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    System.Windows.Interop.IKeyboardInputSite System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink sink) { return default(System.Windows.Interop.IKeyboardInputSite); }
    bool System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest request) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    bool System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    bool System.Windows.Interop.IKeyboardInputSink.TranslateChar(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { return default(bool); }
    protected virtual bool TabIntoCore(System.Windows.Input.TraversalRequest request) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    protected virtual bool TranslateAcceleratorCore(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Unrestricted=true)]
    protected virtual bool TranslateCharCore(ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers) { return default(bool); }
  }
  public delegate System.IntPtr HwndSourceHook(System.IntPtr hwnd, int msg, System.IntPtr wParam, System.IntPtr lParam, ref bool handled);
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct HwndSourceParameters {
    public HwndSourceParameters(string name) { throw new System.NotImplementedException(); }
    public HwndSourceParameters(string name, int width, int height) { throw new System.NotImplementedException(); }
    public bool AcquireHwndFocusInMenuMode { get { return default(bool); } set { } }
    public bool AdjustSizingForNonClientArea { get { return default(bool); } set { } }
    public int ExtendedWindowStyle { get { return default(int); } set { } }
    public bool HasAssignedSize { get { return default(bool); } }
    public int Height { get { return default(int); } set { } }
    public System.Windows.Interop.HwndSourceHook HwndSourceHook { get { return default(System.Windows.Interop.HwndSourceHook); } set { } }
    public System.IntPtr ParentWindow { get { return default(System.IntPtr); } set { } }
    public int PositionX { get { return default(int); } set { } }
    public int PositionY { get { return default(int); } set { } }
    public System.Windows.Input.RestoreFocusMode RestoreFocusMode { get { return default(System.Windows.Input.RestoreFocusMode); } set { } }
    public bool TreatAncestorsAsNonClientArea { get { return default(bool); } set { } }
    public bool TreatAsInputRoot { get { return default(bool); } set { } }
    public bool UsesPerPixelOpacity { get { return default(bool); } set { } }
    public bool UsesPerPixelTransparency { get { return default(bool); } set { } }
    public int Width { get { return default(int); } set { } }
    public int WindowClassStyle { get { return default(int); } set { } }
    public string WindowName { get { return default(string); } set { } }
    public int WindowStyle { get { return default(int); } set { } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.Interop.HwndSourceParameters obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Interop.HwndSourceParameters a, System.Windows.Interop.HwndSourceParameters b) { return default(bool); }
    public static bool operator !=(System.Windows.Interop.HwndSourceParameters a, System.Windows.Interop.HwndSourceParameters b) { return default(bool); }
    public void SetPosition(int x, int y) { }
    public void SetSize(int width, int height) { }
  }
  public partial class HwndTarget : System.Windows.Media.CompositionTarget {
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Window=(System.Security.Permissions.UIPermissionWindow)(3))]
    public HwndTarget(System.IntPtr hwnd) { }
    public System.Windows.Media.Color BackgroundColor { get { return default(System.Windows.Media.Color); } set { } }
    public System.Windows.Interop.RenderMode RenderMode { get { return default(System.Windows.Interop.RenderMode); } [System.Security.SecurityCriticalAttribute]set { } }
    public override System.Windows.Media.Visual RootVisual { [System.Security.SecurityCriticalAttribute]set { } }
    public override System.Windows.Media.Matrix TransformFromDevice { get { return default(System.Windows.Media.Matrix); } }
    public override System.Windows.Media.Matrix TransformToDevice { get { return default(System.Windows.Media.Matrix); } }
    public bool UsesPerPixelOpacity { get { return default(bool); } }
    [System.Security.SecurityCriticalAttribute]
    public override void Dispose() { }
  }
  public static partial class Imaging {
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.Media.Imaging.BitmapSource CreateBitmapSourceFromHBitmap(System.IntPtr bitmap, System.IntPtr palette, System.Windows.Int32Rect sourceRect, System.Windows.Media.Imaging.BitmapSizeOptions sizeOptions) { return default(System.Windows.Media.Imaging.BitmapSource); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.Media.Imaging.BitmapSource CreateBitmapSourceFromHIcon(System.IntPtr icon, System.Windows.Int32Rect sourceRect, System.Windows.Media.Imaging.BitmapSizeOptions sizeOptions) { return default(System.Windows.Media.Imaging.BitmapSource); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.Media.Imaging.BitmapSource CreateBitmapSourceFromMemorySection(System.IntPtr section, int pixelWidth, int pixelHeight, System.Windows.Media.PixelFormat format, int stride, int offset) { return default(System.Windows.Media.Imaging.BitmapSource); }
  }
  public sealed partial class InteropBitmap : System.Windows.Media.Imaging.BitmapSource {
    internal InteropBitmap() { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    public void Invalidate() { }
    [System.Security.SecurityCriticalAttribute]
    public void Invalidate(System.Nullable<System.Windows.Int32Rect> dirtyRect) { }
  }
  public partial interface IWin32Window {
    System.IntPtr Handle { get; }
  }
  public enum RenderMode {
    Default = 0,
    SoftwareOnly = 1,
  }
}
namespace System.Windows.Markup {
  public partial interface IAddChild {
    void AddChild(object value);
    void AddText(string text);
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Markup.XmlLanguageConverter))]
  public partial class XmlLanguage {
    internal XmlLanguage() { }
    public static System.Windows.Markup.XmlLanguage Empty { get { return default(System.Windows.Markup.XmlLanguage); } }
    public string IetfLanguageTag { get { return default(string); } }
    public System.Globalization.CultureInfo GetEquivalentCulture() { return default(System.Globalization.CultureInfo); }
    public static System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) { return default(System.Windows.Markup.XmlLanguage); }
    public System.Globalization.CultureInfo GetSpecificCulture() { return default(System.Globalization.CultureInfo); }
    public override string ToString() { return default(string); }
  }
  public partial class XmlLanguageConverter : System.ComponentModel.TypeConverter {
    public XmlLanguageConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object source) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { return default(object); }
  }
}
namespace System.Windows.Media {
  public enum AlignmentX {
    Center = 1,
    Left = 0,
    Right = 2,
  }
  public enum AlignmentY {
    Bottom = 2,
    Center = 1,
    Top = 0,
  }
  public sealed partial class ArcSegment : System.Windows.Media.PathSegment {
    public static readonly System.Windows.DependencyProperty IsLargeArcProperty;
    public static readonly System.Windows.DependencyProperty PointProperty;
    public static readonly System.Windows.DependencyProperty RotationAngleProperty;
    public static readonly System.Windows.DependencyProperty SizeProperty;
    public static readonly System.Windows.DependencyProperty SweepDirectionProperty;
    public ArcSegment() { }
    public ArcSegment(System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked) { }
    public bool IsLargeArc { get { return default(bool); } set { } }
    public System.Windows.Point Point { get { return default(System.Windows.Point); } set { } }
    public double RotationAngle { get { return default(double); } set { } }
    public System.Windows.Size Size { get { return default(System.Windows.Size); } set { } }
    public System.Windows.Media.SweepDirection SweepDirection { get { return default(System.Windows.Media.SweepDirection); } set { } }
    public new System.Windows.Media.ArcSegment Clone() { return default(System.Windows.Media.ArcSegment); }
    public new System.Windows.Media.ArcSegment CloneCurrentValue() { return default(System.Windows.Media.ArcSegment); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class BezierSegment : System.Windows.Media.PathSegment {
    public static readonly System.Windows.DependencyProperty Point1Property;
    public static readonly System.Windows.DependencyProperty Point2Property;
    public static readonly System.Windows.DependencyProperty Point3Property;
    public BezierSegment() { }
    public BezierSegment(System.Windows.Point point1, System.Windows.Point point2, System.Windows.Point point3, bool isStroked) { }
    public System.Windows.Point Point1 { get { return default(System.Windows.Point); } set { } }
    public System.Windows.Point Point2 { get { return default(System.Windows.Point); } set { } }
    public System.Windows.Point Point3 { get { return default(System.Windows.Point); } set { } }
    public new System.Windows.Media.BezierSegment Clone() { return default(System.Windows.Media.BezierSegment); }
    public new System.Windows.Media.BezierSegment CloneCurrentValue() { return default(System.Windows.Media.BezierSegment); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class BitmapCache : System.Windows.Media.CacheMode {
    public static readonly System.Windows.DependencyProperty EnableClearTypeProperty;
    public static readonly System.Windows.DependencyProperty RenderAtScaleProperty;
    public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;
    public BitmapCache() { }
    public BitmapCache(double renderAtScale) { }
    public bool EnableClearType { get { return default(bool); } set { } }
    public double RenderAtScale { get { return default(double); } set { } }
    public bool SnapsToDevicePixels { get { return default(bool); } set { } }
    public new System.Windows.Media.BitmapCache Clone() { return default(System.Windows.Media.BitmapCache); }
    public new System.Windows.Media.BitmapCache CloneCurrentValue() { return default(System.Windows.Media.BitmapCache); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class BitmapCacheBrush : System.Windows.Media.Brush {
    public static readonly System.Windows.DependencyProperty AutoLayoutContentProperty;
    public static readonly System.Windows.DependencyProperty BitmapCacheProperty;
    public static readonly System.Windows.DependencyProperty TargetProperty;
    public BitmapCacheBrush() { }
    public BitmapCacheBrush(System.Windows.Media.Visual visual) { }
    public bool AutoLayoutContent { get { return default(bool); } set { } }
    public System.Windows.Media.BitmapCache BitmapCache { get { return default(System.Windows.Media.BitmapCache); } set { } }
    public System.Windows.Media.Visual Target { get { return default(System.Windows.Media.Visual); } set { } }
    public new System.Windows.Media.BitmapCacheBrush Clone() { return default(System.Windows.Media.BitmapCacheBrush); }
    public new System.Windows.Media.BitmapCacheBrush CloneCurrentValue() { return default(System.Windows.Media.BitmapCacheBrush); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
  }
  public enum BitmapScalingMode {
    Fant = 2,
    HighQuality = 2,
    Linear = 1,
    LowQuality = 1,
    NearestNeighbor = 3,
    Unspecified = 0,
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.BrushConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.BrushValueSerializer))]
  public abstract partial class Brush : System.Windows.Media.Animation.Animatable, System.IFormattable {
    public static readonly System.Windows.DependencyProperty OpacityProperty;
    public static readonly System.Windows.DependencyProperty RelativeTransformProperty;
    public static readonly System.Windows.DependencyProperty TransformProperty;
    protected Brush() { }
    public double Opacity { get { return default(double); } set { } }
    public System.Windows.Media.Transform RelativeTransform { get { return default(System.Windows.Media.Transform); } set { } }
    public System.Windows.Media.Transform Transform { get { return default(System.Windows.Media.Transform); } set { } }
    public new System.Windows.Media.Brush Clone() { return default(System.Windows.Media.Brush); }
    public new System.Windows.Media.Brush CloneCurrentValue() { return default(System.Windows.Media.Brush); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public sealed partial class BrushConverter : System.ComponentModel.TypeConverter {
    public BrushConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class Brushes {
    internal Brushes() { }
    public static System.Windows.Media.SolidColorBrush AliceBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush AntiqueWhite { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Aqua { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Aquamarine { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Azure { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Beige { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Bisque { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Black { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush BlanchedAlmond { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Blue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush BlueViolet { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Brown { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush BurlyWood { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush CadetBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Chartreuse { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Chocolate { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Coral { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush CornflowerBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Cornsilk { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Crimson { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Cyan { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkCyan { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkGoldenrod { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkGray { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkKhaki { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkMagenta { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkOliveGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkOrange { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkOrchid { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkRed { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkSalmon { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkSeaGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkSlateBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkSlateGray { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkTurquoise { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DarkViolet { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DeepPink { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DeepSkyBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DimGray { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush DodgerBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Firebrick { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush FloralWhite { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush ForestGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Fuchsia { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Gainsboro { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush GhostWhite { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Gold { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Goldenrod { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Gray { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Green { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush GreenYellow { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Honeydew { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush HotPink { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush IndianRed { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Indigo { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Ivory { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Khaki { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Lavender { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LavenderBlush { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LawnGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LemonChiffon { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightCoral { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightCyan { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightGoldenrodYellow { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightGray { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightPink { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightSalmon { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightSeaGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightSkyBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightSlateGray { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightSteelBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LightYellow { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Lime { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush LimeGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Linen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Magenta { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Maroon { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MediumAquamarine { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MediumBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MediumOrchid { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MediumPurple { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MediumSeaGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MediumSlateBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MediumSpringGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MediumTurquoise { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MediumVioletRed { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MidnightBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MintCream { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush MistyRose { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Moccasin { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush NavajoWhite { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Navy { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush OldLace { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Olive { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush OliveDrab { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Orange { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush OrangeRed { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Orchid { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush PaleGoldenrod { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush PaleGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush PaleTurquoise { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush PaleVioletRed { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush PapayaWhip { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush PeachPuff { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Peru { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Pink { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Plum { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush PowderBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Purple { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Red { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush RosyBrown { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush RoyalBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush SaddleBrown { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Salmon { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush SandyBrown { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush SeaGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush SeaShell { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Sienna { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Silver { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush SkyBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush SlateBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush SlateGray { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Snow { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush SpringGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush SteelBlue { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Tan { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Teal { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Thistle { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Tomato { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Transparent { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Turquoise { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Violet { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Wheat { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush White { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush WhiteSmoke { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush Yellow { get { return default(System.Windows.Media.SolidColorBrush); } }
    public static System.Windows.Media.SolidColorBrush YellowGreen { get { return default(System.Windows.Media.SolidColorBrush); } }
  }
  public enum BrushMappingMode {
    Absolute = 0,
    RelativeToBoundingBox = 1,
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.CacheModeConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.CacheModeValueSerializer))]
  public abstract partial class CacheMode : System.Windows.Media.Animation.Animatable {
    internal CacheMode() { }
    public new System.Windows.Media.CacheMode Clone() { return default(System.Windows.Media.CacheMode); }
    public new System.Windows.Media.CacheMode CloneCurrentValue() { return default(System.Windows.Media.CacheMode); }
  }
  public sealed partial class CacheModeConverter : System.ComponentModel.TypeConverter {
    public CacheModeConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public enum CachingHint {
    Cache = 1,
    Unspecified = 0,
  }
  public partial class CharacterMetrics {
    public CharacterMetrics() { }
    public CharacterMetrics(string metrics) { }
    public double Baseline { get { return default(double); } }
    public double BlackBoxHeight { get { return default(double); } }
    public double BlackBoxWidth { get { return default(double); } }
    public double BottomSideBearing { get { return default(double); } }
    public double LeftSideBearing { get { return default(double); } }
    public string Metrics { get { return default(string); } set { } }
    public double RightSideBearing { get { return default(double); } }
    public double TopSideBearing { get { return default(double); } }
    public override bool Equals(object obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class CharacterMetricsDictionary : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Int32, System.Windows.Media.CharacterMetrics>>, System.Collections.Generic.IDictionary<System.Int32, System.Windows.Media.CharacterMetrics>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int32, System.Windows.Media.CharacterMetrics>>, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    internal CharacterMetricsDictionary() { }
    public int Count { get { return default(int); } }
    public bool IsReadOnly { get { return default(bool); } }
    public System.Windows.Media.CharacterMetrics this[int key] { get { return default(System.Windows.Media.CharacterMetrics); } set { } }
    [System.CLSCompliantAttribute(false)]
    public System.Collections.Generic.ICollection<System.Int32> Keys { get { return default(System.Collections.Generic.ICollection<System.Int32>); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    object System.Collections.IDictionary.this[object key] { get { return default(object); } set { } }
    System.Collections.ICollection System.Collections.IDictionary.Keys { get { return default(System.Collections.ICollection); } }
    System.Collections.ICollection System.Collections.IDictionary.Values { get { return default(System.Collections.ICollection); } }
    [System.CLSCompliantAttribute(false)]
    public System.Collections.Generic.ICollection<System.Windows.Media.CharacterMetrics> Values { get { return default(System.Collections.Generic.ICollection<System.Windows.Media.CharacterMetrics>); } }
    [System.CLSCompliantAttribute(false)]
    public void Add(System.Collections.Generic.KeyValuePair<System.Int32, System.Windows.Media.CharacterMetrics> item) { }
    public void Add(int key, System.Windows.Media.CharacterMetrics value) { }
    public void Clear() { }
    [System.CLSCompliantAttribute(false)]
    public bool Contains(System.Collections.Generic.KeyValuePair<System.Int32, System.Windows.Media.CharacterMetrics> item) { return default(bool); }
    public bool ContainsKey(int key) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public void CopyTo(System.Collections.Generic.KeyValuePair<System.Int32, System.Windows.Media.CharacterMetrics>[] array, int index) { }
    [System.CLSCompliantAttribute(false)]
    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int32, System.Windows.Media.CharacterMetrics>> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int32, System.Windows.Media.CharacterMetrics>>); }
    [System.CLSCompliantAttribute(false)]
    public bool Remove(System.Collections.Generic.KeyValuePair<System.Int32, System.Windows.Media.CharacterMetrics> item) { return default(bool); }
    public bool Remove(int key) { return default(bool); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    void System.Collections.IDictionary.Add(object key, object value) { }
    bool System.Collections.IDictionary.Contains(object key) { return default(bool); }
    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    void System.Collections.IDictionary.Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public bool TryGetValue(int key, out System.Windows.Media.CharacterMetrics value) { value = default(System.Windows.Media.CharacterMetrics); return default(bool); }
  }
  public enum ClearTypeHint {
    Auto = 0,
    Enabled = 1,
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.ColorConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Color : System.IEquatable<System.Windows.Media.Color>, System.IFormattable {
    public byte A { get { return default(byte); } set { } }
    public byte B { get { return default(byte); } set { } }
    public System.Windows.Media.ColorContext ColorContext { get { return default(System.Windows.Media.ColorContext); } }
    public byte G { get { return default(byte); } set { } }
    public byte R { get { return default(byte); } set { } }
    public float ScA { get { return default(float); } set { } }
    public float ScB { get { return default(float); } set { } }
    public float ScG { get { return default(float); } set { } }
    public float ScR { get { return default(float); } set { } }
    public static System.Windows.Media.Color Add(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { return default(System.Windows.Media.Color); }
    public static bool AreClose(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { return default(bool); }
    public void Clamp() { }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Media.Color color) { return default(bool); }
    public static bool Equals(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { return default(bool); }
    public static System.Windows.Media.Color FromArgb(byte a, byte r, byte g, byte b) { return default(System.Windows.Media.Color); }
    public static System.Windows.Media.Color FromAValues(float a, System.Single[] values, System.Uri profileUri) { return default(System.Windows.Media.Color); }
    public static System.Windows.Media.Color FromRgb(byte r, byte g, byte b) { return default(System.Windows.Media.Color); }
    public static System.Windows.Media.Color FromScRgb(float a, float r, float g, float b) { return default(System.Windows.Media.Color); }
    public static System.Windows.Media.Color FromValues(System.Single[] values, System.Uri profileUri) { return default(System.Windows.Media.Color); }
    public override int GetHashCode() { return default(int); }
    public System.Single[] GetNativeColorValues() { return default(System.Single[]); }
    public static System.Windows.Media.Color Multiply(System.Windows.Media.Color color, float coefficient) { return default(System.Windows.Media.Color); }
    public static System.Windows.Media.Color operator +(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { return default(System.Windows.Media.Color); }
    public static bool operator ==(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { return default(bool); }
    public static bool operator !=(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { return default(bool); }
    public static System.Windows.Media.Color operator *(System.Windows.Media.Color color, float coefficient) { return default(System.Windows.Media.Color); }
    public static System.Windows.Media.Color operator -(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { return default(System.Windows.Media.Color); }
    public static System.Windows.Media.Color Subtract(System.Windows.Media.Color color1, System.Windows.Media.Color color2) { return default(System.Windows.Media.Color); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public partial class ColorContext {
    [System.Security.SecurityCriticalAttribute]
    public ColorContext(System.Uri profileUri) { }
    [System.Security.SecurityCriticalAttribute]
    public ColorContext(System.Windows.Media.PixelFormat pixelFormat) { }
    public System.Uri ProfileUri { [System.Security.SecurityCriticalAttribute]get { return default(System.Uri); } }
    public override bool Equals(object obj) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public override int GetHashCode() { return default(int); }
    [System.Security.SecurityCriticalAttribute]
    public static bool operator ==(System.Windows.Media.ColorContext context1, System.Windows.Media.ColorContext context2) { return default(bool); }
    public static bool operator !=(System.Windows.Media.ColorContext context1, System.Windows.Media.ColorContext context2) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public System.IO.Stream OpenProfileStream() { return default(System.IO.Stream); }
  }
  public sealed partial class ColorConverter : System.ComponentModel.TypeConverter {
    public ColorConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { return default(object); }
    public static new object ConvertFromString(string value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public enum ColorInterpolationMode {
    ScRgbLinearInterpolation = 0,
    SRgbLinearInterpolation = 1,
  }
  public sealed partial class Colors {
    internal Colors() { }
    public static System.Windows.Media.Color AliceBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color AntiqueWhite { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Aqua { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Aquamarine { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Azure { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Beige { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Bisque { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Black { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color BlanchedAlmond { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Blue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color BlueViolet { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Brown { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color BurlyWood { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color CadetBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Chartreuse { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Chocolate { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Coral { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color CornflowerBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Cornsilk { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Crimson { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Cyan { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkCyan { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkGoldenrod { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkGray { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkKhaki { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkMagenta { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkOliveGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkOrange { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkOrchid { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkRed { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkSalmon { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkSeaGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkSlateBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkSlateGray { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkTurquoise { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DarkViolet { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DeepPink { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DeepSkyBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DimGray { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color DodgerBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Firebrick { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color FloralWhite { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color ForestGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Fuchsia { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Gainsboro { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color GhostWhite { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Gold { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Goldenrod { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Gray { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Green { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color GreenYellow { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Honeydew { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color HotPink { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color IndianRed { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Indigo { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Ivory { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Khaki { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Lavender { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LavenderBlush { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LawnGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LemonChiffon { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightCoral { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightCyan { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightGoldenrodYellow { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightGray { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightPink { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightSalmon { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightSeaGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightSkyBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightSlateGray { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightSteelBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LightYellow { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Lime { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color LimeGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Linen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Magenta { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Maroon { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MediumAquamarine { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MediumBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MediumOrchid { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MediumPurple { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MediumSeaGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MediumSlateBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MediumSpringGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MediumTurquoise { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MediumVioletRed { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MidnightBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MintCream { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color MistyRose { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Moccasin { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color NavajoWhite { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Navy { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color OldLace { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Olive { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color OliveDrab { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Orange { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color OrangeRed { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Orchid { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color PaleGoldenrod { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color PaleGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color PaleTurquoise { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color PaleVioletRed { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color PapayaWhip { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color PeachPuff { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Peru { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Pink { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Plum { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color PowderBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Purple { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Red { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color RosyBrown { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color RoyalBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color SaddleBrown { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Salmon { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color SandyBrown { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color SeaGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color SeaShell { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Sienna { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Silver { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color SkyBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color SlateBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color SlateGray { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Snow { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color SpringGreen { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color SteelBlue { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Tan { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Teal { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Thistle { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Tomato { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Transparent { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Turquoise { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Violet { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Wheat { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color White { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color WhiteSmoke { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color Yellow { get { return default(System.Windows.Media.Color); } }
    public static System.Windows.Media.Color YellowGreen { get { return default(System.Windows.Media.Color); } }
  }
  public sealed partial class CombinedGeometry : System.Windows.Media.Geometry {
    public static readonly System.Windows.DependencyProperty Geometry1Property;
    public static readonly System.Windows.DependencyProperty Geometry2Property;
    public static readonly System.Windows.DependencyProperty GeometryCombineModeProperty;
    public CombinedGeometry() { }
    public CombinedGeometry(System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2) { }
    public CombinedGeometry(System.Windows.Media.GeometryCombineMode geometryCombineMode, System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2) { }
    public CombinedGeometry(System.Windows.Media.GeometryCombineMode geometryCombineMode, System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2, System.Windows.Media.Transform transform) { }
    public override System.Windows.Rect Bounds { get { return default(System.Windows.Rect); } }
    public System.Windows.Media.Geometry Geometry1 { get { return default(System.Windows.Media.Geometry); } set { } }
    public System.Windows.Media.Geometry Geometry2 { get { return default(System.Windows.Media.Geometry); } set { } }
    public System.Windows.Media.GeometryCombineMode GeometryCombineMode { get { return default(System.Windows.Media.GeometryCombineMode); } set { } }
    public new System.Windows.Media.CombinedGeometry Clone() { return default(System.Windows.Media.CombinedGeometry); }
    public new System.Windows.Media.CombinedGeometry CloneCurrentValue() { return default(System.Windows.Media.CombinedGeometry); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public override double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { return default(double); }
    public override bool IsEmpty() { return default(bool); }
    public override bool MayHaveCurves() { return default(bool); }
  }
  [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Window=(System.Security.Permissions.UIPermissionWindow)(3))]
  public abstract partial class CompositionTarget : System.Windows.Threading.DispatcherObject, System.IDisposable {
    internal CompositionTarget() { }
    public virtual System.Windows.Media.Visual RootVisual { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Visual); } [System.Security.SecurityCriticalAttribute]set { } }
    public abstract System.Windows.Media.Matrix TransformFromDevice { get; }
    public abstract System.Windows.Media.Matrix TransformToDevice { get; }
    public static event System.EventHandler Rendering { add { } remove { } }
    public virtual void Dispose() { }
  }
  public partial class ContainerVisual : System.Windows.Media.Visual {
    public ContainerVisual() { }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get { return default(System.Windows.Media.Effects.BitmapEffect); } set { } }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get { return default(System.Windows.Media.Effects.BitmapEffectInput); } set { } }
    public System.Windows.Media.CacheMode CacheMode { get { return default(System.Windows.Media.CacheMode); } set { } }
    public System.Windows.Media.VisualCollection Children { get { return default(System.Windows.Media.VisualCollection); } }
    public System.Windows.Media.Geometry Clip { get { return default(System.Windows.Media.Geometry); } set { } }
    public System.Windows.Rect ContentBounds { get { return default(System.Windows.Rect); } }
    public System.Windows.Rect DescendantBounds { get { return default(System.Windows.Rect); } }
    public System.Windows.Media.Effects.Effect Effect { get { return default(System.Windows.Media.Effects.Effect); } set { } }
    public System.Windows.Vector Offset { get { return default(System.Windows.Vector); } set { } }
    public double Opacity { get { return default(double); } set { } }
    public System.Windows.Media.Brush OpacityMask { get { return default(System.Windows.Media.Brush); } set { } }
    public System.Windows.DependencyObject Parent { get { return default(System.Windows.DependencyObject); } }
    public System.Windows.Media.Transform Transform { get { return default(System.Windows.Media.Transform); } set { } }
    protected sealed override int VisualChildrenCount { get { return default(int); } }
    [System.ComponentModel.DefaultValueAttribute(null)]
    public System.Windows.Media.DoubleCollection XSnappingGuidelines { get { return default(System.Windows.Media.DoubleCollection); } set { } }
    [System.ComponentModel.DefaultValueAttribute(null)]
    public System.Windows.Media.DoubleCollection YSnappingGuidelines { get { return default(System.Windows.Media.DoubleCollection); } set { } }
    protected sealed override System.Windows.Media.Visual GetVisualChild(int index) { return default(System.Windows.Media.Visual); }
    public void HitTest(System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.HitTestParameters hitTestParameters) { }
    public System.Windows.Media.HitTestResult HitTest(System.Windows.Point point) { return default(System.Windows.Media.HitTestResult); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public sealed partial class DashStyle : System.Windows.Media.Animation.Animatable {
    public static readonly System.Windows.DependencyProperty DashesProperty;
    public static readonly System.Windows.DependencyProperty OffsetProperty;
    public DashStyle() { }
    public DashStyle(System.Collections.Generic.IEnumerable<System.Double> dashes, double offset) { }
    public System.Windows.Media.DoubleCollection Dashes { get { return default(System.Windows.Media.DoubleCollection); } set { } }
    public double Offset { get { return default(double); } set { } }
    public new System.Windows.Media.DashStyle Clone() { return default(System.Windows.Media.DashStyle); }
    public new System.Windows.Media.DashStyle CloneCurrentValue() { return default(System.Windows.Media.DashStyle); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public static partial class DashStyles {
    public static System.Windows.Media.DashStyle Dash { get { return default(System.Windows.Media.DashStyle); } }
    public static System.Windows.Media.DashStyle DashDot { get { return default(System.Windows.Media.DashStyle); } }
    public static System.Windows.Media.DashStyle DashDotDot { get { return default(System.Windows.Media.DashStyle); } }
    public static System.Windows.Media.DashStyle Dot { get { return default(System.Windows.Media.DashStyle); } }
    public static System.Windows.Media.DashStyle Solid { get { return default(System.Windows.Media.DashStyle); } }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.DoubleCollectionConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.DoubleCollectionValueSerializer))]
  public sealed partial class DoubleCollection : System.Windows.Freezable, System.Collections.Generic.ICollection<System.Double>, System.Collections.Generic.IEnumerable<System.Double>, System.Collections.Generic.IList<System.Double>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable {
    public DoubleCollection() { }
    public DoubleCollection(System.Collections.Generic.IEnumerable<System.Double> collection) { }
    public DoubleCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public double this[int index] { get { return default(double); } set { } }
    bool System.Collections.Generic.ICollection<System.Double>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(double value) { }
    public void Clear() { }
    public new System.Windows.Media.DoubleCollection Clone() { return default(System.Windows.Media.DoubleCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.DoubleCollection CloneCurrentValue() { return default(System.Windows.Media.DoubleCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(double value) { return default(bool); }
    public void CopyTo(System.Double[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.DoubleCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.DoubleCollection.Enumerator); }
    public int IndexOf(double value) { return default(int); }
    public void Insert(int index, double value) { }
    public static System.Windows.Media.DoubleCollection Parse(string source) { return default(System.Windows.Media.DoubleCollection); }
    public bool Remove(double value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Double> System.Collections.Generic.IEnumerable<System.Double>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Double>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Double>, System.Collections.IEnumerator, System.IDisposable {
      public double Current { get { return default(double); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class DoubleCollectionConverter : System.ComponentModel.TypeConverter {
    public DoubleCollectionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public abstract partial class Drawing : System.Windows.Media.Animation.Animatable {
    internal Drawing() { }
    public System.Windows.Rect Bounds { get { return default(System.Windows.Rect); } }
    public new System.Windows.Media.Drawing Clone() { return default(System.Windows.Media.Drawing); }
    public new System.Windows.Media.Drawing CloneCurrentValue() { return default(System.Windows.Media.Drawing); }
  }
  public sealed partial class DrawingBrush : System.Windows.Media.TileBrush {
    public static readonly System.Windows.DependencyProperty DrawingProperty;
    public DrawingBrush() { }
    public DrawingBrush(System.Windows.Media.Drawing drawing) { }
    public System.Windows.Media.Drawing Drawing { get { return default(System.Windows.Media.Drawing); } set { } }
    public new System.Windows.Media.DrawingBrush Clone() { return default(System.Windows.Media.DrawingBrush); }
    public new System.Windows.Media.DrawingBrush CloneCurrentValue() { return default(System.Windows.Media.DrawingBrush); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetContentBounds(out System.Windows.Rect contentBounds) { contentBounds = default(System.Windows.Rect); }
  }
  public sealed partial class DrawingCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Drawing>, System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing>, System.Collections.Generic.IList<System.Windows.Media.Drawing>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public DrawingCollection() { }
    public DrawingCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing> collection) { }
    public DrawingCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Drawing this[int index] { get { return default(System.Windows.Media.Drawing); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Drawing>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Drawing value) { }
    public void Clear() { }
    public new System.Windows.Media.DrawingCollection Clone() { return default(System.Windows.Media.DrawingCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.DrawingCollection CloneCurrentValue() { return default(System.Windows.Media.DrawingCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Drawing value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Drawing[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.DrawingCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.DrawingCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Drawing value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Drawing value) { }
    public bool Remove(System.Windows.Media.Drawing value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Drawing> System.Collections.Generic.IEnumerable<System.Windows.Media.Drawing>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Drawing>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Drawing>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Drawing Current { get { return default(System.Windows.Media.Drawing); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public abstract partial class DrawingContext : System.Windows.Threading.DispatcherObject, System.IDisposable {
    internal DrawingContext() { }
    public abstract void Close();
    protected abstract void DisposeCore();
    public abstract void DrawDrawing(System.Windows.Media.Drawing drawing);
    public abstract void DrawEllipse(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Point center, double radiusX, double radiusY);
    public abstract void DrawEllipse(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Point center, System.Windows.Media.Animation.AnimationClock centerAnimations, double radiusX, System.Windows.Media.Animation.AnimationClock radiusXAnimations, double radiusY, System.Windows.Media.Animation.AnimationClock radiusYAnimations);
    public abstract void DrawGeometry(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Media.Geometry geometry);
    public abstract void DrawGlyphRun(System.Windows.Media.Brush foregroundBrush, System.Windows.Media.GlyphRun glyphRun);
    public abstract void DrawImage(System.Windows.Media.ImageSource imageSource, System.Windows.Rect rectangle);
    public abstract void DrawImage(System.Windows.Media.ImageSource imageSource, System.Windows.Rect rectangle, System.Windows.Media.Animation.AnimationClock rectangleAnimations);
    public abstract void DrawLine(System.Windows.Media.Pen pen, System.Windows.Point point0, System.Windows.Media.Animation.AnimationClock point0Animations, System.Windows.Point point1, System.Windows.Media.Animation.AnimationClock point1Animations);
    public abstract void DrawLine(System.Windows.Media.Pen pen, System.Windows.Point point0, System.Windows.Point point1);
    public abstract void DrawRectangle(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Rect rectangle);
    public abstract void DrawRectangle(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Rect rectangle, System.Windows.Media.Animation.AnimationClock rectangleAnimations);
    public abstract void DrawRoundedRectangle(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Rect rectangle, double radiusX, double radiusY);
    public abstract void DrawRoundedRectangle(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Rect rectangle, System.Windows.Media.Animation.AnimationClock rectangleAnimations, double radiusX, System.Windows.Media.Animation.AnimationClock radiusXAnimations, double radiusY, System.Windows.Media.Animation.AnimationClock radiusYAnimations);
    public void DrawText(System.Windows.Media.FormattedText formattedText, System.Windows.Point origin) { }
    public abstract void DrawVideo(System.Windows.Media.MediaPlayer player, System.Windows.Rect rectangle);
    public abstract void DrawVideo(System.Windows.Media.MediaPlayer player, System.Windows.Rect rectangle, System.Windows.Media.Animation.AnimationClock rectangleAnimations);
    public abstract void Pop();
    public abstract void PushClip(System.Windows.Media.Geometry clipGeometry);
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    public abstract void PushEffect(System.Windows.Media.Effects.BitmapEffect effect, System.Windows.Media.Effects.BitmapEffectInput effectInput);
    public abstract void PushGuidelineSet(System.Windows.Media.GuidelineSet guidelines);
    public abstract void PushOpacity(double opacity);
    public abstract void PushOpacity(double opacity, System.Windows.Media.Animation.AnimationClock opacityAnimations);
    public abstract void PushOpacityMask(System.Windows.Media.Brush opacityMask);
    public abstract void PushTransform(System.Windows.Media.Transform transform);
    void System.IDisposable.Dispose() { }
    protected virtual void VerifyApiNonstructuralChange() { }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class DrawingGroup : System.Windows.Media.Drawing {
    public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;
    public static readonly System.Windows.DependencyProperty BitmapEffectProperty;
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    public static readonly System.Windows.DependencyProperty ClipGeometryProperty;
    public static readonly System.Windows.DependencyProperty GuidelineSetProperty;
    public static readonly System.Windows.DependencyProperty OpacityMaskProperty;
    public static readonly System.Windows.DependencyProperty OpacityProperty;
    public static readonly System.Windows.DependencyProperty TransformProperty;
    public DrawingGroup() { }
    public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get { return default(System.Windows.Media.Effects.BitmapEffect); } set { } }
    public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get { return default(System.Windows.Media.Effects.BitmapEffectInput); } set { } }
    public System.Windows.Media.DrawingCollection Children { get { return default(System.Windows.Media.DrawingCollection); } set { } }
    public System.Windows.Media.Geometry ClipGeometry { get { return default(System.Windows.Media.Geometry); } set { } }
    public System.Windows.Media.GuidelineSet GuidelineSet { get { return default(System.Windows.Media.GuidelineSet); } set { } }
    public double Opacity { get { return default(double); } set { } }
    public System.Windows.Media.Brush OpacityMask { get { return default(System.Windows.Media.Brush); } set { } }
    public System.Windows.Media.Transform Transform { get { return default(System.Windows.Media.Transform); } set { } }
    public System.Windows.Media.DrawingContext Append() { return default(System.Windows.Media.DrawingContext); }
    public new System.Windows.Media.DrawingGroup Clone() { return default(System.Windows.Media.DrawingGroup); }
    public new System.Windows.Media.DrawingGroup CloneCurrentValue() { return default(System.Windows.Media.DrawingGroup); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public System.Windows.Media.DrawingContext Open() { return default(System.Windows.Media.DrawingContext); }
  }
  public sealed partial class DrawingImage : System.Windows.Media.ImageSource {
    public static readonly System.Windows.DependencyProperty DrawingProperty;
    public DrawingImage() { }
    public DrawingImage(System.Windows.Media.Drawing drawing) { }
    public System.Windows.Media.Drawing Drawing { get { return default(System.Windows.Media.Drawing); } set { } }
    public override double Height { get { return default(double); } }
    public override System.Windows.Media.ImageMetadata Metadata { get { return default(System.Windows.Media.ImageMetadata); } }
    public override double Width { get { return default(double); } }
    public new System.Windows.Media.DrawingImage Clone() { return default(System.Windows.Media.DrawingImage); }
    public new System.Windows.Media.DrawingImage CloneCurrentValue() { return default(System.Windows.Media.DrawingImage); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public partial class DrawingVisual : System.Windows.Media.ContainerVisual {
    public DrawingVisual() { }
    public System.Windows.Media.DrawingGroup Drawing { get { return default(System.Windows.Media.DrawingGroup); } }
    protected override System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { return default(System.Windows.Media.GeometryHitTestResult); }
    protected override System.Windows.Media.HitTestResult HitTestCore(System.Windows.Media.PointHitTestParameters hitTestParameters) { return default(System.Windows.Media.HitTestResult); }
    public System.Windows.Media.DrawingContext RenderOpen() { return default(System.Windows.Media.DrawingContext); }
  }
  public enum EdgeMode {
    Aliased = 1,
    Unspecified = 0,
  }
  public sealed partial class EllipseGeometry : System.Windows.Media.Geometry {
    public static readonly System.Windows.DependencyProperty CenterProperty;
    public static readonly System.Windows.DependencyProperty RadiusXProperty;
    public static readonly System.Windows.DependencyProperty RadiusYProperty;
    public EllipseGeometry() { }
    public EllipseGeometry(System.Windows.Point center, double radiusX, double radiusY) { }
    public EllipseGeometry(System.Windows.Point center, double radiusX, double radiusY, System.Windows.Media.Transform transform) { }
    public EllipseGeometry(System.Windows.Rect rect) { }
    public override System.Windows.Rect Bounds { get { return default(System.Windows.Rect); } }
    public System.Windows.Point Center { get { return default(System.Windows.Point); } set { } }
    public double RadiusX { get { return default(double); } set { } }
    public double RadiusY { get { return default(double); } set { } }
    public new System.Windows.Media.EllipseGeometry Clone() { return default(System.Windows.Media.EllipseGeometry); }
    public new System.Windows.Media.EllipseGeometry CloneCurrentValue() { return default(System.Windows.Media.EllipseGeometry); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public override double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { return default(double); }
    public override bool IsEmpty() { return default(bool); }
    public override bool MayHaveCurves() { return default(bool); }
  }
  public sealed partial class ExceptionEventArgs : System.EventArgs {
    internal ExceptionEventArgs() { }
    public System.Exception ErrorException { get { return default(System.Exception); } }
  }
  public partial class FamilyTypeface {
    public FamilyTypeface() { }
    public System.Collections.Generic.IDictionary<System.Windows.Markup.XmlLanguage, System.String> AdjustedFaceNames { get { return default(System.Collections.Generic.IDictionary<System.Windows.Markup.XmlLanguage, System.String>); } }
    public double CapsHeight { get { return default(double); } set { } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Media.CharacterMetricsDictionary DeviceFontCharacterMetrics { get { return default(System.Windows.Media.CharacterMetricsDictionary); } }
    public string DeviceFontName { get { return default(string); } set { } }
    public System.Windows.FontStretch Stretch { get { return default(System.Windows.FontStretch); } set { } }
    public double StrikethroughPosition { get { return default(double); } set { } }
    public double StrikethroughThickness { get { return default(double); } set { } }
    public System.Windows.FontStyle Style { get { return default(System.Windows.FontStyle); } set { } }
    public double UnderlinePosition { get { return default(double); } set { } }
    public double UnderlineThickness { get { return default(double); } set { } }
    public System.Windows.FontWeight Weight { get { return default(System.Windows.FontWeight); } set { } }
    public double XHeight { get { return default(double); } set { } }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Media.FamilyTypeface typeface) { return default(bool); }
    public override int GetHashCode() { return default(int); }
  }
  public sealed partial class FamilyTypefaceCollection : System.Collections.Generic.ICollection<System.Windows.Media.FamilyTypeface>, System.Collections.Generic.IEnumerable<System.Windows.Media.FamilyTypeface>, System.Collections.Generic.IList<System.Windows.Media.FamilyTypeface>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    internal FamilyTypefaceCollection() { }
    public int Count { get { return default(int); } }
    public bool IsReadOnly { get { return default(bool); } }
    public System.Windows.Media.FamilyTypeface this[int index] { get { return default(System.Windows.Media.FamilyTypeface); } set { } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.FamilyTypeface item) { }
    public void Clear() { }
    public bool Contains(System.Windows.Media.FamilyTypeface item) { return default(bool); }
    public void CopyTo(System.Windows.Media.FamilyTypeface[] array, int index) { }
    public System.Collections.Generic.IEnumerator<System.Windows.Media.FamilyTypeface> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.FamilyTypeface>); }
    public int IndexOf(System.Windows.Media.FamilyTypeface item) { return default(int); }
    public void Insert(int index, System.Windows.Media.FamilyTypeface item) { }
    public bool Remove(System.Windows.Media.FamilyTypeface item) { return default(bool); }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object item) { }
    void System.Collections.IList.Remove(object value) { }
  }
  public enum FillRule {
    EvenOdd = 0,
    Nonzero = 1,
  }
  public partial class FontEmbeddingManager {
    public FontEmbeddingManager() { }
    [System.CLSCompliantAttribute(false)]
    public System.Collections.Generic.ICollection<System.Uri> GlyphTypefaceUris { get { return default(System.Collections.Generic.ICollection<System.Uri>); } }
    [System.CLSCompliantAttribute(false)]
    public System.Collections.Generic.ICollection<System.UInt16> GetUsedGlyphs(System.Uri glyphTypeface) { return default(System.Collections.Generic.ICollection<System.UInt16>); }
    public void RecordUsage(System.Windows.Media.GlyphRun glyphRun) { }
  }
  public enum FontEmbeddingRight {
    Editable = 9,
    EditableButNoSubsetting = 10,
    EditableButNoSubsettingAndWithBitmapsOnly = 12,
    EditableButWithBitmapsOnly = 11,
    Installable = 0,
    InstallableButNoSubsetting = 1,
    InstallableButNoSubsettingAndWithBitmapsOnly = 3,
    InstallableButWithBitmapsOnly = 2,
    PreviewAndPrint = 5,
    PreviewAndPrintButNoSubsetting = 6,
    PreviewAndPrintButNoSubsettingAndWithBitmapsOnly = 8,
    PreviewAndPrintButWithBitmapsOnly = 7,
    RestrictedLicense = 4,
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.FontFamilyConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(14))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.FontFamilyValueSerializer))]
  public partial class FontFamily {
    public FontFamily() { }
    public FontFamily(string familyName) { }
    public FontFamily(System.Uri baseUri, string familyName) { }
    public double Baseline { get { return default(double); } set { } }
    public System.Uri BaseUri { get { return default(System.Uri); } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Media.FontFamilyMapCollection FamilyMaps { get { return default(System.Windows.Media.FontFamilyMapCollection); } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Media.LanguageSpecificStringDictionary FamilyNames { get { return default(System.Windows.Media.LanguageSpecificStringDictionary); } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Media.FamilyTypefaceCollection FamilyTypefaces { get { return default(System.Windows.Media.FamilyTypefaceCollection); } }
    public double LineSpacing { get { return default(double); } set { } }
    public string Source { get { return default(string); } }
    public override bool Equals(object o) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    [System.CLSCompliantAttribute(false)]
    public System.Collections.Generic.ICollection<System.Windows.Media.Typeface> GetTypefaces() { return default(System.Collections.Generic.ICollection<System.Windows.Media.Typeface>); }
    public override string ToString() { return default(string); }
  }
  public partial class FontFamilyConverter : System.ComponentModel.TypeConverter {
    public FontFamilyConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object o) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class FontFamilyMap {
    public FontFamilyMap() { }
    public System.Windows.Markup.XmlLanguage Language { get { return default(System.Windows.Markup.XmlLanguage); } set { } }
    public double Scale { get { return default(double); } set { } }
    [System.Windows.Markup.DesignerSerializationOptionsAttribute((System.Windows.Markup.DesignerSerializationOptions)(1))]
    public string Target { get { return default(string); } set { } }
    [System.Windows.Markup.DesignerSerializationOptionsAttribute((System.Windows.Markup.DesignerSerializationOptions)(1))]
    public string Unicode { get { return default(string); } set { } }
  }
  public sealed partial class FontFamilyMapCollection : System.Collections.Generic.ICollection<System.Windows.Media.FontFamilyMap>, System.Collections.Generic.IEnumerable<System.Windows.Media.FontFamilyMap>, System.Collections.Generic.IList<System.Windows.Media.FontFamilyMap>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    internal FontFamilyMapCollection() { }
    public int Count { get { return default(int); } }
    public bool IsReadOnly { get { return default(bool); } }
    public System.Windows.Media.FontFamilyMap this[int index] { get { return default(System.Windows.Media.FontFamilyMap); } set { } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.FontFamilyMap item) { }
    public void Clear() { }
    public bool Contains(System.Windows.Media.FontFamilyMap item) { return default(bool); }
    public void CopyTo(System.Windows.Media.FontFamilyMap[] array, int index) { }
    public System.Collections.Generic.IEnumerator<System.Windows.Media.FontFamilyMap> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.FontFamilyMap>); }
    public int IndexOf(System.Windows.Media.FontFamilyMap item) { return default(int); }
    public void Insert(int index, System.Windows.Media.FontFamilyMap item) { }
    public bool Remove(System.Windows.Media.FontFamilyMap item) { return default(bool); }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object item) { }
    void System.Collections.IList.Remove(object value) { }
  }
  public partial class FontFamilyValueSerializer : System.Windows.Markup.ValueSerializer {
    public FontFamilyValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public static partial class Fonts {
    public static System.Collections.Generic.ICollection<System.Windows.Media.FontFamily> SystemFontFamilies { get { return default(System.Collections.Generic.ICollection<System.Windows.Media.FontFamily>); } }
    public static System.Collections.Generic.ICollection<System.Windows.Media.Typeface> SystemTypefaces { get { return default(System.Collections.Generic.ICollection<System.Windows.Media.Typeface>); } }
    public static System.Collections.Generic.ICollection<System.Windows.Media.FontFamily> GetFontFamilies(string location) { return default(System.Collections.Generic.ICollection<System.Windows.Media.FontFamily>); }
    public static System.Collections.Generic.ICollection<System.Windows.Media.FontFamily> GetFontFamilies(System.Uri baseUri) { return default(System.Collections.Generic.ICollection<System.Windows.Media.FontFamily>); }
    public static System.Collections.Generic.ICollection<System.Windows.Media.FontFamily> GetFontFamilies(System.Uri baseUri, string location) { return default(System.Collections.Generic.ICollection<System.Windows.Media.FontFamily>); }
    public static System.Collections.Generic.ICollection<System.Windows.Media.Typeface> GetTypefaces(string location) { return default(System.Collections.Generic.ICollection<System.Windows.Media.Typeface>); }
    public static System.Collections.Generic.ICollection<System.Windows.Media.Typeface> GetTypefaces(System.Uri baseUri) { return default(System.Collections.Generic.ICollection<System.Windows.Media.Typeface>); }
    public static System.Collections.Generic.ICollection<System.Windows.Media.Typeface> GetTypefaces(System.Uri baseUri, string location) { return default(System.Collections.Generic.ICollection<System.Windows.Media.Typeface>); }
  }
  public partial class FormattedText {
    [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
    public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground) { }
    public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, double pixelsPerDip) { }
    [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
    public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, System.Windows.Media.NumberSubstitution numberSubstitution) { }
    public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, System.Windows.Media.NumberSubstitution numberSubstitution, double pixelsPerDip) { }
    [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
    public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, System.Windows.Media.NumberSubstitution numberSubstitution, System.Windows.Media.TextFormattingMode textFormattingMode) { }
    public FormattedText(string textToFormat, System.Globalization.CultureInfo culture, System.Windows.FlowDirection flowDirection, System.Windows.Media.Typeface typeface, double emSize, System.Windows.Media.Brush foreground, System.Windows.Media.NumberSubstitution numberSubstitution, System.Windows.Media.TextFormattingMode textFormattingMode, double pixelsPerDip) { }
    public double Baseline { get { return default(double); } }
    public double Extent { get { return default(double); } }
    public System.Windows.FlowDirection FlowDirection { get { return default(System.Windows.FlowDirection); } set { } }
    public double Height { get { return default(double); } }
    public double LineHeight { get { return default(double); } set { } }
    public int MaxLineCount { get { return default(int); } set { } }
    public double MaxTextHeight { get { return default(double); } set { } }
    public double MaxTextWidth { get { return default(double); } set { } }
    public double MinWidth { get { return default(double); } }
    public double OverhangAfter { get { return default(double); } }
    public double OverhangLeading { get { return default(double); } }
    public double OverhangTrailing { get { return default(double); } }
    public double PixelsPerDip { get { return default(double); } set { } }
    public string Text { get { return default(string); } }
    public System.Windows.TextAlignment TextAlignment { get { return default(System.Windows.TextAlignment); } set { } }
    public System.Windows.TextTrimming Trimming { get { return default(System.Windows.TextTrimming); } set { } }
    public double Width { get { return default(double); } }
    public double WidthIncludingTrailingWhitespace { get { return default(double); } }
    public System.Windows.Media.Geometry BuildGeometry(System.Windows.Point origin) { return default(System.Windows.Media.Geometry); }
    public System.Windows.Media.Geometry BuildHighlightGeometry(System.Windows.Point origin) { return default(System.Windows.Media.Geometry); }
    public System.Windows.Media.Geometry BuildHighlightGeometry(System.Windows.Point origin, int startIndex, int count) { return default(System.Windows.Media.Geometry); }
    public System.Double[] GetMaxTextWidths() { return default(System.Double[]); }
    public void SetCulture(System.Globalization.CultureInfo culture) { }
    public void SetCulture(System.Globalization.CultureInfo culture, int startIndex, int count) { }
    public void SetFontFamily(string fontFamily) { }
    public void SetFontFamily(string fontFamily, int startIndex, int count) { }
    public void SetFontFamily(System.Windows.Media.FontFamily fontFamily) { }
    public void SetFontFamily(System.Windows.Media.FontFamily fontFamily, int startIndex, int count) { }
    public void SetFontSize(double emSize) { }
    public void SetFontSize(double emSize, int startIndex, int count) { }
    public void SetFontStretch(System.Windows.FontStretch stretch) { }
    public void SetFontStretch(System.Windows.FontStretch stretch, int startIndex, int count) { }
    public void SetFontStyle(System.Windows.FontStyle style) { }
    public void SetFontStyle(System.Windows.FontStyle style, int startIndex, int count) { }
    public void SetFontTypeface(System.Windows.Media.Typeface typeface) { }
    public void SetFontTypeface(System.Windows.Media.Typeface typeface, int startIndex, int count) { }
    public void SetFontWeight(System.Windows.FontWeight weight) { }
    public void SetFontWeight(System.Windows.FontWeight weight, int startIndex, int count) { }
    public void SetForegroundBrush(System.Windows.Media.Brush foregroundBrush) { }
    public void SetForegroundBrush(System.Windows.Media.Brush foregroundBrush, int startIndex, int count) { }
    public void SetMaxTextWidths(System.Double[] maxTextWidths) { }
    public void SetNumberSubstitution(System.Windows.Media.NumberSubstitution numberSubstitution) { }
    public void SetNumberSubstitution(System.Windows.Media.NumberSubstitution numberSubstitution, int startIndex, int count) { }
    public void SetTextDecorations(System.Windows.TextDecorationCollection textDecorations) { }
    public void SetTextDecorations(System.Windows.TextDecorationCollection textDecorations, int startIndex, int count) { }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public abstract partial class GeneralTransform : System.Windows.Media.Animation.Animatable, System.IFormattable {
    protected GeneralTransform() { }
    public abstract System.Windows.Media.GeneralTransform Inverse { get; }
    public new System.Windows.Media.GeneralTransform Clone() { return default(System.Windows.Media.GeneralTransform); }
    public new System.Windows.Media.GeneralTransform CloneCurrentValue() { return default(System.Windows.Media.GeneralTransform); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public System.Windows.Point Transform(System.Windows.Point point) { return default(System.Windows.Point); }
    public abstract System.Windows.Rect TransformBounds(System.Windows.Rect rect);
    public abstract bool TryTransform(System.Windows.Point inPoint, out System.Windows.Point result);
  }
  public sealed partial class GeneralTransformCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.GeneralTransform>, System.Collections.Generic.IEnumerable<System.Windows.Media.GeneralTransform>, System.Collections.Generic.IList<System.Windows.Media.GeneralTransform>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public GeneralTransformCollection() { }
    public GeneralTransformCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.GeneralTransform> collection) { }
    public GeneralTransformCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.GeneralTransform this[int index] { get { return default(System.Windows.Media.GeneralTransform); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.GeneralTransform>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.GeneralTransform value) { }
    public void Clear() { }
    public new System.Windows.Media.GeneralTransformCollection Clone() { return default(System.Windows.Media.GeneralTransformCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.GeneralTransformCollection CloneCurrentValue() { return default(System.Windows.Media.GeneralTransformCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.GeneralTransform value) { return default(bool); }
    public void CopyTo(System.Windows.Media.GeneralTransform[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.GeneralTransformCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.GeneralTransformCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.GeneralTransform value) { return default(int); }
    public void Insert(int index, System.Windows.Media.GeneralTransform value) { }
    public bool Remove(System.Windows.Media.GeneralTransform value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.GeneralTransform> System.Collections.Generic.IEnumerable<System.Windows.Media.GeneralTransform>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.GeneralTransform>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.GeneralTransform>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.GeneralTransform Current { get { return default(System.Windows.Media.GeneralTransform); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class GeneralTransformGroup : System.Windows.Media.GeneralTransform {
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    public GeneralTransformGroup() { }
    public System.Windows.Media.GeneralTransformCollection Children { get { return default(System.Windows.Media.GeneralTransformCollection); } set { } }
    public override System.Windows.Media.GeneralTransform Inverse { get { return default(System.Windows.Media.GeneralTransform); } }
    public new System.Windows.Media.GeneralTransformGroup Clone() { return default(System.Windows.Media.GeneralTransformGroup); }
    public new System.Windows.Media.GeneralTransformGroup CloneCurrentValue() { return default(System.Windows.Media.GeneralTransformGroup); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public override System.Windows.Rect TransformBounds(System.Windows.Rect rect) { return default(System.Windows.Rect); }
    public override bool TryTransform(System.Windows.Point inPoint, out System.Windows.Point result) { result = default(System.Windows.Point); return default(bool); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.GeometryConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.GeometryValueSerializer))]
  public abstract partial class Geometry : System.Windows.Media.Animation.Animatable, System.IFormattable {
    internal Geometry() { }
    public static readonly System.Windows.DependencyProperty TransformProperty;
    public virtual System.Windows.Rect Bounds { get { return default(System.Windows.Rect); } }
    public static System.Windows.Media.Geometry Empty { get { return default(System.Windows.Media.Geometry); } }
    public static double StandardFlatteningTolerance { get { return default(double); } }
    public System.Windows.Media.Transform Transform { get { return default(System.Windows.Media.Transform); } set { } }
    public new System.Windows.Media.Geometry Clone() { return default(System.Windows.Media.Geometry); }
    public new System.Windows.Media.Geometry CloneCurrentValue() { return default(System.Windows.Media.Geometry); }
    public static System.Windows.Media.PathGeometry Combine(System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2, System.Windows.Media.GeometryCombineMode mode, System.Windows.Media.Transform transform) { return default(System.Windows.Media.PathGeometry); }
    public static System.Windows.Media.PathGeometry Combine(System.Windows.Media.Geometry geometry1, System.Windows.Media.Geometry geometry2, System.Windows.Media.GeometryCombineMode mode, System.Windows.Media.Transform transform, double tolerance, System.Windows.Media.ToleranceType type) { return default(System.Windows.Media.PathGeometry); }
    public bool FillContains(System.Windows.Media.Geometry geometry) { return default(bool); }
    public bool FillContains(System.Windows.Media.Geometry geometry, double tolerance, System.Windows.Media.ToleranceType type) { return default(bool); }
    public bool FillContains(System.Windows.Point hitPoint) { return default(bool); }
    public bool FillContains(System.Windows.Point hitPoint, double tolerance, System.Windows.Media.ToleranceType type) { return default(bool); }
    public System.Windows.Media.IntersectionDetail FillContainsWithDetail(System.Windows.Media.Geometry geometry) { return default(System.Windows.Media.IntersectionDetail); }
    public virtual System.Windows.Media.IntersectionDetail FillContainsWithDetail(System.Windows.Media.Geometry geometry, double tolerance, System.Windows.Media.ToleranceType type) { return default(System.Windows.Media.IntersectionDetail); }
    public double GetArea() { return default(double); }
    [System.Security.SecurityCriticalAttribute]
    public virtual double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { return default(double); }
    public System.Windows.Media.PathGeometry GetFlattenedPathGeometry() { return default(System.Windows.Media.PathGeometry); }
    [System.Security.SecurityCriticalAttribute]
    public virtual System.Windows.Media.PathGeometry GetFlattenedPathGeometry(double tolerance, System.Windows.Media.ToleranceType type) { return default(System.Windows.Media.PathGeometry); }
    public System.Windows.Media.PathGeometry GetOutlinedPathGeometry() { return default(System.Windows.Media.PathGeometry); }
    [System.Security.SecurityCriticalAttribute]
    public virtual System.Windows.Media.PathGeometry GetOutlinedPathGeometry(double tolerance, System.Windows.Media.ToleranceType type) { return default(System.Windows.Media.PathGeometry); }
    public System.Windows.Rect GetRenderBounds(System.Windows.Media.Pen pen) { return default(System.Windows.Rect); }
    public virtual System.Windows.Rect GetRenderBounds(System.Windows.Media.Pen pen, double tolerance, System.Windows.Media.ToleranceType type) { return default(System.Windows.Rect); }
    public System.Windows.Media.PathGeometry GetWidenedPathGeometry(System.Windows.Media.Pen pen) { return default(System.Windows.Media.PathGeometry); }
    [System.Security.SecurityCriticalAttribute]
    public virtual System.Windows.Media.PathGeometry GetWidenedPathGeometry(System.Windows.Media.Pen pen, double tolerance, System.Windows.Media.ToleranceType type) { return default(System.Windows.Media.PathGeometry); }
    public abstract bool IsEmpty();
    public abstract bool MayHaveCurves();
    public static System.Windows.Media.Geometry Parse(string source) { return default(System.Windows.Media.Geometry); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeTransform() { return default(bool); }
    public bool StrokeContains(System.Windows.Media.Pen pen, System.Windows.Point hitPoint) { return default(bool); }
    public bool StrokeContains(System.Windows.Media.Pen pen, System.Windows.Point hitPoint, double tolerance, System.Windows.Media.ToleranceType type) { return default(bool); }
    public System.Windows.Media.IntersectionDetail StrokeContainsWithDetail(System.Windows.Media.Pen pen, System.Windows.Media.Geometry geometry) { return default(System.Windows.Media.IntersectionDetail); }
    public System.Windows.Media.IntersectionDetail StrokeContainsWithDetail(System.Windows.Media.Pen pen, System.Windows.Media.Geometry geometry, double tolerance, System.Windows.Media.ToleranceType type) { return default(System.Windows.Media.IntersectionDetail); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public sealed partial class GeometryCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Geometry>, System.Collections.Generic.IEnumerable<System.Windows.Media.Geometry>, System.Collections.Generic.IList<System.Windows.Media.Geometry>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public GeometryCollection() { }
    public GeometryCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Geometry> collection) { }
    public GeometryCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Geometry this[int index] { get { return default(System.Windows.Media.Geometry); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Geometry>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Geometry value) { }
    public void Clear() { }
    public new System.Windows.Media.GeometryCollection Clone() { return default(System.Windows.Media.GeometryCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.GeometryCollection CloneCurrentValue() { return default(System.Windows.Media.GeometryCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Geometry value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Geometry[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.GeometryCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.GeometryCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Geometry value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Geometry value) { }
    public bool Remove(System.Windows.Media.Geometry value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Geometry> System.Collections.Generic.IEnumerable<System.Windows.Media.Geometry>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Geometry>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Geometry>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Geometry Current { get { return default(System.Windows.Media.Geometry); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public enum GeometryCombineMode {
    Exclude = 3,
    Intersect = 1,
    Union = 0,
    Xor = 2,
  }
  public sealed partial class GeometryConverter : System.ComponentModel.TypeConverter {
    public GeometryConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class GeometryDrawing : System.Windows.Media.Drawing {
    public static readonly System.Windows.DependencyProperty BrushProperty;
    public static readonly System.Windows.DependencyProperty GeometryProperty;
    public static readonly System.Windows.DependencyProperty PenProperty;
    public GeometryDrawing() { }
    public GeometryDrawing(System.Windows.Media.Brush brush, System.Windows.Media.Pen pen, System.Windows.Media.Geometry geometry) { }
    public System.Windows.Media.Brush Brush { get { return default(System.Windows.Media.Brush); } set { } }
    public System.Windows.Media.Geometry Geometry { get { return default(System.Windows.Media.Geometry); } set { } }
    public System.Windows.Media.Pen Pen { get { return default(System.Windows.Media.Pen); } set { } }
    public new System.Windows.Media.GeometryDrawing Clone() { return default(System.Windows.Media.GeometryDrawing); }
    public new System.Windows.Media.GeometryDrawing CloneCurrentValue() { return default(System.Windows.Media.GeometryDrawing); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class GeometryGroup : System.Windows.Media.Geometry {
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    public static readonly System.Windows.DependencyProperty FillRuleProperty;
    public GeometryGroup() { }
    public System.Windows.Media.GeometryCollection Children { get { return default(System.Windows.Media.GeometryCollection); } set { } }
    public System.Windows.Media.FillRule FillRule { get { return default(System.Windows.Media.FillRule); } set { } }
    public new System.Windows.Media.GeometryGroup Clone() { return default(System.Windows.Media.GeometryGroup); }
    public new System.Windows.Media.GeometryGroup CloneCurrentValue() { return default(System.Windows.Media.GeometryGroup); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public override bool IsEmpty() { return default(bool); }
    public override bool MayHaveCurves() { return default(bool); }
  }
  public partial class GeometryHitTestParameters : System.Windows.Media.HitTestParameters {
    public GeometryHitTestParameters(System.Windows.Media.Geometry geometry) { }
    public System.Windows.Media.Geometry HitGeometry { get { return default(System.Windows.Media.Geometry); } }
  }
  public partial class GeometryHitTestResult : System.Windows.Media.HitTestResult {
    public GeometryHitTestResult(System.Windows.Media.Visual visualHit, System.Windows.Media.IntersectionDetail intersectionDetail) { }
    public System.Windows.Media.IntersectionDetail IntersectionDetail { get { return default(System.Windows.Media.IntersectionDetail); } }
    public new System.Windows.Media.Visual VisualHit { get { return default(System.Windows.Media.Visual); } }
  }
  public partial class GlyphRun : System.ComponentModel.ISupportInitialize {
    [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
    public GlyphRun() { }
    public GlyphRun(float pixelsPerDip) { }
    [System.CLSCompliantAttribute(false)]
    [System.ObsoleteAttribute("Use the PixelsPerDip override", false)]
    public GlyphRun(System.Windows.Media.GlyphTypeface glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, System.Collections.Generic.IList<System.UInt16> glyphIndices, System.Windows.Point baselineOrigin, System.Collections.Generic.IList<System.Double> advanceWidths, System.Collections.Generic.IList<System.Windows.Point> glyphOffsets, System.Collections.Generic.IList<System.Char> characters, string deviceFontName, System.Collections.Generic.IList<System.UInt16> clusterMap, System.Collections.Generic.IList<System.Boolean> caretStops, System.Windows.Markup.XmlLanguage language) { }
    [System.CLSCompliantAttribute(false)]
    public GlyphRun(System.Windows.Media.GlyphTypeface glyphTypeface, int bidiLevel, bool isSideways, double renderingEmSize, float pixelsPerDip, System.Collections.Generic.IList<System.UInt16> glyphIndices, System.Windows.Point baselineOrigin, System.Collections.Generic.IList<System.Double> advanceWidths, System.Collections.Generic.IList<System.Windows.Point> glyphOffsets, System.Collections.Generic.IList<System.Char> characters, string deviceFontName, System.Collections.Generic.IList<System.UInt16> clusterMap, System.Collections.Generic.IList<System.Boolean> caretStops, System.Windows.Markup.XmlLanguage language) { }
    [System.CLSCompliantAttribute(false)]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.DoubleIListConverter))]
    public System.Collections.Generic.IList<System.Double> AdvanceWidths { get { return default(System.Collections.Generic.IList<System.Double>); } set { } }
    public System.Windows.Point BaselineOrigin { get { return default(System.Windows.Point); } set { } }
    public int BidiLevel { get { return default(int); } set { } }
    [System.CLSCompliantAttribute(false)]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.BoolIListConverter))]
    public System.Collections.Generic.IList<System.Boolean> CaretStops { get { return default(System.Collections.Generic.IList<System.Boolean>); } set { } }
    [System.CLSCompliantAttribute(false)]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.CharIListConverter))]
    public System.Collections.Generic.IList<System.Char> Characters { get { return default(System.Collections.Generic.IList<System.Char>); } set { } }
    [System.CLSCompliantAttribute(false)]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.UShortIListConverter))]
    public System.Collections.Generic.IList<System.UInt16> ClusterMap { get { return default(System.Collections.Generic.IList<System.UInt16>); } set { } }
    public string DeviceFontName { get { return default(string); } set { } }
    public double FontRenderingEmSize { get { return default(double); } set { } }
    [System.CLSCompliantAttribute(false)]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.UShortIListConverter))]
    public System.Collections.Generic.IList<System.UInt16> GlyphIndices { get { return default(System.Collections.Generic.IList<System.UInt16>); } set { } }
    [System.CLSCompliantAttribute(false)]
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Converters.PointIListConverter))]
    public System.Collections.Generic.IList<System.Windows.Point> GlyphOffsets { get { return default(System.Collections.Generic.IList<System.Windows.Point>); } set { } }
    public System.Windows.Media.GlyphTypeface GlyphTypeface { get { return default(System.Windows.Media.GlyphTypeface); } set { } }
    public bool IsHitTestable { get { return default(bool); } }
    public bool IsSideways { get { return default(bool); } set { } }
    public System.Windows.Markup.XmlLanguage Language { get { return default(System.Windows.Markup.XmlLanguage); } set { } }
    public float PixelsPerDip { get { return default(float); } set { } }
    public System.Windows.Media.Geometry BuildGeometry() { return default(System.Windows.Media.Geometry); }
    public System.Windows.Rect ComputeAlignmentBox() { return default(System.Windows.Rect); }
    public System.Windows.Rect ComputeInkBoundingBox() { return default(System.Windows.Rect); }
    public System.Windows.Media.TextFormatting.CharacterHit GetCaretCharacterHitFromDistance(double distance, out bool isInside) { isInside = default(bool); return default(System.Windows.Media.TextFormatting.CharacterHit); }
    public double GetDistanceFromCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit) { return default(double); }
    public System.Windows.Media.TextFormatting.CharacterHit GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit) { return default(System.Windows.Media.TextFormatting.CharacterHit); }
    public System.Windows.Media.TextFormatting.CharacterHit GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit) { return default(System.Windows.Media.TextFormatting.CharacterHit); }
    void System.ComponentModel.ISupportInitialize.BeginInit() { }
    void System.ComponentModel.ISupportInitialize.EndInit() { }
  }
  public sealed partial class GlyphRunDrawing : System.Windows.Media.Drawing {
    public static readonly System.Windows.DependencyProperty ForegroundBrushProperty;
    public static readonly System.Windows.DependencyProperty GlyphRunProperty;
    public GlyphRunDrawing() { }
    public GlyphRunDrawing(System.Windows.Media.Brush foregroundBrush, System.Windows.Media.GlyphRun glyphRun) { }
    public System.Windows.Media.Brush ForegroundBrush { get { return default(System.Windows.Media.Brush); } set { } }
    public System.Windows.Media.GlyphRun GlyphRun { get { return default(System.Windows.Media.GlyphRun); } set { } }
    public new System.Windows.Media.GlyphRunDrawing Clone() { return default(System.Windows.Media.GlyphRunDrawing); }
    public new System.Windows.Media.GlyphRunDrawing CloneCurrentValue() { return default(System.Windows.Media.GlyphRunDrawing); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public partial class GlyphTypeface : System.ComponentModel.ISupportInitialize {
    public GlyphTypeface() { }
    public GlyphTypeface(System.Uri typefaceSource) { }
    public GlyphTypeface(System.Uri typefaceSource, System.Windows.Media.StyleSimulations styleSimulations) { }
    public System.Collections.Generic.IDictionary<System.UInt16, System.Double> AdvanceHeights { get { return default(System.Collections.Generic.IDictionary<System.UInt16, System.Double>); } }
    public System.Collections.Generic.IDictionary<System.UInt16, System.Double> AdvanceWidths { get { return default(System.Collections.Generic.IDictionary<System.UInt16, System.Double>); } }
    public double Baseline { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(double); } }
    public System.Collections.Generic.IDictionary<System.UInt16, System.Double> BottomSideBearings { get { return default(System.Collections.Generic.IDictionary<System.UInt16, System.Double>); } }
    public double CapsHeight { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(double); } }
    public System.Collections.Generic.IDictionary<System.Int32, System.UInt16> CharacterToGlyphMap { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Int32, System.UInt16>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> Copyrights { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> Descriptions { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> DesignerNames { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> DesignerUrls { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Collections.Generic.IDictionary<System.UInt16, System.Double> DistancesFromHorizontalBaselineToBlackBoxBottom { get { return default(System.Collections.Generic.IDictionary<System.UInt16, System.Double>); } }
    public System.Windows.Media.FontEmbeddingRight EmbeddingRights { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.FontEmbeddingRight); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> FaceNames { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> FamilyNames { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Uri FontUri { [System.Security.SecurityCriticalAttribute]get { return default(System.Uri); } [System.Security.SecurityCriticalAttribute]set { } }
    public int GlyphCount { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(int); } }
    public double Height { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(double); } }
    public System.Collections.Generic.IDictionary<System.UInt16, System.Double> LeftSideBearings { get { return default(System.Collections.Generic.IDictionary<System.UInt16, System.Double>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> LicenseDescriptions { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> ManufacturerNames { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Collections.Generic.IDictionary<System.UInt16, System.Double> RightSideBearings { get { return default(System.Collections.Generic.IDictionary<System.UInt16, System.Double>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> SampleTexts { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Windows.FontStretch Stretch { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(System.Windows.FontStretch); } }
    public double StrikethroughPosition { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(double); } }
    public double StrikethroughThickness { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(double); } }
    public System.Windows.FontStyle Style { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(System.Windows.FontStyle); } }
    public System.Windows.Media.StyleSimulations StyleSimulations { get { return default(System.Windows.Media.StyleSimulations); } set { } }
    public bool Symbol { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(bool); } }
    public System.Collections.Generic.IDictionary<System.UInt16, System.Double> TopSideBearings { get { return default(System.Collections.Generic.IDictionary<System.UInt16, System.Double>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> Trademarks { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public double UnderlinePosition { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(double); } }
    public double UnderlineThickness { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(double); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> VendorUrls { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public double Version { [System.Security.SecurityCriticalAttribute]get { return default(double); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> VersionStrings { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Windows.FontWeight Weight { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(System.Windows.FontWeight); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> Win32FaceNames { get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String> Win32FamilyNames { get { return default(System.Collections.Generic.IDictionary<System.Globalization.CultureInfo, System.String>); } }
    public double XHeight { [System.Security.SecurityCriticalAttribute, System.Security.SecurityTreatAsSafeAttribute]get { return default(double); } }
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public System.Byte[] ComputeSubset(System.Collections.Generic.ICollection<System.UInt16> glyphs) { return default(System.Byte[]); }
    [System.Security.SecurityCriticalAttribute]
    public override bool Equals(object o) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public System.IO.Stream GetFontStream() { return default(System.IO.Stream); }
    [System.CLSCompliantAttribute(false)]
    public System.Windows.Media.Geometry GetGlyphOutline(ushort glyphIndex, double renderingEmSize, double hintingEmSize) { return default(System.Windows.Media.Geometry); }
    [System.Security.SecurityCriticalAttribute]
    public override int GetHashCode() { return default(int); }
    void System.ComponentModel.ISupportInitialize.BeginInit() { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    void System.ComponentModel.ISupportInitialize.EndInit() { }
  }
  [System.Windows.Markup.ContentPropertyAttribute("GradientStops")]
  public abstract partial class GradientBrush : System.Windows.Media.Brush {
    public static readonly System.Windows.DependencyProperty ColorInterpolationModeProperty;
    public static readonly System.Windows.DependencyProperty GradientStopsProperty;
    public static readonly System.Windows.DependencyProperty MappingModeProperty;
    public static readonly System.Windows.DependencyProperty SpreadMethodProperty;
    protected GradientBrush() { }
    protected GradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection) { }
    public System.Windows.Media.ColorInterpolationMode ColorInterpolationMode { get { return default(System.Windows.Media.ColorInterpolationMode); } set { } }
    public System.Windows.Media.GradientStopCollection GradientStops { get { return default(System.Windows.Media.GradientStopCollection); } set { } }
    public System.Windows.Media.BrushMappingMode MappingMode { get { return default(System.Windows.Media.BrushMappingMode); } set { } }
    public System.Windows.Media.GradientSpreadMethod SpreadMethod { get { return default(System.Windows.Media.GradientSpreadMethod); } set { } }
    public new System.Windows.Media.GradientBrush Clone() { return default(System.Windows.Media.GradientBrush); }
    public new System.Windows.Media.GradientBrush CloneCurrentValue() { return default(System.Windows.Media.GradientBrush); }
  }
  public enum GradientSpreadMethod {
    Pad = 0,
    Reflect = 1,
    Repeat = 2,
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public sealed partial class GradientStop : System.Windows.Media.Animation.Animatable, System.IFormattable {
    public static readonly System.Windows.DependencyProperty ColorProperty;
    public static readonly System.Windows.DependencyProperty OffsetProperty;
    public GradientStop() { }
    public GradientStop(System.Windows.Media.Color color, double offset) { }
    public System.Windows.Media.Color Color { get { return default(System.Windows.Media.Color); } set { } }
    public double Offset { get { return default(double); } set { } }
    public new System.Windows.Media.GradientStop Clone() { return default(System.Windows.Media.GradientStop); }
    public new System.Windows.Media.GradientStop CloneCurrentValue() { return default(System.Windows.Media.GradientStop); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public sealed partial class GradientStopCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.GradientStop>, System.Collections.Generic.IEnumerable<System.Windows.Media.GradientStop>, System.Collections.Generic.IList<System.Windows.Media.GradientStop>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable {
    public GradientStopCollection() { }
    public GradientStopCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.GradientStop> collection) { }
    public GradientStopCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.GradientStop this[int index] { get { return default(System.Windows.Media.GradientStop); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.GradientStop>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.GradientStop value) { }
    public void Clear() { }
    public new System.Windows.Media.GradientStopCollection Clone() { return default(System.Windows.Media.GradientStopCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.GradientStopCollection CloneCurrentValue() { return default(System.Windows.Media.GradientStopCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.GradientStop value) { return default(bool); }
    public void CopyTo(System.Windows.Media.GradientStop[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.GradientStopCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.GradientStopCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.GradientStop value) { return default(int); }
    public void Insert(int index, System.Windows.Media.GradientStop value) { }
    public static System.Windows.Media.GradientStopCollection Parse(string source) { return default(System.Windows.Media.GradientStopCollection); }
    public bool Remove(System.Windows.Media.GradientStop value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.GradientStop> System.Collections.Generic.IEnumerable<System.Windows.Media.GradientStop>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.GradientStop>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.GradientStop>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.GradientStop Current { get { return default(System.Windows.Media.GradientStop); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class GuidelineSet : System.Windows.Media.Animation.Animatable {
    public static readonly System.Windows.DependencyProperty GuidelinesXProperty;
    public static readonly System.Windows.DependencyProperty GuidelinesYProperty;
    public GuidelineSet() { }
    public GuidelineSet(System.Double[] guidelinesX, System.Double[] guidelinesY) { }
    public System.Windows.Media.DoubleCollection GuidelinesX { get { return default(System.Windows.Media.DoubleCollection); } set { } }
    public System.Windows.Media.DoubleCollection GuidelinesY { get { return default(System.Windows.Media.DoubleCollection); } set { } }
    public new System.Windows.Media.GuidelineSet Clone() { return default(System.Windows.Media.GuidelineSet); }
    public new System.Windows.Media.GuidelineSet CloneCurrentValue() { return default(System.Windows.Media.GuidelineSet); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public enum HitTestFilterBehavior {
    Continue = 6,
    ContinueSkipChildren = 2,
    ContinueSkipSelf = 4,
    ContinueSkipSelfAndChildren = 0,
    Stop = 8,
  }
  public delegate System.Windows.Media.HitTestFilterBehavior HitTestFilterCallback(System.Windows.DependencyObject potentialHitTestTarget);
  public abstract partial class HitTestParameters {
    internal HitTestParameters() { }
  }
  public abstract partial class HitTestResult {
    internal HitTestResult() { }
    public System.Windows.DependencyObject VisualHit { get { return default(System.Windows.DependencyObject); } }
  }
  public enum HitTestResultBehavior {
    Continue = 1,
    Stop = 0,
  }
  public delegate System.Windows.Media.HitTestResultBehavior HitTestResultCallback(System.Windows.Media.HitTestResult result);
  public partial class HostVisual : System.Windows.Media.ContainerVisual {
    public HostVisual() { }
    protected override System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { return default(System.Windows.Media.GeometryHitTestResult); }
    protected override System.Windows.Media.HitTestResult HitTestCore(System.Windows.Media.PointHitTestParameters hitTestParameters) { return default(System.Windows.Media.HitTestResult); }
  }
  public sealed partial class ImageBrush : System.Windows.Media.TileBrush {
    public static readonly System.Windows.DependencyProperty ImageSourceProperty;
    public ImageBrush() { }
    public ImageBrush(System.Windows.Media.ImageSource image) { }
    public System.Windows.Media.ImageSource ImageSource { get { return default(System.Windows.Media.ImageSource); } set { } }
    public new System.Windows.Media.ImageBrush Clone() { return default(System.Windows.Media.ImageBrush); }
    public new System.Windows.Media.ImageBrush CloneCurrentValue() { return default(System.Windows.Media.ImageBrush); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetContentBounds(out System.Windows.Rect contentBounds) { contentBounds = default(System.Windows.Rect); }
  }
  public sealed partial class ImageDrawing : System.Windows.Media.Drawing {
    public static readonly System.Windows.DependencyProperty ImageSourceProperty;
    public static readonly System.Windows.DependencyProperty RectProperty;
    public ImageDrawing() { }
    public ImageDrawing(System.Windows.Media.ImageSource imageSource, System.Windows.Rect rect) { }
    public System.Windows.Media.ImageSource ImageSource { get { return default(System.Windows.Media.ImageSource); } set { } }
    public System.Windows.Rect Rect { get { return default(System.Windows.Rect); } set { } }
    public new System.Windows.Media.ImageDrawing Clone() { return default(System.Windows.Media.ImageDrawing); }
    public new System.Windows.Media.ImageDrawing CloneCurrentValue() { return default(System.Windows.Media.ImageDrawing); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public abstract partial class ImageMetadata : System.Windows.Freezable {
    internal ImageMetadata() { }
    public new System.Windows.Media.ImageMetadata Clone() { return default(System.Windows.Media.ImageMetadata); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.ImageSourceConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.ImageSourceValueSerializer))]
  public abstract partial class ImageSource : System.Windows.Media.Animation.Animatable, System.IFormattable {
    internal ImageSource() { }
    public abstract double Height { get; }
    public abstract System.Windows.Media.ImageMetadata Metadata { get; }
    public abstract double Width { get; }
    public new System.Windows.Media.ImageSource Clone() { return default(System.Windows.Media.ImageSource); }
    public new System.Windows.Media.ImageSource CloneCurrentValue() { return default(System.Windows.Media.ImageSource); }
    protected static double PixelsToDIPs(double dpi, int pixels) { return default(double); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public partial class ImageSourceConverter : System.ComponentModel.TypeConverter {
    public ImageSourceConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class ImageSourceValueSerializer : System.Windows.Markup.ValueSerializer {
    public ImageSourceValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Int32CollectionConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.Int32CollectionValueSerializer))]
  public sealed partial class Int32Collection : System.Windows.Freezable, System.Collections.Generic.ICollection<System.Int32>, System.Collections.Generic.IEnumerable<System.Int32>, System.Collections.Generic.IList<System.Int32>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable {
    public Int32Collection() { }
    public Int32Collection(System.Collections.Generic.IEnumerable<System.Int32> collection) { }
    public Int32Collection(int capacity) { }
    public int Count { get { return default(int); } }
    public int this[int index] { get { return default(int); } set { } }
    bool System.Collections.Generic.ICollection<System.Int32>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(int value) { }
    public void Clear() { }
    public new System.Windows.Media.Int32Collection Clone() { return default(System.Windows.Media.Int32Collection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Int32Collection CloneCurrentValue() { return default(System.Windows.Media.Int32Collection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(int value) { return default(bool); }
    public void CopyTo(System.Int32[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.Int32Collection.Enumerator GetEnumerator() { return default(System.Windows.Media.Int32Collection.Enumerator); }
    public int IndexOf(int value) { return default(int); }
    public void Insert(int index, int value) { }
    public static System.Windows.Media.Int32Collection Parse(string source) { return default(System.Windows.Media.Int32Collection); }
    public bool Remove(int value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Int32> System.Collections.Generic.IEnumerable<System.Int32>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Int32>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Int32>, System.Collections.IEnumerator, System.IDisposable {
      public int Current { get { return default(int); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class Int32CollectionConverter : System.ComponentModel.TypeConverter {
    public Int32CollectionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public enum IntersectionDetail {
    Empty = 1,
    FullyContains = 3,
    FullyInside = 2,
    Intersects = 4,
    NotCalculated = 0,
  }
  public partial class InvalidWmpVersionException : System.SystemException {
    public InvalidWmpVersionException() { }
    protected InvalidWmpVersionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
    public InvalidWmpVersionException(string message) { }
    public InvalidWmpVersionException(string message, System.Exception innerException) { }
  }
  public sealed partial class LanguageSpecificStringDictionary : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, System.String>>, System.Collections.Generic.IDictionary<System.Windows.Markup.XmlLanguage, System.String>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, System.String>>, System.Collections.ICollection, System.Collections.IDictionary, System.Collections.IEnumerable {
    internal LanguageSpecificStringDictionary() { }
    public int Count { get { return default(int); } }
    public bool IsReadOnly { get { return default(bool); } }
    public string this[System.Windows.Markup.XmlLanguage key] { get { return default(string); } set { } }
    [System.CLSCompliantAttribute(false)]
    public System.Collections.Generic.ICollection<System.Windows.Markup.XmlLanguage> Keys { get { return default(System.Collections.Generic.ICollection<System.Windows.Markup.XmlLanguage>); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IDictionary.IsFixedSize { get { return default(bool); } }
    object System.Collections.IDictionary.this[object key] { get { return default(object); } set { } }
    System.Collections.ICollection System.Collections.IDictionary.Keys { get { return default(System.Collections.ICollection); } }
    System.Collections.ICollection System.Collections.IDictionary.Values { get { return default(System.Collections.ICollection); } }
    [System.CLSCompliantAttribute(false)]
    public System.Collections.Generic.ICollection<System.String> Values { get { return default(System.Collections.Generic.ICollection<System.String>); } }
    [System.CLSCompliantAttribute(false)]
    public void Add(System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, System.String> item) { }
    public void Add(System.Windows.Markup.XmlLanguage key, string value) { }
    public void Clear() { }
    [System.CLSCompliantAttribute(false)]
    public bool Contains(System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, System.String> item) { return default(bool); }
    public bool ContainsKey(System.Windows.Markup.XmlLanguage key) { return default(bool); }
    [System.CLSCompliantAttribute(false)]
    public void CopyTo(System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, System.String>[] array, int index) { }
    [System.CLSCompliantAttribute(false)]
    public System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, System.String>> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, System.String>>); }
    [System.CLSCompliantAttribute(false)]
    public bool Remove(System.Collections.Generic.KeyValuePair<System.Windows.Markup.XmlLanguage, System.String> item) { return default(bool); }
    public bool Remove(System.Windows.Markup.XmlLanguage key) { return default(bool); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    void System.Collections.IDictionary.Add(object key, object value) { }
    bool System.Collections.IDictionary.Contains(object key) { return default(bool); }
    System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() { return default(System.Collections.IDictionaryEnumerator); }
    void System.Collections.IDictionary.Remove(object key) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    public bool TryGetValue(System.Windows.Markup.XmlLanguage key, out string value) { value = default(string); return default(bool); }
  }
  public sealed partial class LinearGradientBrush : System.Windows.Media.GradientBrush {
    public static readonly System.Windows.DependencyProperty EndPointProperty;
    public static readonly System.Windows.DependencyProperty StartPointProperty;
    public LinearGradientBrush() { }
    public LinearGradientBrush(System.Windows.Media.Color startColor, System.Windows.Media.Color endColor, double angle) { }
    public LinearGradientBrush(System.Windows.Media.Color startColor, System.Windows.Media.Color endColor, System.Windows.Point startPoint, System.Windows.Point endPoint) { }
    public LinearGradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection) { }
    public LinearGradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection, double angle) { }
    public LinearGradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection, System.Windows.Point startPoint, System.Windows.Point endPoint) { }
    public System.Windows.Point EndPoint { get { return default(System.Windows.Point); } set { } }
    public System.Windows.Point StartPoint { get { return default(System.Windows.Point); } set { } }
    public new System.Windows.Media.LinearGradientBrush Clone() { return default(System.Windows.Media.LinearGradientBrush); }
    public new System.Windows.Media.LinearGradientBrush CloneCurrentValue() { return default(System.Windows.Media.LinearGradientBrush); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class LineGeometry : System.Windows.Media.Geometry {
    public static readonly System.Windows.DependencyProperty EndPointProperty;
    public static readonly System.Windows.DependencyProperty StartPointProperty;
    public LineGeometry() { }
    public LineGeometry(System.Windows.Point startPoint, System.Windows.Point endPoint) { }
    public LineGeometry(System.Windows.Point startPoint, System.Windows.Point endPoint, System.Windows.Media.Transform transform) { }
    public override System.Windows.Rect Bounds { get { return default(System.Windows.Rect); } }
    public System.Windows.Point EndPoint { get { return default(System.Windows.Point); } set { } }
    public System.Windows.Point StartPoint { get { return default(System.Windows.Point); } set { } }
    public new System.Windows.Media.LineGeometry Clone() { return default(System.Windows.Media.LineGeometry); }
    public new System.Windows.Media.LineGeometry CloneCurrentValue() { return default(System.Windows.Media.LineGeometry); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public override double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { return default(double); }
    public override bool IsEmpty() { return default(bool); }
    public override bool MayHaveCurves() { return default(bool); }
  }
  public sealed partial class LineSegment : System.Windows.Media.PathSegment {
    public static readonly System.Windows.DependencyProperty PointProperty;
    public LineSegment() { }
    public LineSegment(System.Windows.Point point, bool isStroked) { }
    public System.Windows.Point Point { get { return default(System.Windows.Point); } set { } }
    public new System.Windows.Media.LineSegment Clone() { return default(System.Windows.Media.LineSegment); }
    public new System.Windows.Media.LineSegment CloneCurrentValue() { return default(System.Windows.Media.LineSegment); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class MatrixTransform : System.Windows.Media.Transform {
    public static readonly System.Windows.DependencyProperty MatrixProperty;
    public MatrixTransform() { }
    public MatrixTransform(double m11, double m12, double m21, double m22, double offsetX, double offsetY) { }
    public MatrixTransform(System.Windows.Media.Matrix matrix) { }
    public System.Windows.Media.Matrix Matrix { get { return default(System.Windows.Media.Matrix); } set { } }
    public override System.Windows.Media.Matrix Value { get { return default(System.Windows.Media.Matrix); } }
    public new System.Windows.Media.MatrixTransform Clone() { return default(System.Windows.Media.MatrixTransform); }
    public new System.Windows.Media.MatrixTransform CloneCurrentValue() { return default(System.Windows.Media.MatrixTransform); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public partial class MediaClock : System.Windows.Media.Animation.Clock {
    protected internal MediaClock(System.Windows.Media.MediaTimeline media) : base (default(System.Windows.Media.Animation.Timeline)) { }
    public new System.Windows.Media.MediaTimeline Timeline { get { return default(System.Windows.Media.MediaTimeline); } }
    protected override void DiscontinuousTimeMovement() { }
    protected override bool GetCanSlip() { return default(bool); }
    protected override System.TimeSpan GetCurrentTimeCore() { return default(System.TimeSpan); }
    protected override void SpeedChanged() { }
    protected override void Stopped() { }
  }
  public partial class MediaPlayer : System.Windows.Media.Animation.Animatable {
    public MediaPlayer() { }
    public double Balance { get { return default(double); } set { } }
    public double BufferingProgress { get { return default(double); } }
    public bool CanPause { get { return default(bool); } }
    public System.Windows.Media.MediaClock Clock { get { return default(System.Windows.Media.MediaClock); } set { } }
    public double DownloadProgress { get { return default(double); } }
    public bool HasAudio { get { return default(bool); } }
    public bool HasVideo { get { return default(bool); } }
    public bool IsBuffering { get { return default(bool); } }
    public bool IsMuted { get { return default(bool); } set { } }
    public System.Windows.Duration NaturalDuration { get { return default(System.Windows.Duration); } }
    public int NaturalVideoHeight { get { return default(int); } }
    public int NaturalVideoWidth { get { return default(int); } }
    public System.TimeSpan Position { get { return default(System.TimeSpan); } set { } }
    public bool ScrubbingEnabled { get { return default(bool); } set { } }
    public System.Uri Source { get { return default(System.Uri); } }
    public double SpeedRatio { get { return default(double); } set { } }
    public double Volume { get { return default(double); } set { } }
    public event System.EventHandler BufferingEnded { add { } remove { } }
    public event System.EventHandler BufferingStarted { add { } remove { } }
    public event System.EventHandler MediaEnded { add { } remove { } }
    public event System.EventHandler<System.Windows.Media.ExceptionEventArgs> MediaFailed { add { } remove { } }
    public event System.EventHandler MediaOpened { add { } remove { } }
    public event System.EventHandler<System.Windows.Media.MediaScriptCommandEventArgs> ScriptCommand { add { } remove { } }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public void Close() { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public void Open(System.Uri source) { }
    public void Pause() { }
    public void Play() { }
    protected new void ReadPreamble() { }
    public void Stop() { }
    protected new void WritePreamble() { }
  }
  public sealed partial class MediaScriptCommandEventArgs : System.EventArgs {
    internal MediaScriptCommandEventArgs() { }
    public string ParameterType { get { return default(string); } }
    public string ParameterValue { get { return default(string); } }
  }
  public partial class MediaTimeline : System.Windows.Media.Animation.Timeline, System.Windows.Markup.IUriContext {
    public static readonly System.Windows.DependencyProperty SourceProperty;
    public MediaTimeline() { }
    public MediaTimeline(System.Nullable<System.TimeSpan> beginTime) { }
    public MediaTimeline(System.Nullable<System.TimeSpan> beginTime, System.Windows.Duration duration) { }
    public MediaTimeline(System.Nullable<System.TimeSpan> beginTime, System.Windows.Duration duration, System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { }
    public MediaTimeline(System.Uri source) { }
    public System.Uri Source { get { return default(System.Uri); } set { } }
    System.Uri System.Windows.Markup.IUriContext.BaseUri { get { return default(System.Uri); } set { } }
    protected internal override System.Windows.Media.Animation.Clock AllocateClock() { return default(System.Windows.Media.Animation.Clock); }
    public new System.Windows.Media.MediaTimeline Clone() { return default(System.Windows.Media.MediaTimeline); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.MediaTimeline CloneCurrentValue() { return default(System.Windows.Media.MediaTimeline); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.MediaClock CreateClock() { return default(System.Windows.Media.MediaClock); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    public override string ToString() { return default(string); }
  }
  public enum NumberCultureSource {
    Override = 2,
    Text = 0,
    User = 1,
  }
  public partial class NumberSubstitution {
    public static readonly System.Windows.DependencyProperty CultureOverrideProperty;
    public static readonly System.Windows.DependencyProperty CultureSourceProperty;
    public static readonly System.Windows.DependencyProperty SubstitutionProperty;
    public NumberSubstitution() { }
    public NumberSubstitution(System.Windows.Media.NumberCultureSource source, System.Globalization.CultureInfo cultureOverride, System.Windows.Media.NumberSubstitutionMethod substitution) { }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]
    public System.Globalization.CultureInfo CultureOverride { get { return default(System.Globalization.CultureInfo); } set { } }
    public System.Windows.Media.NumberCultureSource CultureSource { get { return default(System.Windows.Media.NumberCultureSource); } set { } }
    public System.Windows.Media.NumberSubstitutionMethod Substitution { get { return default(System.Windows.Media.NumberSubstitutionMethod); } set { } }
    public override bool Equals(object obj) { return default(bool); }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.CultureInfoIetfLanguageTagConverter))]
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Globalization.CultureInfo GetCultureOverride(System.Windows.DependencyObject target) { return default(System.Globalization.CultureInfo); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Windows.Media.NumberCultureSource GetCultureSource(System.Windows.DependencyObject target) { return default(System.Windows.Media.NumberCultureSource); }
    public override int GetHashCode() { return default(int); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Windows.Media.NumberSubstitutionMethod GetSubstitution(System.Windows.DependencyObject target) { return default(System.Windows.Media.NumberSubstitutionMethod); }
    public static void SetCultureOverride(System.Windows.DependencyObject target, System.Globalization.CultureInfo value) { }
    public static void SetCultureSource(System.Windows.DependencyObject target, System.Windows.Media.NumberCultureSource value) { }
    public static void SetSubstitution(System.Windows.DependencyObject target, System.Windows.Media.NumberSubstitutionMethod value) { }
  }
  public enum NumberSubstitutionMethod {
    AsCulture = 0,
    Context = 1,
    European = 2,
    NativeNational = 3,
    Traditional = 4,
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  [System.Windows.Markup.ContentPropertyAttribute("Segments")]
  public sealed partial class PathFigure : System.Windows.Media.Animation.Animatable, System.IFormattable {
    public static readonly System.Windows.DependencyProperty IsClosedProperty;
    public static readonly System.Windows.DependencyProperty IsFilledProperty;
    public static readonly System.Windows.DependencyProperty SegmentsProperty;
    public static readonly System.Windows.DependencyProperty StartPointProperty;
    public PathFigure() { }
    public PathFigure(System.Windows.Point start, System.Collections.Generic.IEnumerable<System.Windows.Media.PathSegment> segments, bool closed) { }
    public bool IsClosed { get { return default(bool); } set { } }
    public bool IsFilled { get { return default(bool); } set { } }
    public System.Windows.Media.PathSegmentCollection Segments { get { return default(System.Windows.Media.PathSegmentCollection); } set { } }
    public System.Windows.Point StartPoint { get { return default(System.Windows.Point); } set { } }
    public new System.Windows.Media.PathFigure Clone() { return default(System.Windows.Media.PathFigure); }
    public new System.Windows.Media.PathFigure CloneCurrentValue() { return default(System.Windows.Media.PathFigure); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public System.Windows.Media.PathFigure GetFlattenedPathFigure() { return default(System.Windows.Media.PathFigure); }
    public System.Windows.Media.PathFigure GetFlattenedPathFigure(double tolerance, System.Windows.Media.ToleranceType type) { return default(System.Windows.Media.PathFigure); }
    public bool MayHaveCurves() { return default(bool); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.PathFigureCollectionConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.PathFigureCollectionValueSerializer))]
  public sealed partial class PathFigureCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.PathFigure>, System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure>, System.Collections.Generic.IList<System.Windows.Media.PathFigure>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable {
    public PathFigureCollection() { }
    public PathFigureCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure> collection) { }
    public PathFigureCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.PathFigure this[int index] { get { return default(System.Windows.Media.PathFigure); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.PathFigure>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.PathFigure value) { }
    public void Clear() { }
    public new System.Windows.Media.PathFigureCollection Clone() { return default(System.Windows.Media.PathFigureCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.PathFigureCollection CloneCurrentValue() { return default(System.Windows.Media.PathFigureCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.PathFigure value) { return default(bool); }
    public void CopyTo(System.Windows.Media.PathFigure[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.PathFigureCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.PathFigureCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.PathFigure value) { return default(int); }
    public void Insert(int index, System.Windows.Media.PathFigure value) { }
    public static System.Windows.Media.PathFigureCollection Parse(string source) { return default(System.Windows.Media.PathFigureCollection); }
    public bool Remove(System.Windows.Media.PathFigure value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.PathFigure> System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.PathFigure>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.PathFigure>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.PathFigure Current { get { return default(System.Windows.Media.PathFigure); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class PathFigureCollectionConverter : System.ComponentModel.TypeConverter {
    public PathFigureCollectionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Figures")]
  public sealed partial class PathGeometry : System.Windows.Media.Geometry {
    public static readonly System.Windows.DependencyProperty FiguresProperty;
    public static readonly System.Windows.DependencyProperty FillRuleProperty;
    public PathGeometry() { }
    public PathGeometry(System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure> figures) { }
    public PathGeometry(System.Collections.Generic.IEnumerable<System.Windows.Media.PathFigure> figures, System.Windows.Media.FillRule fillRule, System.Windows.Media.Transform transform) { }
    public override System.Windows.Rect Bounds { get { return default(System.Windows.Rect); } }
    public System.Windows.Media.PathFigureCollection Figures { get { return default(System.Windows.Media.PathFigureCollection); } set { } }
    public System.Windows.Media.FillRule FillRule { get { return default(System.Windows.Media.FillRule); } set { } }
    public void AddGeometry(System.Windows.Media.Geometry geometry) { }
    public void Clear() { }
    public new System.Windows.Media.PathGeometry Clone() { return default(System.Windows.Media.PathGeometry); }
    public new System.Windows.Media.PathGeometry CloneCurrentValue() { return default(System.Windows.Media.PathGeometry); }
    public static System.Windows.Media.PathGeometry CreateFromGeometry(System.Windows.Media.Geometry geometry) { return default(System.Windows.Media.PathGeometry); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.Security.SecurityCriticalAttribute]
    public void GetPointAtFractionLength(double progress, out System.Windows.Point point, out System.Windows.Point tangent) { point = default(System.Windows.Point); tangent = default(System.Windows.Point); }
    public override bool IsEmpty() { return default(bool); }
    public override bool MayHaveCurves() { return default(bool); }
    protected override void OnChanged() { }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public abstract partial class PathSegment : System.Windows.Media.Animation.Animatable {
    internal PathSegment() { }
    public static readonly System.Windows.DependencyProperty IsSmoothJoinProperty;
    public static readonly System.Windows.DependencyProperty IsStrokedProperty;
    public bool IsSmoothJoin { get { return default(bool); } set { } }
    public bool IsStroked { get { return default(bool); } set { } }
    public new System.Windows.Media.PathSegment Clone() { return default(System.Windows.Media.PathSegment); }
    public new System.Windows.Media.PathSegment CloneCurrentValue() { return default(System.Windows.Media.PathSegment); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public sealed partial class PathSegmentCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.PathSegment>, System.Collections.Generic.IEnumerable<System.Windows.Media.PathSegment>, System.Collections.Generic.IList<System.Windows.Media.PathSegment>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public PathSegmentCollection() { }
    public PathSegmentCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.PathSegment> collection) { }
    public PathSegmentCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.PathSegment this[int index] { get { return default(System.Windows.Media.PathSegment); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.PathSegment>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.PathSegment value) { }
    public void Clear() { }
    public new System.Windows.Media.PathSegmentCollection Clone() { return default(System.Windows.Media.PathSegmentCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.PathSegmentCollection CloneCurrentValue() { return default(System.Windows.Media.PathSegmentCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.PathSegment value) { return default(bool); }
    public void CopyTo(System.Windows.Media.PathSegment[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.PathSegmentCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.PathSegmentCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.PathSegment value) { return default(int); }
    public void Insert(int index, System.Windows.Media.PathSegment value) { }
    public bool Remove(System.Windows.Media.PathSegment value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.PathSegment> System.Collections.Generic.IEnumerable<System.Windows.Media.PathSegment>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.PathSegment>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.PathSegment>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.PathSegment Current { get { return default(System.Windows.Media.PathSegment); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public sealed partial class Pen : System.Windows.Media.Animation.Animatable {
    public static readonly System.Windows.DependencyProperty BrushProperty;
    public static readonly System.Windows.DependencyProperty DashCapProperty;
    public static readonly System.Windows.DependencyProperty DashStyleProperty;
    public static readonly System.Windows.DependencyProperty EndLineCapProperty;
    public static readonly System.Windows.DependencyProperty LineJoinProperty;
    public static readonly System.Windows.DependencyProperty MiterLimitProperty;
    public static readonly System.Windows.DependencyProperty StartLineCapProperty;
    public static readonly System.Windows.DependencyProperty ThicknessProperty;
    public Pen() { }
    public Pen(System.Windows.Media.Brush brush, double thickness) { }
    public System.Windows.Media.Brush Brush { get { return default(System.Windows.Media.Brush); } set { } }
    public System.Windows.Media.PenLineCap DashCap { get { return default(System.Windows.Media.PenLineCap); } set { } }
    public System.Windows.Media.DashStyle DashStyle { get { return default(System.Windows.Media.DashStyle); } set { } }
    public System.Windows.Media.PenLineCap EndLineCap { get { return default(System.Windows.Media.PenLineCap); } set { } }
    public System.Windows.Media.PenLineJoin LineJoin { get { return default(System.Windows.Media.PenLineJoin); } set { } }
    public double MiterLimit { get { return default(double); } set { } }
    public System.Windows.Media.PenLineCap StartLineCap { get { return default(System.Windows.Media.PenLineCap); } set { } }
    public double Thickness { get { return default(double); } set { } }
    public new System.Windows.Media.Pen Clone() { return default(System.Windows.Media.Pen); }
    public new System.Windows.Media.Pen CloneCurrentValue() { return default(System.Windows.Media.Pen); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public enum PenLineCap {
    Flat = 0,
    Round = 2,
    Square = 1,
    Triangle = 3,
  }
  public enum PenLineJoin {
    Bevel = 1,
    Miter = 0,
    Round = 2,
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.PixelFormatConverter))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct PixelFormat : System.IEquatable<System.Windows.Media.PixelFormat> {
    public int BitsPerPixel { get { return default(int); } }
    public System.Collections.Generic.IList<System.Windows.Media.PixelFormatChannelMask> Masks { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.Generic.IList<System.Windows.Media.PixelFormatChannelMask>); } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.Media.PixelFormat pixelFormat) { return default(bool); }
    public static bool Equals(System.Windows.Media.PixelFormat left, System.Windows.Media.PixelFormat right) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.PixelFormat left, System.Windows.Media.PixelFormat right) { return default(bool); }
    public static bool operator !=(System.Windows.Media.PixelFormat left, System.Windows.Media.PixelFormat right) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct PixelFormatChannelMask {
    public System.Collections.Generic.IList<System.Byte> Mask { get { return default(System.Collections.Generic.IList<System.Byte>); } }
    public override bool Equals(object obj) { return default(bool); }
    public static bool Equals(System.Windows.Media.PixelFormatChannelMask left, System.Windows.Media.PixelFormatChannelMask right) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.PixelFormatChannelMask left, System.Windows.Media.PixelFormatChannelMask right) { return default(bool); }
    public static bool operator !=(System.Windows.Media.PixelFormatChannelMask left, System.Windows.Media.PixelFormatChannelMask right) { return default(bool); }
  }
  public sealed partial class PixelFormatConverter : System.ComponentModel.TypeConverter {
    public PixelFormatConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object o) { return default(object); }
    public new object ConvertFromString(string value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public static partial class PixelFormats {
    public static System.Windows.Media.PixelFormat Bgr101010 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Bgr24 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Bgr32 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Bgr555 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Bgr565 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Bgra32 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat BlackWhite { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Cmyk32 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Default { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Gray16 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Gray2 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Gray32Float { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Gray4 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Gray8 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Indexed1 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Indexed2 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Indexed4 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Indexed8 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Pbgra32 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Prgba128Float { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Prgba64 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Rgb128Float { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Rgb24 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Rgb48 { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Rgba128Float { get { return default(System.Windows.Media.PixelFormat); } }
    public static System.Windows.Media.PixelFormat Rgba64 { get { return default(System.Windows.Media.PixelFormat); } }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.PointCollectionConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.PointCollectionValueSerializer))]
  public sealed partial class PointCollection : System.Windows.Freezable, System.Collections.Generic.ICollection<System.Windows.Point>, System.Collections.Generic.IEnumerable<System.Windows.Point>, System.Collections.Generic.IList<System.Windows.Point>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable {
    public PointCollection() { }
    public PointCollection(System.Collections.Generic.IEnumerable<System.Windows.Point> collection) { }
    public PointCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Point this[int index] { get { return default(System.Windows.Point); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Point>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Point value) { }
    public void Clear() { }
    public new System.Windows.Media.PointCollection Clone() { return default(System.Windows.Media.PointCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.PointCollection CloneCurrentValue() { return default(System.Windows.Media.PointCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Point value) { return default(bool); }
    public void CopyTo(System.Windows.Point[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.PointCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.PointCollection.Enumerator); }
    public int IndexOf(System.Windows.Point value) { return default(int); }
    public void Insert(int index, System.Windows.Point value) { }
    public static System.Windows.Media.PointCollection Parse(string source) { return default(System.Windows.Media.PointCollection); }
    public bool Remove(System.Windows.Point value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Point> System.Collections.Generic.IEnumerable<System.Windows.Point>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Point>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Point>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Point Current { get { return default(System.Windows.Point); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class PointCollectionConverter : System.ComponentModel.TypeConverter {
    public PointCollectionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public partial class PointHitTestParameters : System.Windows.Media.HitTestParameters {
    public PointHitTestParameters(System.Windows.Point point) { }
    public System.Windows.Point HitPoint { get { return default(System.Windows.Point); } }
  }
  public partial class PointHitTestResult : System.Windows.Media.HitTestResult {
    public PointHitTestResult(System.Windows.Media.Visual visualHit, System.Windows.Point pointHit) { }
    public System.Windows.Point PointHit { get { return default(System.Windows.Point); } }
    public new System.Windows.Media.Visual VisualHit { get { return default(System.Windows.Media.Visual); } }
  }
  public sealed partial class PolyBezierSegment : System.Windows.Media.PathSegment {
    public static readonly System.Windows.DependencyProperty PointsProperty;
    public PolyBezierSegment() { }
    public PolyBezierSegment(System.Collections.Generic.IEnumerable<System.Windows.Point> points, bool isStroked) { }
    public System.Windows.Media.PointCollection Points { get { return default(System.Windows.Media.PointCollection); } set { } }
    public new System.Windows.Media.PolyBezierSegment Clone() { return default(System.Windows.Media.PolyBezierSegment); }
    public new System.Windows.Media.PolyBezierSegment CloneCurrentValue() { return default(System.Windows.Media.PolyBezierSegment); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class PolyLineSegment : System.Windows.Media.PathSegment {
    public static readonly System.Windows.DependencyProperty PointsProperty;
    public PolyLineSegment() { }
    public PolyLineSegment(System.Collections.Generic.IEnumerable<System.Windows.Point> points, bool isStroked) { }
    public System.Windows.Media.PointCollection Points { get { return default(System.Windows.Media.PointCollection); } set { } }
    public new System.Windows.Media.PolyLineSegment Clone() { return default(System.Windows.Media.PolyLineSegment); }
    public new System.Windows.Media.PolyLineSegment CloneCurrentValue() { return default(System.Windows.Media.PolyLineSegment); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class PolyQuadraticBezierSegment : System.Windows.Media.PathSegment {
    public static readonly System.Windows.DependencyProperty PointsProperty;
    public PolyQuadraticBezierSegment() { }
    public PolyQuadraticBezierSegment(System.Collections.Generic.IEnumerable<System.Windows.Point> points, bool isStroked) { }
    public System.Windows.Media.PointCollection Points { get { return default(System.Windows.Media.PointCollection); } set { } }
    public new System.Windows.Media.PolyQuadraticBezierSegment Clone() { return default(System.Windows.Media.PolyQuadraticBezierSegment); }
    public new System.Windows.Media.PolyQuadraticBezierSegment CloneCurrentValue() { return default(System.Windows.Media.PolyQuadraticBezierSegment); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class QuadraticBezierSegment : System.Windows.Media.PathSegment {
    public static readonly System.Windows.DependencyProperty Point1Property;
    public static readonly System.Windows.DependencyProperty Point2Property;
    public QuadraticBezierSegment() { }
    public QuadraticBezierSegment(System.Windows.Point point1, System.Windows.Point point2, bool isStroked) { }
    public System.Windows.Point Point1 { get { return default(System.Windows.Point); } set { } }
    public System.Windows.Point Point2 { get { return default(System.Windows.Point); } set { } }
    public new System.Windows.Media.QuadraticBezierSegment Clone() { return default(System.Windows.Media.QuadraticBezierSegment); }
    public new System.Windows.Media.QuadraticBezierSegment CloneCurrentValue() { return default(System.Windows.Media.QuadraticBezierSegment); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class RadialGradientBrush : System.Windows.Media.GradientBrush {
    public static readonly System.Windows.DependencyProperty CenterProperty;
    public static readonly System.Windows.DependencyProperty GradientOriginProperty;
    public static readonly System.Windows.DependencyProperty RadiusXProperty;
    public static readonly System.Windows.DependencyProperty RadiusYProperty;
    public RadialGradientBrush() { }
    public RadialGradientBrush(System.Windows.Media.Color startColor, System.Windows.Media.Color endColor) { }
    public RadialGradientBrush(System.Windows.Media.GradientStopCollection gradientStopCollection) { }
    public System.Windows.Point Center { get { return default(System.Windows.Point); } set { } }
    public System.Windows.Point GradientOrigin { get { return default(System.Windows.Point); } set { } }
    public double RadiusX { get { return default(double); } set { } }
    public double RadiusY { get { return default(double); } set { } }
    public new System.Windows.Media.RadialGradientBrush Clone() { return default(System.Windows.Media.RadialGradientBrush); }
    public new System.Windows.Media.RadialGradientBrush CloneCurrentValue() { return default(System.Windows.Media.RadialGradientBrush); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class RectangleGeometry : System.Windows.Media.Geometry {
    public static readonly System.Windows.DependencyProperty RadiusXProperty;
    public static readonly System.Windows.DependencyProperty RadiusYProperty;
    public static readonly System.Windows.DependencyProperty RectProperty;
    public RectangleGeometry() { }
    public RectangleGeometry(System.Windows.Rect rect) { }
    public RectangleGeometry(System.Windows.Rect rect, double radiusX, double radiusY) { }
    public RectangleGeometry(System.Windows.Rect rect, double radiusX, double radiusY, System.Windows.Media.Transform transform) { }
    public override System.Windows.Rect Bounds { get { return default(System.Windows.Rect); } }
    public double RadiusX { get { return default(double); } set { } }
    public double RadiusY { get { return default(double); } set { } }
    public System.Windows.Rect Rect { get { return default(System.Windows.Rect); } set { } }
    public new System.Windows.Media.RectangleGeometry Clone() { return default(System.Windows.Media.RectangleGeometry); }
    public new System.Windows.Media.RectangleGeometry CloneCurrentValue() { return default(System.Windows.Media.RectangleGeometry); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public override double GetArea(double tolerance, System.Windows.Media.ToleranceType type) { return default(double); }
    public override bool IsEmpty() { return default(bool); }
    public override bool MayHaveCurves() { return default(bool); }
  }
  public static partial class RenderCapability {
    [System.ObsoleteAttribute("IsShaderEffectSoftwareRenderingSupported property is deprecated.  Use IsPixelShaderVersionSupportedInSoftware static method instead.")]
    public static bool IsShaderEffectSoftwareRenderingSupported { get { return default(bool); } }
    public static System.Windows.Size MaxHardwareTextureSize { get { return default(System.Windows.Size); } }
    public static int Tier { get { return default(int); } }
    public static event System.EventHandler TierChanged { add { } remove { } }
    public static bool IsPixelShaderVersionSupported(short majorVersionRequested, short minorVersionRequested) { return default(bool); }
    public static bool IsPixelShaderVersionSupportedInSoftware(short majorVersionRequested, short minorVersionRequested) { return default(bool); }
    public static int MaxPixelShaderInstructionSlots(short majorVersionRequested, short minorVersionRequested) { return default(int); }
  }
  public partial class RenderingEventArgs : System.EventArgs {
    internal RenderingEventArgs() { }
    public System.TimeSpan RenderingTime { get { return default(System.TimeSpan); } }
  }
  public static partial class RenderOptions {
    public static readonly System.Windows.DependencyProperty BitmapScalingModeProperty;
    public static readonly System.Windows.DependencyProperty CacheInvalidationThresholdMaximumProperty;
    public static readonly System.Windows.DependencyProperty CacheInvalidationThresholdMinimumProperty;
    public static readonly System.Windows.DependencyProperty CachingHintProperty;
    public static readonly System.Windows.DependencyProperty ClearTypeHintProperty;
    public static readonly System.Windows.DependencyProperty EdgeModeProperty;
    public static System.Windows.Interop.RenderMode ProcessRenderMode { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Interop.RenderMode); } [System.Security.SecurityCriticalAttribute]set { } }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Windows.Media.BitmapScalingMode GetBitmapScalingMode(System.Windows.DependencyObject target) { return default(System.Windows.Media.BitmapScalingMode); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Media.TileBrush))]
    public static double GetCacheInvalidationThresholdMaximum(System.Windows.DependencyObject target) { return default(double); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Media.TileBrush))]
    public static double GetCacheInvalidationThresholdMinimum(System.Windows.DependencyObject target) { return default(double); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.Media.TileBrush))]
    public static System.Windows.Media.CachingHint GetCachingHint(System.Windows.DependencyObject target) { return default(System.Windows.Media.CachingHint); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Windows.Media.ClearTypeHint GetClearTypeHint(System.Windows.DependencyObject target) { return default(System.Windows.Media.ClearTypeHint); }
    [System.Windows.AttachedPropertyBrowsableForTypeAttribute(typeof(System.Windows.DependencyObject))]
    public static System.Windows.Media.EdgeMode GetEdgeMode(System.Windows.DependencyObject target) { return default(System.Windows.Media.EdgeMode); }
    public static void SetBitmapScalingMode(System.Windows.DependencyObject target, System.Windows.Media.BitmapScalingMode bitmapScalingMode) { }
    public static void SetCacheInvalidationThresholdMaximum(System.Windows.DependencyObject target, double cacheInvalidationThresholdMaximum) { }
    public static void SetCacheInvalidationThresholdMinimum(System.Windows.DependencyObject target, double cacheInvalidationThresholdMinimum) { }
    public static void SetCachingHint(System.Windows.DependencyObject target, System.Windows.Media.CachingHint cachingHint) { }
    public static void SetClearTypeHint(System.Windows.DependencyObject target, System.Windows.Media.ClearTypeHint clearTypeHint) { }
    public static void SetEdgeMode(System.Windows.DependencyObject target, System.Windows.Media.EdgeMode edgeMode) { }
  }
  public sealed partial class RequestCachePolicyConverter : System.ComponentModel.TypeConverter {
    public RequestCachePolicyConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class RotateTransform : System.Windows.Media.Transform {
    public static readonly System.Windows.DependencyProperty AngleProperty;
    public static readonly System.Windows.DependencyProperty CenterXProperty;
    public static readonly System.Windows.DependencyProperty CenterYProperty;
    public RotateTransform() { }
    public RotateTransform(double angle) { }
    public RotateTransform(double angle, double centerX, double centerY) { }
    public double Angle { get { return default(double); } set { } }
    public double CenterX { get { return default(double); } set { } }
    public double CenterY { get { return default(double); } set { } }
    public override System.Windows.Media.Matrix Value { get { return default(System.Windows.Media.Matrix); } }
    public new System.Windows.Media.RotateTransform Clone() { return default(System.Windows.Media.RotateTransform); }
    public new System.Windows.Media.RotateTransform CloneCurrentValue() { return default(System.Windows.Media.RotateTransform); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class ScaleTransform : System.Windows.Media.Transform {
    public static readonly System.Windows.DependencyProperty CenterXProperty;
    public static readonly System.Windows.DependencyProperty CenterYProperty;
    public static readonly System.Windows.DependencyProperty ScaleXProperty;
    public static readonly System.Windows.DependencyProperty ScaleYProperty;
    public ScaleTransform() { }
    public ScaleTransform(double scaleX, double scaleY) { }
    public ScaleTransform(double scaleX, double scaleY, double centerX, double centerY) { }
    public double CenterX { get { return default(double); } set { } }
    public double CenterY { get { return default(double); } set { } }
    public double ScaleX { get { return default(double); } set { } }
    public double ScaleY { get { return default(double); } set { } }
    public override System.Windows.Media.Matrix Value { get { return default(System.Windows.Media.Matrix); } }
    public new System.Windows.Media.ScaleTransform Clone() { return default(System.Windows.Media.ScaleTransform); }
    public new System.Windows.Media.ScaleTransform CloneCurrentValue() { return default(System.Windows.Media.ScaleTransform); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class SkewTransform : System.Windows.Media.Transform {
    public static readonly System.Windows.DependencyProperty AngleXProperty;
    public static readonly System.Windows.DependencyProperty AngleYProperty;
    public static readonly System.Windows.DependencyProperty CenterXProperty;
    public static readonly System.Windows.DependencyProperty CenterYProperty;
    public SkewTransform() { }
    public SkewTransform(double angleX, double angleY) { }
    public SkewTransform(double angleX, double angleY, double centerX, double centerY) { }
    public double AngleX { get { return default(double); } set { } }
    public double AngleY { get { return default(double); } set { } }
    public double CenterX { get { return default(double); } set { } }
    public double CenterY { get { return default(double); } set { } }
    public override System.Windows.Media.Matrix Value { get { return default(System.Windows.Media.Matrix); } }
    public new System.Windows.Media.SkewTransform Clone() { return default(System.Windows.Media.SkewTransform); }
    public new System.Windows.Media.SkewTransform CloneCurrentValue() { return default(System.Windows.Media.SkewTransform); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class SolidColorBrush : System.Windows.Media.Brush {
    public static readonly System.Windows.DependencyProperty ColorProperty;
    public SolidColorBrush() { }
    public SolidColorBrush(System.Windows.Media.Color color) { }
    public System.Windows.Media.Color Color { get { return default(System.Windows.Media.Color); } set { } }
    public new System.Windows.Media.SolidColorBrush Clone() { return default(System.Windows.Media.SolidColorBrush); }
    public new System.Windows.Media.SolidColorBrush CloneCurrentValue() { return default(System.Windows.Media.SolidColorBrush); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public static object DeserializeFrom(System.IO.BinaryReader reader) { return default(object); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.GeometryConverter))]
  public sealed partial class StreamGeometry : System.Windows.Media.Geometry {
    public static readonly System.Windows.DependencyProperty FillRuleProperty;
    public StreamGeometry() { }
    public override System.Windows.Rect Bounds { get { return default(System.Windows.Rect); } }
    public System.Windows.Media.FillRule FillRule { get { return default(System.Windows.Media.FillRule); } set { } }
    public void Clear() { }
    public new System.Windows.Media.StreamGeometry Clone() { return default(System.Windows.Media.StreamGeometry); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.StreamGeometry CloneCurrentValue() { return default(System.Windows.Media.StreamGeometry); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    [System.Security.SecurityCriticalAttribute]
    public override bool IsEmpty() { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public override bool MayHaveCurves() { return default(bool); }
    protected override void OnChanged() { }
    public System.Windows.Media.StreamGeometryContext Open() { return default(System.Windows.Media.StreamGeometryContext); }
  }
  public abstract partial class StreamGeometryContext : System.Windows.Threading.DispatcherObject, System.IDisposable {
    internal StreamGeometryContext() { }
    public abstract void ArcTo(System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked, bool isSmoothJoin);
    public abstract void BeginFigure(System.Windows.Point startPoint, bool isFilled, bool isClosed);
    public abstract void BezierTo(System.Windows.Point point1, System.Windows.Point point2, System.Windows.Point point3, bool isStroked, bool isSmoothJoin);
    public virtual void Close() { }
    public abstract void LineTo(System.Windows.Point point, bool isStroked, bool isSmoothJoin);
    public abstract void PolyBezierTo(System.Collections.Generic.IList<System.Windows.Point> points, bool isStroked, bool isSmoothJoin);
    public abstract void PolyLineTo(System.Collections.Generic.IList<System.Windows.Point> points, bool isStroked, bool isSmoothJoin);
    public abstract void PolyQuadraticBezierTo(System.Collections.Generic.IList<System.Windows.Point> points, bool isStroked, bool isSmoothJoin);
    public abstract void QuadraticBezierTo(System.Windows.Point point1, System.Windows.Point point2, bool isStroked, bool isSmoothJoin);
    void System.IDisposable.Dispose() { }
  }
  public enum Stretch {
    Fill = 1,
    None = 0,
    Uniform = 2,
    UniformToFill = 3,
  }
  [System.FlagsAttribute]
  public enum StyleSimulations {
    BoldItalicSimulation = 3,
    BoldSimulation = 1,
    ItalicSimulation = 2,
    None = 0,
  }
  public enum SweepDirection {
    Clockwise = 1,
    Counterclockwise = 0,
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public sealed partial class TextEffect : System.Windows.Media.Animation.Animatable {
    public static readonly System.Windows.DependencyProperty ClipProperty;
    public static readonly System.Windows.DependencyProperty ForegroundProperty;
    public static readonly System.Windows.DependencyProperty PositionCountProperty;
    public static readonly System.Windows.DependencyProperty PositionStartProperty;
    public static readonly System.Windows.DependencyProperty TransformProperty;
    public TextEffect() { }
    public TextEffect(System.Windows.Media.Transform transform, System.Windows.Media.Brush foreground, System.Windows.Media.Geometry clip, int positionStart, int positionCount) { }
    public System.Windows.Media.Geometry Clip { get { return default(System.Windows.Media.Geometry); } set { } }
    public System.Windows.Media.Brush Foreground { get { return default(System.Windows.Media.Brush); } set { } }
    public int PositionCount { get { return default(int); } set { } }
    public int PositionStart { get { return default(int); } set { } }
    public System.Windows.Media.Transform Transform { get { return default(System.Windows.Media.Transform); } set { } }
    public new System.Windows.Media.TextEffect Clone() { return default(System.Windows.Media.TextEffect); }
    public new System.Windows.Media.TextEffect CloneCurrentValue() { return default(System.Windows.Media.TextEffect); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public sealed partial class TextEffectCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.TextEffect>, System.Collections.Generic.IEnumerable<System.Windows.Media.TextEffect>, System.Collections.Generic.IList<System.Windows.Media.TextEffect>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public TextEffectCollection() { }
    public TextEffectCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.TextEffect> collection) { }
    public TextEffectCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.TextEffect this[int index] { get { return default(System.Windows.Media.TextEffect); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.TextEffect>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.TextEffect value) { }
    public void Clear() { }
    public new System.Windows.Media.TextEffectCollection Clone() { return default(System.Windows.Media.TextEffectCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.TextEffectCollection CloneCurrentValue() { return default(System.Windows.Media.TextEffectCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.TextEffect value) { return default(bool); }
    public void CopyTo(System.Windows.Media.TextEffect[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.TextEffectCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.TextEffectCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.TextEffect value) { return default(int); }
    public void Insert(int index, System.Windows.Media.TextEffect value) { }
    public bool Remove(System.Windows.Media.TextEffect value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.TextEffect> System.Collections.Generic.IEnumerable<System.Windows.Media.TextEffect>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.TextEffect>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.TextEffect>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.TextEffect Current { get { return default(System.Windows.Media.TextEffect); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public enum TextFormattingMode {
    Display = 1,
    Ideal = 0,
  }
  public enum TextHintingMode {
    Animated = 2,
    Auto = 0,
    Fixed = 1,
  }
  public enum TextRenderingMode {
    Aliased = 1,
    Auto = 0,
    ClearType = 3,
    Grayscale = 2,
  }
  public abstract partial class TileBrush : System.Windows.Media.Brush {
    public static readonly System.Windows.DependencyProperty AlignmentXProperty;
    public static readonly System.Windows.DependencyProperty AlignmentYProperty;
    public static readonly System.Windows.DependencyProperty StretchProperty;
    public static readonly System.Windows.DependencyProperty TileModeProperty;
    public static readonly System.Windows.DependencyProperty ViewboxProperty;
    public static readonly System.Windows.DependencyProperty ViewboxUnitsProperty;
    public static readonly System.Windows.DependencyProperty ViewportProperty;
    public static readonly System.Windows.DependencyProperty ViewportUnitsProperty;
    protected TileBrush() { }
    public System.Windows.Media.AlignmentX AlignmentX { get { return default(System.Windows.Media.AlignmentX); } set { } }
    public System.Windows.Media.AlignmentY AlignmentY { get { return default(System.Windows.Media.AlignmentY); } set { } }
    public System.Windows.Media.Stretch Stretch { get { return default(System.Windows.Media.Stretch); } set { } }
    public System.Windows.Media.TileMode TileMode { get { return default(System.Windows.Media.TileMode); } set { } }
    public System.Windows.Rect Viewbox { get { return default(System.Windows.Rect); } set { } }
    public System.Windows.Media.BrushMappingMode ViewboxUnits { get { return default(System.Windows.Media.BrushMappingMode); } set { } }
    public System.Windows.Rect Viewport { get { return default(System.Windows.Rect); } set { } }
    public System.Windows.Media.BrushMappingMode ViewportUnits { get { return default(System.Windows.Media.BrushMappingMode); } set { } }
    public new System.Windows.Media.TileBrush Clone() { return default(System.Windows.Media.TileBrush); }
    public new System.Windows.Media.TileBrush CloneCurrentValue() { return default(System.Windows.Media.TileBrush); }
    protected abstract void GetContentBounds(out System.Windows.Rect contentBounds);
  }
  public enum TileMode {
    FlipX = 1,
    FlipXY = 3,
    FlipY = 2,
    None = 0,
    Tile = 4,
  }
  public enum ToleranceType {
    Absolute = 0,
    Relative = 1,
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.TransformConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.TransformValueSerializer))]
  public abstract partial class Transform : System.Windows.Media.GeneralTransform {
    internal Transform() { }
    public static System.Windows.Media.Transform Identity { get { return default(System.Windows.Media.Transform); } }
    public override System.Windows.Media.GeneralTransform Inverse { get { return default(System.Windows.Media.GeneralTransform); } }
    public abstract System.Windows.Media.Matrix Value { get; }
    public new System.Windows.Media.Transform Clone() { return default(System.Windows.Media.Transform); }
    public new System.Windows.Media.Transform CloneCurrentValue() { return default(System.Windows.Media.Transform); }
    public static System.Windows.Media.Transform Parse(string source) { return default(System.Windows.Media.Transform); }
    public override System.Windows.Rect TransformBounds(System.Windows.Rect rect) { return default(System.Windows.Rect); }
    public override bool TryTransform(System.Windows.Point inPoint, out System.Windows.Point result) { result = default(System.Windows.Point); return default(bool); }
  }
  public sealed partial class TransformCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Transform>, System.Collections.Generic.IEnumerable<System.Windows.Media.Transform>, System.Collections.Generic.IList<System.Windows.Media.Transform>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public TransformCollection() { }
    public TransformCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Transform> collection) { }
    public TransformCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Transform this[int index] { get { return default(System.Windows.Media.Transform); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Transform>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Transform value) { }
    public void Clear() { }
    public new System.Windows.Media.TransformCollection Clone() { return default(System.Windows.Media.TransformCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.TransformCollection CloneCurrentValue() { return default(System.Windows.Media.TransformCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Transform value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Transform[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.TransformCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.TransformCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Transform value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Transform value) { }
    public bool Remove(System.Windows.Media.Transform value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Transform> System.Collections.Generic.IEnumerable<System.Windows.Media.Transform>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Transform>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Transform>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Transform Current { get { return default(System.Windows.Media.Transform); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class TransformConverter : System.ComponentModel.TypeConverter {
    public TransformConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class TransformGroup : System.Windows.Media.Transform {
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    public TransformGroup() { }
    public System.Windows.Media.TransformCollection Children { get { return default(System.Windows.Media.TransformCollection); } set { } }
    public override System.Windows.Media.Matrix Value { get { return default(System.Windows.Media.Matrix); } }
    public new System.Windows.Media.TransformGroup Clone() { return default(System.Windows.Media.TransformGroup); }
    public new System.Windows.Media.TransformGroup CloneCurrentValue() { return default(System.Windows.Media.TransformGroup); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class TranslateTransform : System.Windows.Media.Transform {
    public static readonly System.Windows.DependencyProperty XProperty;
    public static readonly System.Windows.DependencyProperty YProperty;
    public TranslateTransform() { }
    public TranslateTransform(double offsetX, double offsetY) { }
    public override System.Windows.Media.Matrix Value { get { return default(System.Windows.Media.Matrix); } }
    public double X { get { return default(double); } set { } }
    public double Y { get { return default(double); } set { } }
    public new System.Windows.Media.TranslateTransform Clone() { return default(System.Windows.Media.TranslateTransform); }
    public new System.Windows.Media.TranslateTransform CloneCurrentValue() { return default(System.Windows.Media.TranslateTransform); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public partial class Typeface {
    public Typeface(string typefaceName) { }
    public Typeface(System.Windows.Media.FontFamily fontFamily, System.Windows.FontStyle style, System.Windows.FontWeight weight, System.Windows.FontStretch stretch) { }
    public Typeface(System.Windows.Media.FontFamily fontFamily, System.Windows.FontStyle style, System.Windows.FontWeight weight, System.Windows.FontStretch stretch, System.Windows.Media.FontFamily fallbackFontFamily) { }
    public double CapsHeight { get { return default(double); } }
    public System.Windows.Media.LanguageSpecificStringDictionary FaceNames { get { return default(System.Windows.Media.LanguageSpecificStringDictionary); } }
    public System.Windows.Media.FontFamily FontFamily { get { return default(System.Windows.Media.FontFamily); } }
    public bool IsBoldSimulated { get { return default(bool); } }
    public bool IsObliqueSimulated { get { return default(bool); } }
    public System.Windows.FontStretch Stretch { get { return default(System.Windows.FontStretch); } }
    public double StrikethroughPosition { get { return default(double); } }
    public double StrikethroughThickness { get { return default(double); } }
    public System.Windows.FontStyle Style { get { return default(System.Windows.FontStyle); } }
    public double UnderlinePosition { get { return default(double); } }
    public double UnderlineThickness { get { return default(double); } }
    public System.Windows.FontWeight Weight { get { return default(System.Windows.FontWeight); } }
    public double XHeight { get { return default(double); } }
    public override bool Equals(object o) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public bool TryGetGlyphTypeface(out System.Windows.Media.GlyphTypeface glyphTypeface) { glyphTypeface = default(System.Windows.Media.GlyphTypeface); return default(bool); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.VectorCollectionConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Converters.VectorCollectionValueSerializer))]
  public sealed partial class VectorCollection : System.Windows.Freezable, System.Collections.Generic.ICollection<System.Windows.Vector>, System.Collections.Generic.IEnumerable<System.Windows.Vector>, System.Collections.Generic.IList<System.Windows.Vector>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable {
    public VectorCollection() { }
    public VectorCollection(System.Collections.Generic.IEnumerable<System.Windows.Vector> collection) { }
    public VectorCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Vector this[int index] { get { return default(System.Windows.Vector); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Vector>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Vector value) { }
    public void Clear() { }
    public new System.Windows.Media.VectorCollection Clone() { return default(System.Windows.Media.VectorCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.VectorCollection CloneCurrentValue() { return default(System.Windows.Media.VectorCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Vector value) { return default(bool); }
    public void CopyTo(System.Windows.Vector[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.VectorCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.VectorCollection.Enumerator); }
    public int IndexOf(System.Windows.Vector value) { return default(int); }
    public void Insert(int index, System.Windows.Vector value) { }
    public static System.Windows.Media.VectorCollection Parse(string source) { return default(System.Windows.Media.VectorCollection); }
    public bool Remove(System.Windows.Vector value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Vector> System.Collections.Generic.IEnumerable<System.Windows.Vector>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Vector>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Vector>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Vector Current { get { return default(System.Windows.Vector); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class VectorCollectionConverter : System.ComponentModel.TypeConverter {
    public VectorCollectionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class VideoDrawing : System.Windows.Media.Drawing {
    public static readonly System.Windows.DependencyProperty PlayerProperty;
    public static readonly System.Windows.DependencyProperty RectProperty;
    public VideoDrawing() { }
    public System.Windows.Media.MediaPlayer Player { get { return default(System.Windows.Media.MediaPlayer); } set { } }
    public System.Windows.Rect Rect { get { return default(System.Windows.Rect); } set { } }
    public new System.Windows.Media.VideoDrawing Clone() { return default(System.Windows.Media.VideoDrawing); }
    public new System.Windows.Media.VideoDrawing CloneCurrentValue() { return default(System.Windows.Media.VideoDrawing); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public abstract partial class Visual : System.Windows.DependencyObject {
    protected Visual() { }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    protected internal System.Windows.Media.Effects.BitmapEffect VisualBitmapEffect { get { return default(System.Windows.Media.Effects.BitmapEffect); } protected set { } }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    protected internal System.Windows.Media.Effects.BitmapEffectInput VisualBitmapEffectInput { get { return default(System.Windows.Media.Effects.BitmapEffectInput); } protected set { } }
    protected internal System.Windows.Media.BitmapScalingMode VisualBitmapScalingMode { get { return default(System.Windows.Media.BitmapScalingMode); } protected set { } }
    protected internal System.Windows.Media.CacheMode VisualCacheMode { get { return default(System.Windows.Media.CacheMode); } protected set { } }
    protected virtual int VisualChildrenCount { get { return default(int); } }
    protected internal System.Windows.Media.ClearTypeHint VisualClearTypeHint { get { return default(System.Windows.Media.ClearTypeHint); } set { } }
    protected internal System.Windows.Media.Geometry VisualClip { get { return default(System.Windows.Media.Geometry); } protected set { } }
    protected internal System.Windows.Media.EdgeMode VisualEdgeMode { get { return default(System.Windows.Media.EdgeMode); } protected set { } }
    protected internal System.Windows.Media.Effects.Effect VisualEffect { get { return default(System.Windows.Media.Effects.Effect); } protected set { } }
    protected internal System.Windows.Vector VisualOffset { get { return default(System.Windows.Vector); } protected set { } }
    protected internal double VisualOpacity { get { return default(double); } protected set { } }
    protected internal System.Windows.Media.Brush VisualOpacityMask { get { return default(System.Windows.Media.Brush); } protected set { } }
    protected System.Windows.DependencyObject VisualParent { get { return default(System.Windows.DependencyObject); } }
    protected internal System.Nullable<System.Windows.Rect> VisualScrollableAreaClip { get { return default(System.Nullable<System.Windows.Rect>); } protected set { } }
    protected internal System.Windows.Media.TextHintingMode VisualTextHintingMode { get { return default(System.Windows.Media.TextHintingMode); } set { } }
    protected internal System.Windows.Media.TextRenderingMode VisualTextRenderingMode { get { return default(System.Windows.Media.TextRenderingMode); } set { } }
    protected internal System.Windows.Media.Transform VisualTransform { get { return default(System.Windows.Media.Transform); } protected set { } }
    protected internal System.Windows.Media.DoubleCollection VisualXSnappingGuidelines { get { return default(System.Windows.Media.DoubleCollection); } protected set { } }
    protected internal System.Windows.Media.DoubleCollection VisualYSnappingGuidelines { get { return default(System.Windows.Media.DoubleCollection); } protected set { } }
    protected void AddVisualChild(System.Windows.Media.Visual child) { }
    public System.Windows.DependencyObject FindCommonVisualAncestor(System.Windows.DependencyObject otherVisual) { return default(System.Windows.DependencyObject); }
    protected virtual System.Windows.Media.Visual GetVisualChild(int index) { return default(System.Windows.Media.Visual); }
    protected virtual System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { return default(System.Windows.Media.GeometryHitTestResult); }
    protected virtual System.Windows.Media.HitTestResult HitTestCore(System.Windows.Media.PointHitTestParameters hitTestParameters) { return default(System.Windows.Media.HitTestResult); }
    public bool IsAncestorOf(System.Windows.DependencyObject descendant) { return default(bool); }
    public bool IsDescendantOf(System.Windows.DependencyObject ancestor) { return default(bool); }
    protected virtual void OnDpiChanged(System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi) { }
    protected internal virtual void OnVisualChildrenChanged(System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved) { }
    protected internal virtual void OnVisualParentChanged(System.Windows.DependencyObject oldParent) { }
    public System.Windows.Point PointFromScreen(System.Windows.Point point) { return default(System.Windows.Point); }
    public System.Windows.Point PointToScreen(System.Windows.Point point) { return default(System.Windows.Point); }
    protected void RemoveVisualChild(System.Windows.Media.Visual child) { }
    public System.Windows.Media.Media3D.GeneralTransform2DTo3D TransformToAncestor(System.Windows.Media.Media3D.Visual3D ancestor) { return default(System.Windows.Media.Media3D.GeneralTransform2DTo3D); }
    public System.Windows.Media.GeneralTransform TransformToAncestor(System.Windows.Media.Visual ancestor) { return default(System.Windows.Media.GeneralTransform); }
    public System.Windows.Media.GeneralTransform TransformToDescendant(System.Windows.Media.Visual descendant) { return default(System.Windows.Media.GeneralTransform); }
    public System.Windows.Media.GeneralTransform TransformToVisual(System.Windows.Media.Visual visual) { return default(System.Windows.Media.GeneralTransform); }
  }
  public sealed partial class VisualBrush : System.Windows.Media.TileBrush {
    public static readonly System.Windows.DependencyProperty AutoLayoutContentProperty;
    public static readonly System.Windows.DependencyProperty VisualProperty;
    public VisualBrush() { }
    public VisualBrush(System.Windows.Media.Visual visual) { }
    public bool AutoLayoutContent { get { return default(bool); } set { } }
    public System.Windows.Media.Visual Visual { get { return default(System.Windows.Media.Visual); } set { } }
    public new System.Windows.Media.VisualBrush Clone() { return default(System.Windows.Media.VisualBrush); }
    public new System.Windows.Media.VisualBrush CloneCurrentValue() { return default(System.Windows.Media.VisualBrush); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetContentBounds(out System.Windows.Rect contentBounds) { contentBounds = default(System.Windows.Rect); }
    protected override void OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
  }
  public sealed partial class VisualCollection : System.Collections.ICollection, System.Collections.IEnumerable {
    public VisualCollection(System.Windows.Media.Visual parent) { }
    public int Capacity { get { return default(int); } set { } }
    public int Count { get { return default(int); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Visual this[int index] { get { return default(System.Windows.Media.Visual); } set { } }
    public object SyncRoot { get { return default(object); } }
    public int Add(System.Windows.Media.Visual visual) { return default(int); }
    public void Clear() { }
    public bool Contains(System.Windows.Media.Visual visual) { return default(bool); }
    public void CopyTo(System.Array array, int index) { }
    public void CopyTo(System.Windows.Media.Visual[] array, int index) { }
    public System.Windows.Media.VisualCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.VisualCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Visual visual) { return default(int); }
    public void Insert(int index, System.Windows.Media.Visual visual) { }
    public void Remove(System.Windows.Media.Visual visual) { }
    public void RemoveAt(int index) { }
    public void RemoveRange(int index, int count) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.IEnumerator {
      public System.Windows.Media.Visual Current { get { return default(System.Windows.Media.Visual); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
    }
  }
  public partial class VisualTarget : System.Windows.Media.CompositionTarget {
    public VisualTarget(System.Windows.Media.HostVisual hostVisual) { }
    public override System.Windows.Media.Matrix TransformFromDevice { get { return default(System.Windows.Media.Matrix); } }
    public override System.Windows.Media.Matrix TransformToDevice { get { return default(System.Windows.Media.Matrix); } }
    [System.Security.SecurityCriticalAttribute]
    public override void Dispose() { }
  }
  public static partial class VisualTreeHelper {
    public static System.Windows.Media.Effects.BitmapEffect GetBitmapEffect(System.Windows.Media.Visual reference) { return default(System.Windows.Media.Effects.BitmapEffect); }
    public static System.Windows.Media.Effects.BitmapEffectInput GetBitmapEffectInput(System.Windows.Media.Visual reference) { return default(System.Windows.Media.Effects.BitmapEffectInput); }
    public static System.Windows.Media.CacheMode GetCacheMode(System.Windows.Media.Visual reference) { return default(System.Windows.Media.CacheMode); }
    public static System.Windows.DependencyObject GetChild(System.Windows.DependencyObject reference, int childIndex) { return default(System.Windows.DependencyObject); }
    public static int GetChildrenCount(System.Windows.DependencyObject reference) { return default(int); }
    public static System.Windows.Media.Geometry GetClip(System.Windows.Media.Visual reference) { return default(System.Windows.Media.Geometry); }
    public static System.Windows.Media.Media3D.Rect3D GetContentBounds(System.Windows.Media.Media3D.Visual3D reference) { return default(System.Windows.Media.Media3D.Rect3D); }
    public static System.Windows.Rect GetContentBounds(System.Windows.Media.Visual reference) { return default(System.Windows.Rect); }
    public static System.Windows.Media.Media3D.Rect3D GetDescendantBounds(System.Windows.Media.Media3D.Visual3D reference) { return default(System.Windows.Media.Media3D.Rect3D); }
    public static System.Windows.Rect GetDescendantBounds(System.Windows.Media.Visual reference) { return default(System.Windows.Rect); }
    public static System.Windows.DpiScale GetDpi(System.Windows.Media.Visual visual) { return default(System.Windows.DpiScale); }
    public static System.Windows.Media.DrawingGroup GetDrawing(System.Windows.Media.Visual reference) { return default(System.Windows.Media.DrawingGroup); }
    public static System.Windows.Media.EdgeMode GetEdgeMode(System.Windows.Media.Visual reference) { return default(System.Windows.Media.EdgeMode); }
    public static System.Windows.Media.Effects.Effect GetEffect(System.Windows.Media.Visual reference) { return default(System.Windows.Media.Effects.Effect); }
    public static System.Windows.Vector GetOffset(System.Windows.Media.Visual reference) { return default(System.Windows.Vector); }
    public static double GetOpacity(System.Windows.Media.Visual reference) { return default(double); }
    public static System.Windows.Media.Brush GetOpacityMask(System.Windows.Media.Visual reference) { return default(System.Windows.Media.Brush); }
    public static System.Windows.DependencyObject GetParent(System.Windows.DependencyObject reference) { return default(System.Windows.DependencyObject); }
    public static System.Windows.Media.Transform GetTransform(System.Windows.Media.Visual reference) { return default(System.Windows.Media.Transform); }
    public static System.Windows.Media.DoubleCollection GetXSnappingGuidelines(System.Windows.Media.Visual reference) { return default(System.Windows.Media.DoubleCollection); }
    public static System.Windows.Media.DoubleCollection GetYSnappingGuidelines(System.Windows.Media.Visual reference) { return default(System.Windows.Media.DoubleCollection); }
    public static void HitTest(System.Windows.Media.Media3D.Visual3D reference, System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.Media3D.HitTestParameters3D hitTestParameters) { }
    public static void HitTest(System.Windows.Media.Visual reference, System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.HitTestParameters hitTestParameters) { }
    public static System.Windows.Media.HitTestResult HitTest(System.Windows.Media.Visual reference, System.Windows.Point point) { return default(System.Windows.Media.HitTestResult); }
    public static void SetRootDpi(System.Windows.Media.Visual visual, System.Windows.DpiScale dpiInfo) { }
  }
}
namespace System.Windows.Media.Animation {
  public abstract partial class Animatable : System.Windows.Freezable, System.Windows.Media.Animation.IAnimatable {
    protected Animatable() { }
    public bool HasAnimatedProperties { get { return default(bool); } }
    public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock) { }
    public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
    public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation) { }
    public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
    public new System.Windows.Media.Animation.Animatable Clone() { return default(System.Windows.Media.Animation.Animatable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    public object GetAnimationBaseValue(System.Windows.DependencyProperty dp) { return default(object); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public static bool ShouldSerializeStoredWeakReference(System.Windows.DependencyObject target) { return default(bool); }
  }
  public partial class AnimationClock : System.Windows.Media.Animation.Clock {
    protected internal AnimationClock(System.Windows.Media.Animation.AnimationTimeline animation) : base (default(System.Windows.Media.Animation.Timeline)) { }
    public new System.Windows.Media.Animation.AnimationTimeline Timeline { get { return default(System.Windows.Media.Animation.AnimationTimeline); } }
    public object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue) { return default(object); }
  }
  public sealed partial class AnimationException : System.SystemException {
    internal AnimationException() { }
    public System.Windows.Media.Animation.AnimationClock Clock { get { return default(System.Windows.Media.Animation.AnimationClock); } }
    public System.Windows.DependencyProperty Property { get { return default(System.Windows.DependencyProperty); } }
    public System.Windows.Media.Animation.IAnimatable Target { get { return default(System.Windows.Media.Animation.IAnimatable); } }
  }
  public abstract partial class AnimationTimeline : System.Windows.Media.Animation.Timeline {
    public static readonly System.Windows.DependencyProperty IsAdditiveProperty;
    public static readonly System.Windows.DependencyProperty IsCumulativeProperty;
    protected AnimationTimeline() { }
    public virtual bool IsDestinationDefault { get { return default(bool); } }
    public abstract System.Type TargetPropertyType { get; }
    protected internal override System.Windows.Media.Animation.Clock AllocateClock() { return default(System.Windows.Media.Animation.Clock); }
    public new System.Windows.Media.Animation.AnimationTimeline Clone() { return default(System.Windows.Media.Animation.AnimationTimeline); }
    public new System.Windows.Media.Animation.AnimationClock CreateClock() { return default(System.Windows.Media.Animation.AnimationClock); }
    public virtual object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
  }
  public partial class BackEase : System.Windows.Media.Animation.EasingFunctionBase {
    public static readonly System.Windows.DependencyProperty AmplitudeProperty;
    public BackEase() { }
    public double Amplitude { get { return default(double); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public abstract partial class BooleanAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected BooleanAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.BooleanAnimationBase Clone() { return default(System.Windows.Media.Animation.BooleanAnimationBase); }
    public bool GetCurrentValue(bool defaultOriginValue, bool defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(bool); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected abstract bool GetCurrentValueCore(bool defaultOriginValue, bool defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class BooleanAnimationUsingKeyFrames : System.Windows.Media.Animation.BooleanAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public BooleanAnimationUsingKeyFrames() { }
    public System.Windows.Media.Animation.BooleanKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.BooleanKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.BooleanAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override bool GetCurrentValueCore(bool defaultOriginValue, bool defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(bool); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class BooleanKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected BooleanKeyFrame() { }
    protected BooleanKeyFrame(bool value) { }
    protected BooleanKeyFrame(bool value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public bool Value { get { return default(bool); } set { } }
    public bool InterpolateValue(bool baseValue, double keyFrameProgress) { return default(bool); }
    protected abstract bool InterpolateValueCore(bool baseValue, double keyFrameProgress);
  }
  public partial class BooleanKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public BooleanKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.BooleanKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.BooleanKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.BooleanKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.BooleanKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.BooleanKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.BooleanKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.BooleanKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.BooleanKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class BounceEase : System.Windows.Media.Animation.EasingFunctionBase {
    public static readonly System.Windows.DependencyProperty BouncesProperty;
    public static readonly System.Windows.DependencyProperty BouncinessProperty;
    public BounceEase() { }
    public int Bounces { get { return default(int); } set { } }
    public double Bounciness { get { return default(double); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public partial class ByteAnimation : System.Windows.Media.Animation.ByteAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public ByteAnimation() { }
    public ByteAnimation(byte fromValue, byte toValue, System.Windows.Duration duration) { }
    public ByteAnimation(byte fromValue, byte toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public ByteAnimation(byte toValue, System.Windows.Duration duration) { }
    public ByteAnimation(byte toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Byte> By { get { return default(System.Nullable<System.Byte>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Byte> From { get { return default(System.Nullable<System.Byte>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Byte> To { get { return default(System.Nullable<System.Byte>); } set { } }
    public new System.Windows.Media.Animation.ByteAnimation Clone() { return default(System.Windows.Media.Animation.ByteAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override byte GetCurrentValueCore(byte defaultOriginValue, byte defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(byte); }
  }
  public abstract partial class ByteAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected ByteAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.ByteAnimationBase Clone() { return default(System.Windows.Media.Animation.ByteAnimationBase); }
    public byte GetCurrentValue(byte defaultOriginValue, byte defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(byte); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected abstract byte GetCurrentValueCore(byte defaultOriginValue, byte defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class ByteAnimationUsingKeyFrames : System.Windows.Media.Animation.ByteAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public ByteAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.ByteKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.ByteKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.ByteAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.ByteAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.ByteAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.ByteAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override byte GetCurrentValueCore(byte defaultOriginValue, byte defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(byte); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class ByteKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected ByteKeyFrame() { }
    protected ByteKeyFrame(byte value) { }
    protected ByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public byte Value { get { return default(byte); } set { } }
    public byte InterpolateValue(byte baseValue, double keyFrameProgress) { return default(byte); }
    protected abstract byte InterpolateValueCore(byte baseValue, double keyFrameProgress);
  }
  public partial class ByteKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public ByteKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.ByteKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.ByteKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.ByteKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.ByteKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.ByteKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.ByteKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.ByteKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.ByteKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.ByteKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.ByteKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.ByteKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.ByteKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public abstract partial class CharAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected CharAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.CharAnimationBase Clone() { return default(System.Windows.Media.Animation.CharAnimationBase); }
    public char GetCurrentValue(char defaultOriginValue, char defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(char); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected abstract char GetCurrentValueCore(char defaultOriginValue, char defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class CharAnimationUsingKeyFrames : System.Windows.Media.Animation.CharAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public CharAnimationUsingKeyFrames() { }
    public System.Windows.Media.Animation.CharKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.CharKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.CharAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.CharAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.CharAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.CharAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override char GetCurrentValueCore(char defaultOriginValue, char defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(char); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class CharKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected CharKeyFrame() { }
    protected CharKeyFrame(char value) { }
    protected CharKeyFrame(char value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public char Value { get { return default(char); } set { } }
    public char InterpolateValue(char baseValue, double keyFrameProgress) { return default(char); }
    protected abstract char InterpolateValueCore(char baseValue, double keyFrameProgress);
  }
  public partial class CharKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public CharKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.CharKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.CharKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.CharKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.CharKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.CharKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.CharKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.CharKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.CharKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.CharKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.CharKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.CharKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.CharKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class CircleEase : System.Windows.Media.Animation.EasingFunctionBase {
    public CircleEase() { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public partial class Clock : System.Windows.Threading.DispatcherObject {
    protected internal Clock(System.Windows.Media.Animation.Timeline timeline) { }
    public System.Windows.Media.Animation.ClockController Controller { get { return default(System.Windows.Media.Animation.ClockController); } }
    public System.Nullable<System.Double> CurrentGlobalSpeed { get { return default(System.Nullable<System.Double>); } }
    protected System.TimeSpan CurrentGlobalTime { get { return default(System.TimeSpan); } }
    public System.Nullable<System.Int32> CurrentIteration { get { return default(System.Nullable<System.Int32>); } }
    public System.Nullable<System.Double> CurrentProgress { get { return default(System.Nullable<System.Double>); } }
    public System.Windows.Media.Animation.ClockState CurrentState { get { return default(System.Windows.Media.Animation.ClockState); } }
    public System.Nullable<System.TimeSpan> CurrentTime { get { return default(System.Nullable<System.TimeSpan>); } }
    public bool HasControllableRoot { get { return default(bool); } }
    public bool IsPaused { get { return default(bool); } }
    public System.Windows.Duration NaturalDuration { get { return default(System.Windows.Duration); } }
    public System.Windows.Media.Animation.Clock Parent { get { return default(System.Windows.Media.Animation.Clock); } }
    public System.Windows.Media.Animation.Timeline Timeline { get { return default(System.Windows.Media.Animation.Timeline); } }
    public event System.EventHandler Completed { add { } remove { } }
    public event System.EventHandler CurrentGlobalSpeedInvalidated { add { } remove { } }
    public event System.EventHandler CurrentStateInvalidated { add { } remove { } }
    public event System.EventHandler CurrentTimeInvalidated { add { } remove { } }
    public event System.EventHandler RemoveRequested { add { } remove { } }
    protected virtual void DiscontinuousTimeMovement() { }
    protected virtual bool GetCanSlip() { return default(bool); }
    protected virtual System.TimeSpan GetCurrentTimeCore() { return default(System.TimeSpan); }
    protected virtual void SpeedChanged() { }
    protected virtual void Stopped() { }
  }
  public partial class ClockCollection : System.Collections.Generic.ICollection<System.Windows.Media.Animation.Clock>, System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Clock>, System.Collections.IEnumerable {
    internal ClockCollection() { }
    public int Count { get { return default(int); } }
    public bool IsReadOnly { get { return default(bool); } }
    public System.Windows.Media.Animation.Clock this[int index] { get { return default(System.Windows.Media.Animation.Clock); } }
    public void Add(System.Windows.Media.Animation.Clock item) { }
    public void Clear() { }
    public bool Contains(System.Windows.Media.Animation.Clock item) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.Clock[] array, int index) { }
    public override bool Equals(object obj) { return default(bool); }
    public static bool Equals(System.Windows.Media.Animation.ClockCollection objA, System.Windows.Media.Animation.ClockCollection objB) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.Animation.ClockCollection objA, System.Windows.Media.Animation.ClockCollection objB) { return default(bool); }
    public static bool operator !=(System.Windows.Media.Animation.ClockCollection objA, System.Windows.Media.Animation.ClockCollection objB) { return default(bool); }
    public bool Remove(System.Windows.Media.Animation.Clock item) { return default(bool); }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Animation.Clock> System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Clock>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Animation.Clock>); }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public sealed partial class ClockController : System.Windows.Threading.DispatcherObject {
    internal ClockController() { }
    public System.Windows.Media.Animation.Clock Clock { get { return default(System.Windows.Media.Animation.Clock); } }
    public double SpeedRatio { get { return default(double); } set { } }
    public void Begin() { }
    public void Pause() { }
    public void Remove() { }
    public void Resume() { }
    public void Seek(System.TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin) { }
    public void SeekAlignedToLastTick(System.TimeSpan offset, System.Windows.Media.Animation.TimeSeekOrigin origin) { }
    public void SkipToFill() { }
    public void Stop() { }
  }
  public partial class ClockGroup : System.Windows.Media.Animation.Clock {
    protected internal ClockGroup(System.Windows.Media.Animation.TimelineGroup timelineGroup) : base (default(System.Windows.Media.Animation.Timeline)) { }
    public System.Windows.Media.Animation.ClockCollection Children { get { return default(System.Windows.Media.Animation.ClockCollection); } }
    public new System.Windows.Media.Animation.TimelineGroup Timeline { get { return default(System.Windows.Media.Animation.TimelineGroup); } }
  }
  public enum ClockState {
    Active = 0,
    Filling = 1,
    Stopped = 2,
  }
  public partial class ColorAnimation : System.Windows.Media.Animation.ColorAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public ColorAnimation() { }
    public ColorAnimation(System.Windows.Media.Color toValue, System.Windows.Duration duration) { }
    public ColorAnimation(System.Windows.Media.Color toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public ColorAnimation(System.Windows.Media.Color fromValue, System.Windows.Media.Color toValue, System.Windows.Duration duration) { }
    public ColorAnimation(System.Windows.Media.Color fromValue, System.Windows.Media.Color toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Windows.Media.Color> By { get { return default(System.Nullable<System.Windows.Media.Color>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Windows.Media.Color> From { get { return default(System.Nullable<System.Windows.Media.Color>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Windows.Media.Color> To { get { return default(System.Nullable<System.Windows.Media.Color>); } set { } }
    public new System.Windows.Media.Animation.ColorAnimation Clone() { return default(System.Windows.Media.Animation.ColorAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Color GetCurrentValueCore(System.Windows.Media.Color defaultOriginValue, System.Windows.Media.Color defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Color); }
  }
  public abstract partial class ColorAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected ColorAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.ColorAnimationBase Clone() { return default(System.Windows.Media.Animation.ColorAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Media.Color GetCurrentValue(System.Windows.Media.Color defaultOriginValue, System.Windows.Media.Color defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Color); }
    protected abstract System.Windows.Media.Color GetCurrentValueCore(System.Windows.Media.Color defaultOriginValue, System.Windows.Media.Color defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class ColorAnimationUsingKeyFrames : System.Windows.Media.Animation.ColorAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public ColorAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.ColorKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.ColorKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.ColorAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.ColorAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.ColorAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.ColorAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Media.Color GetCurrentValueCore(System.Windows.Media.Color defaultOriginValue, System.Windows.Media.Color defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Color); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class ColorKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected ColorKeyFrame() { }
    protected ColorKeyFrame(System.Windows.Media.Color value) { }
    protected ColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Media.Color Value { get { return default(System.Windows.Media.Color); } set { } }
    public System.Windows.Media.Color InterpolateValue(System.Windows.Media.Color baseValue, double keyFrameProgress) { return default(System.Windows.Media.Color); }
    protected abstract System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress);
  }
  public partial class ColorKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public ColorKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.ColorKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.ColorKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.ColorKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.ColorKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.ColorKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.ColorKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.ColorKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.ColorKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.ColorKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.ColorKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.ColorKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.ColorKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class CubicEase : System.Windows.Media.Animation.EasingFunctionBase {
    public CubicEase() { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public partial class DecimalAnimation : System.Windows.Media.Animation.DecimalAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public DecimalAnimation() { }
    public DecimalAnimation(decimal fromValue, decimal toValue, System.Windows.Duration duration) { }
    public DecimalAnimation(decimal fromValue, decimal toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public DecimalAnimation(decimal toValue, System.Windows.Duration duration) { }
    public DecimalAnimation(decimal toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Decimal> By { get { return default(System.Nullable<System.Decimal>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Decimal> From { get { return default(System.Nullable<System.Decimal>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Decimal> To { get { return default(System.Nullable<System.Decimal>); } set { } }
    public new System.Windows.Media.Animation.DecimalAnimation Clone() { return default(System.Windows.Media.Animation.DecimalAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override decimal GetCurrentValueCore(decimal defaultOriginValue, decimal defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(decimal); }
  }
  public abstract partial class DecimalAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected DecimalAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.DecimalAnimationBase Clone() { return default(System.Windows.Media.Animation.DecimalAnimationBase); }
    public decimal GetCurrentValue(decimal defaultOriginValue, decimal defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(decimal); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected abstract decimal GetCurrentValueCore(decimal defaultOriginValue, decimal defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class DecimalAnimationUsingKeyFrames : System.Windows.Media.Animation.DecimalAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public DecimalAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.DecimalKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.DecimalKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.DecimalAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override decimal GetCurrentValueCore(decimal defaultOriginValue, decimal defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(decimal); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class DecimalKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected DecimalKeyFrame() { }
    protected DecimalKeyFrame(decimal value) { }
    protected DecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public decimal Value { get { return default(decimal); } set { } }
    public decimal InterpolateValue(decimal baseValue, double keyFrameProgress) { return default(decimal); }
    protected abstract decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress);
  }
  public partial class DecimalKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public DecimalKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.DecimalKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.DecimalKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.DecimalKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.DecimalKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.DecimalKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.DecimalKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.DecimalKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.DecimalKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class DiscreteBooleanKeyFrame : System.Windows.Media.Animation.BooleanKeyFrame {
    public DiscreteBooleanKeyFrame() { }
    public DiscreteBooleanKeyFrame(bool value) { }
    public DiscreteBooleanKeyFrame(bool value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool InterpolateValueCore(bool baseValue, double keyFrameProgress) { return default(bool); }
  }
  public partial class DiscreteByteKeyFrame : System.Windows.Media.Animation.ByteKeyFrame {
    public DiscreteByteKeyFrame() { }
    public DiscreteByteKeyFrame(byte value) { }
    public DiscreteByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override byte InterpolateValueCore(byte baseValue, double keyFrameProgress) { return default(byte); }
  }
  public partial class DiscreteCharKeyFrame : System.Windows.Media.Animation.CharKeyFrame {
    public DiscreteCharKeyFrame() { }
    public DiscreteCharKeyFrame(char value) { }
    public DiscreteCharKeyFrame(char value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override char InterpolateValueCore(char baseValue, double keyFrameProgress) { return default(char); }
  }
  public partial class DiscreteColorKeyFrame : System.Windows.Media.Animation.ColorKeyFrame {
    public DiscreteColorKeyFrame() { }
    public DiscreteColorKeyFrame(System.Windows.Media.Color value) { }
    public DiscreteColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress) { return default(System.Windows.Media.Color); }
  }
  public partial class DiscreteDecimalKeyFrame : System.Windows.Media.Animation.DecimalKeyFrame {
    public DiscreteDecimalKeyFrame() { }
    public DiscreteDecimalKeyFrame(decimal value) { }
    public DiscreteDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress) { return default(decimal); }
  }
  public partial class DiscreteDoubleKeyFrame : System.Windows.Media.Animation.DoubleKeyFrame {
    public DiscreteDoubleKeyFrame() { }
    public DiscreteDoubleKeyFrame(double value) { }
    public DiscreteDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double InterpolateValueCore(double baseValue, double keyFrameProgress) { return default(double); }
  }
  public partial class DiscreteInt16KeyFrame : System.Windows.Media.Animation.Int16KeyFrame {
    public DiscreteInt16KeyFrame() { }
    public DiscreteInt16KeyFrame(short value) { }
    public DiscreteInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override short InterpolateValueCore(short baseValue, double keyFrameProgress) { return default(short); }
  }
  public partial class DiscreteInt32KeyFrame : System.Windows.Media.Animation.Int32KeyFrame {
    public DiscreteInt32KeyFrame() { }
    public DiscreteInt32KeyFrame(int value) { }
    public DiscreteInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override int InterpolateValueCore(int baseValue, double keyFrameProgress) { return default(int); }
  }
  public partial class DiscreteInt64KeyFrame : System.Windows.Media.Animation.Int64KeyFrame {
    public DiscreteInt64KeyFrame() { }
    public DiscreteInt64KeyFrame(long value) { }
    public DiscreteInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override long InterpolateValueCore(long baseValue, double keyFrameProgress) { return default(long); }
  }
  public partial class DiscreteMatrixKeyFrame : System.Windows.Media.Animation.MatrixKeyFrame {
    public DiscreteMatrixKeyFrame() { }
    public DiscreteMatrixKeyFrame(System.Windows.Media.Matrix value) { }
    public DiscreteMatrixKeyFrame(System.Windows.Media.Matrix value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Matrix InterpolateValueCore(System.Windows.Media.Matrix baseValue, double keyFrameProgress) { return default(System.Windows.Media.Matrix); }
  }
  public partial class DiscreteObjectKeyFrame : System.Windows.Media.Animation.ObjectKeyFrame {
    public DiscreteObjectKeyFrame() { }
    public DiscreteObjectKeyFrame(object value) { }
    public DiscreteObjectKeyFrame(object value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override object InterpolateValueCore(object baseValue, double keyFrameProgress) { return default(object); }
  }
  public partial class DiscretePoint3DKeyFrame : System.Windows.Media.Animation.Point3DKeyFrame {
    public DiscretePoint3DKeyFrame() { }
    public DiscretePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
    public DiscretePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Point3D); }
  }
  public partial class DiscretePointKeyFrame : System.Windows.Media.Animation.PointKeyFrame {
    public DiscretePointKeyFrame() { }
    public DiscretePointKeyFrame(System.Windows.Point value) { }
    public DiscretePointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress) { return default(System.Windows.Point); }
  }
  public partial class DiscreteQuaternionKeyFrame : System.Windows.Media.Animation.QuaternionKeyFrame {
    public DiscreteQuaternionKeyFrame() { }
    public DiscreteQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
    public DiscreteQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Quaternion); }
  }
  public partial class DiscreteRectKeyFrame : System.Windows.Media.Animation.RectKeyFrame {
    public DiscreteRectKeyFrame() { }
    public DiscreteRectKeyFrame(System.Windows.Rect value) { }
    public DiscreteRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress) { return default(System.Windows.Rect); }
  }
  public partial class DiscreteRotation3DKeyFrame : System.Windows.Media.Animation.Rotation3DKeyFrame {
    public DiscreteRotation3DKeyFrame() { }
    public DiscreteRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
    public DiscreteRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Rotation3D); }
  }
  public partial class DiscreteSingleKeyFrame : System.Windows.Media.Animation.SingleKeyFrame {
    public DiscreteSingleKeyFrame() { }
    public DiscreteSingleKeyFrame(float value) { }
    public DiscreteSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override float InterpolateValueCore(float baseValue, double keyFrameProgress) { return default(float); }
  }
  public partial class DiscreteSizeKeyFrame : System.Windows.Media.Animation.SizeKeyFrame {
    public DiscreteSizeKeyFrame() { }
    public DiscreteSizeKeyFrame(System.Windows.Size value) { }
    public DiscreteSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress) { return default(System.Windows.Size); }
  }
  public partial class DiscreteStringKeyFrame : System.Windows.Media.Animation.StringKeyFrame {
    public DiscreteStringKeyFrame() { }
    public DiscreteStringKeyFrame(string value) { }
    public DiscreteStringKeyFrame(string value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override string InterpolateValueCore(string baseValue, double keyFrameProgress) { return default(string); }
  }
  public partial class DiscreteVector3DKeyFrame : System.Windows.Media.Animation.Vector3DKeyFrame {
    public DiscreteVector3DKeyFrame() { }
    public DiscreteVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
    public DiscreteVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Vector3D); }
  }
  public partial class DiscreteVectorKeyFrame : System.Windows.Media.Animation.VectorKeyFrame {
    public DiscreteVectorKeyFrame() { }
    public DiscreteVectorKeyFrame(System.Windows.Vector value) { }
    public DiscreteVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress) { return default(System.Windows.Vector); }
  }
  public partial class DoubleAnimation : System.Windows.Media.Animation.DoubleAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public DoubleAnimation() { }
    public DoubleAnimation(double fromValue, double toValue, System.Windows.Duration duration) { }
    public DoubleAnimation(double fromValue, double toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public DoubleAnimation(double toValue, System.Windows.Duration duration) { }
    public DoubleAnimation(double toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Double> By { get { return default(System.Nullable<System.Double>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Double> From { get { return default(System.Nullable<System.Double>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Double> To { get { return default(System.Nullable<System.Double>); } set { } }
    public new System.Windows.Media.Animation.DoubleAnimation Clone() { return default(System.Windows.Media.Animation.DoubleAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double GetCurrentValueCore(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(double); }
  }
  public abstract partial class DoubleAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected DoubleAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.DoubleAnimationBase Clone() { return default(System.Windows.Media.Animation.DoubleAnimationBase); }
    public double GetCurrentValue(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(double); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected abstract double GetCurrentValueCore(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class DoubleAnimationUsingKeyFrames : System.Windows.Media.Animation.DoubleAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public DoubleAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.DoubleKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.DoubleKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override double GetCurrentValueCore(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(double); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public partial class DoubleAnimationUsingPath : System.Windows.Media.Animation.DoubleAnimationBase {
    public static readonly System.Windows.DependencyProperty PathGeometryProperty;
    public static readonly System.Windows.DependencyProperty SourceProperty;
    public DoubleAnimationUsingPath() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.PathGeometry PathGeometry { get { return default(System.Windows.Media.PathGeometry); } set { } }
    public System.Windows.Media.Animation.PathAnimationSource Source { get { return default(System.Windows.Media.Animation.PathAnimationSource); } set { } }
    public new System.Windows.Media.Animation.DoubleAnimationUsingPath Clone() { return default(System.Windows.Media.Animation.DoubleAnimationUsingPath); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double GetCurrentValueCore(double defaultOriginValue, double defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(double); }
    protected override void OnChanged() { }
  }
  public abstract partial class DoubleKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected DoubleKeyFrame() { }
    protected DoubleKeyFrame(double value) { }
    protected DoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public double Value { get { return default(double); } set { } }
    public double InterpolateValue(double baseValue, double keyFrameProgress) { return default(double); }
    protected abstract double InterpolateValueCore(double baseValue, double keyFrameProgress);
  }
  public partial class DoubleKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public DoubleKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.DoubleKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.DoubleKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.DoubleKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.DoubleKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.DoubleKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.DoubleKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.DoubleKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.DoubleKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class EasingByteKeyFrame : System.Windows.Media.Animation.ByteKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingByteKeyFrame() { }
    public EasingByteKeyFrame(byte value) { }
    public EasingByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override byte InterpolateValueCore(byte baseValue, double keyFrameProgress) { return default(byte); }
  }
  public partial class EasingColorKeyFrame : System.Windows.Media.Animation.ColorKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingColorKeyFrame() { }
    public EasingColorKeyFrame(System.Windows.Media.Color value) { }
    public EasingColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress) { return default(System.Windows.Media.Color); }
  }
  public partial class EasingDecimalKeyFrame : System.Windows.Media.Animation.DecimalKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingDecimalKeyFrame() { }
    public EasingDecimalKeyFrame(decimal value) { }
    public EasingDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress) { return default(decimal); }
  }
  public partial class EasingDoubleKeyFrame : System.Windows.Media.Animation.DoubleKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingDoubleKeyFrame() { }
    public EasingDoubleKeyFrame(double value) { }
    public EasingDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double InterpolateValueCore(double baseValue, double keyFrameProgress) { return default(double); }
  }
  public abstract partial class EasingFunctionBase : System.Windows.Freezable, System.Windows.Media.Animation.IEasingFunction {
    public static readonly System.Windows.DependencyProperty EasingModeProperty;
    protected EasingFunctionBase() { }
    public System.Windows.Media.Animation.EasingMode EasingMode { get { return default(System.Windows.Media.Animation.EasingMode); } set { } }
    public double Ease(double normalizedTime) { return default(double); }
    protected abstract double EaseInCore(double normalizedTime);
  }
  public partial class EasingInt16KeyFrame : System.Windows.Media.Animation.Int16KeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingInt16KeyFrame() { }
    public EasingInt16KeyFrame(short value) { }
    public EasingInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override short InterpolateValueCore(short baseValue, double keyFrameProgress) { return default(short); }
  }
  public partial class EasingInt32KeyFrame : System.Windows.Media.Animation.Int32KeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingInt32KeyFrame() { }
    public EasingInt32KeyFrame(int value) { }
    public EasingInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override int InterpolateValueCore(int baseValue, double keyFrameProgress) { return default(int); }
  }
  public partial class EasingInt64KeyFrame : System.Windows.Media.Animation.Int64KeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingInt64KeyFrame() { }
    public EasingInt64KeyFrame(long value) { }
    public EasingInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override long InterpolateValueCore(long baseValue, double keyFrameProgress) { return default(long); }
  }
  public enum EasingMode {
    EaseIn = 0,
    EaseInOut = 2,
    EaseOut = 1,
  }
  public partial class EasingPoint3DKeyFrame : System.Windows.Media.Animation.Point3DKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingPoint3DKeyFrame() { }
    public EasingPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
    public EasingPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Point3D); }
  }
  public partial class EasingPointKeyFrame : System.Windows.Media.Animation.PointKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingPointKeyFrame() { }
    public EasingPointKeyFrame(System.Windows.Point value) { }
    public EasingPointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingPointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress) { return default(System.Windows.Point); }
  }
  public partial class EasingQuaternionKeyFrame : System.Windows.Media.Animation.QuaternionKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty UseShortestPathProperty;
    public EasingQuaternionKeyFrame() { }
    public EasingQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
    public EasingQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public bool UseShortestPath { get { return default(bool); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Quaternion); }
  }
  public partial class EasingRectKeyFrame : System.Windows.Media.Animation.RectKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingRectKeyFrame() { }
    public EasingRectKeyFrame(System.Windows.Rect value) { }
    public EasingRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress) { return default(System.Windows.Rect); }
  }
  public partial class EasingRotation3DKeyFrame : System.Windows.Media.Animation.Rotation3DKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingRotation3DKeyFrame() { }
    public EasingRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
    public EasingRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Rotation3D); }
  }
  public partial class EasingSingleKeyFrame : System.Windows.Media.Animation.SingleKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingSingleKeyFrame() { }
    public EasingSingleKeyFrame(float value) { }
    public EasingSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override float InterpolateValueCore(float baseValue, double keyFrameProgress) { return default(float); }
  }
  public partial class EasingSizeKeyFrame : System.Windows.Media.Animation.SizeKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingSizeKeyFrame() { }
    public EasingSizeKeyFrame(System.Windows.Size value) { }
    public EasingSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress) { return default(System.Windows.Size); }
  }
  public partial class EasingVector3DKeyFrame : System.Windows.Media.Animation.Vector3DKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingVector3DKeyFrame() { }
    public EasingVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
    public EasingVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Vector3D); }
  }
  public partial class EasingVectorKeyFrame : System.Windows.Media.Animation.VectorKeyFrame {
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public EasingVectorKeyFrame() { }
    public EasingVectorKeyFrame(System.Windows.Vector value) { }
    public EasingVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public EasingVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.IEasingFunction easingFunction) { }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress) { return default(System.Windows.Vector); }
  }
  public partial class ElasticEase : System.Windows.Media.Animation.EasingFunctionBase {
    public static readonly System.Windows.DependencyProperty OscillationsProperty;
    public static readonly System.Windows.DependencyProperty SpringinessProperty;
    public ElasticEase() { }
    public int Oscillations { get { return default(int); } set { } }
    public double Springiness { get { return default(double); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public partial class ExponentialEase : System.Windows.Media.Animation.EasingFunctionBase {
    public static readonly System.Windows.DependencyProperty ExponentProperty;
    public ExponentialEase() { }
    public double Exponent { get { return default(double); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public enum FillBehavior {
    HoldEnd = 0,
    Stop = 1,
  }
  public enum HandoffBehavior {
    Compose = 1,
    SnapshotAndReplace = 0,
  }
  public partial interface IAnimatable {
    bool HasAnimatedProperties { get; }
    void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);
    void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);
    void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    object GetAnimationBaseValue(System.Windows.DependencyProperty dp);
  }
  public partial interface IEasingFunction {
    double Ease(double normalizedTime);
  }
  public partial interface IKeyFrame {
    System.Windows.Media.Animation.KeyTime KeyTime { get; set; }
    object Value { get; set; }
  }
  public partial interface IKeyFrameAnimation {
    System.Collections.IList KeyFrames { get; set; }
  }
  public partial class Int16Animation : System.Windows.Media.Animation.Int16AnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public Int16Animation() { }
    public Int16Animation(short fromValue, short toValue, System.Windows.Duration duration) { }
    public Int16Animation(short fromValue, short toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public Int16Animation(short toValue, System.Windows.Duration duration) { }
    public Int16Animation(short toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Int16> By { get { return default(System.Nullable<System.Int16>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Int16> From { get { return default(System.Nullable<System.Int16>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Int16> To { get { return default(System.Nullable<System.Int16>); } set { } }
    public new System.Windows.Media.Animation.Int16Animation Clone() { return default(System.Windows.Media.Animation.Int16Animation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override short GetCurrentValueCore(short defaultOriginValue, short defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(short); }
  }
  public abstract partial class Int16AnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected Int16AnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.Int16AnimationBase Clone() { return default(System.Windows.Media.Animation.Int16AnimationBase); }
    public short GetCurrentValue(short defaultOriginValue, short defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(short); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected abstract short GetCurrentValueCore(short defaultOriginValue, short defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class Int16AnimationUsingKeyFrames : System.Windows.Media.Animation.Int16AnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public Int16AnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.Int16KeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.Int16KeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.Int16AnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.Int16AnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.Int16AnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.Int16AnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override short GetCurrentValueCore(short defaultOriginValue, short defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(short); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class Int16KeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected Int16KeyFrame() { }
    protected Int16KeyFrame(short value) { }
    protected Int16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public short Value { get { return default(short); } set { } }
    public short InterpolateValue(short baseValue, double keyFrameProgress) { return default(short); }
    protected abstract short InterpolateValueCore(short baseValue, double keyFrameProgress);
  }
  public partial class Int16KeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public Int16KeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.Int16KeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.Int16KeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.Int16KeyFrame this[int index] { get { return default(System.Windows.Media.Animation.Int16KeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.Int16KeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.Int16KeyFrameCollection Clone() { return default(System.Windows.Media.Animation.Int16KeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.Int16KeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.Int16KeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.Int16KeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.Int16KeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.Int16KeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class Int32Animation : System.Windows.Media.Animation.Int32AnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public Int32Animation() { }
    public Int32Animation(int fromValue, int toValue, System.Windows.Duration duration) { }
    public Int32Animation(int fromValue, int toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public Int32Animation(int toValue, System.Windows.Duration duration) { }
    public Int32Animation(int toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Int32> By { get { return default(System.Nullable<System.Int32>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Int32> From { get { return default(System.Nullable<System.Int32>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Int32> To { get { return default(System.Nullable<System.Int32>); } set { } }
    public new System.Windows.Media.Animation.Int32Animation Clone() { return default(System.Windows.Media.Animation.Int32Animation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override int GetCurrentValueCore(int defaultOriginValue, int defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(int); }
  }
  public abstract partial class Int32AnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected Int32AnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.Int32AnimationBase Clone() { return default(System.Windows.Media.Animation.Int32AnimationBase); }
    public int GetCurrentValue(int defaultOriginValue, int defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(int); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected abstract int GetCurrentValueCore(int defaultOriginValue, int defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class Int32AnimationUsingKeyFrames : System.Windows.Media.Animation.Int32AnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public Int32AnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.Int32KeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.Int32KeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.Int32AnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.Int32AnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.Int32AnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.Int32AnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override int GetCurrentValueCore(int defaultOriginValue, int defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(int); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class Int32KeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected Int32KeyFrame() { }
    protected Int32KeyFrame(int value) { }
    protected Int32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public int Value { get { return default(int); } set { } }
    public int InterpolateValue(int baseValue, double keyFrameProgress) { return default(int); }
    protected abstract int InterpolateValueCore(int baseValue, double keyFrameProgress);
  }
  public partial class Int32KeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public Int32KeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.Int32KeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.Int32KeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.Int32KeyFrame this[int index] { get { return default(System.Windows.Media.Animation.Int32KeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.Int32KeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.Int32KeyFrameCollection Clone() { return default(System.Windows.Media.Animation.Int32KeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.Int32KeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.Int32KeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.Int32KeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.Int32KeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.Int32KeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class Int64Animation : System.Windows.Media.Animation.Int64AnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public Int64Animation() { }
    public Int64Animation(long fromValue, long toValue, System.Windows.Duration duration) { }
    public Int64Animation(long fromValue, long toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public Int64Animation(long toValue, System.Windows.Duration duration) { }
    public Int64Animation(long toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Int64> By { get { return default(System.Nullable<System.Int64>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Int64> From { get { return default(System.Nullable<System.Int64>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Int64> To { get { return default(System.Nullable<System.Int64>); } set { } }
    public new System.Windows.Media.Animation.Int64Animation Clone() { return default(System.Windows.Media.Animation.Int64Animation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override long GetCurrentValueCore(long defaultOriginValue, long defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(long); }
  }
  public abstract partial class Int64AnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected Int64AnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.Int64AnimationBase Clone() { return default(System.Windows.Media.Animation.Int64AnimationBase); }
    public long GetCurrentValue(long defaultOriginValue, long defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(long); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected abstract long GetCurrentValueCore(long defaultOriginValue, long defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class Int64AnimationUsingKeyFrames : System.Windows.Media.Animation.Int64AnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public Int64AnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.Int64KeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.Int64KeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.Int64AnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.Int64AnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.Int64AnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.Int64AnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override long GetCurrentValueCore(long defaultOriginValue, long defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(long); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class Int64KeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected Int64KeyFrame() { }
    protected Int64KeyFrame(long value) { }
    protected Int64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public long Value { get { return default(long); } set { } }
    public long InterpolateValue(long baseValue, double keyFrameProgress) { return default(long); }
    protected abstract long InterpolateValueCore(long baseValue, double keyFrameProgress);
  }
  public partial class Int64KeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public Int64KeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.Int64KeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.Int64KeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.Int64KeyFrame this[int index] { get { return default(System.Windows.Media.Animation.Int64KeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.Int64KeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.Int64KeyFrameCollection Clone() { return default(System.Windows.Media.Animation.Int64KeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.Int64KeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.Int64KeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.Int64KeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.Int64KeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.Int64KeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.KeySplineConverter))]
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public partial class KeySpline : System.Windows.Freezable, System.IFormattable {
    public KeySpline() { }
    public KeySpline(double x1, double y1, double x2, double y2) { }
    public KeySpline(System.Windows.Point controlPoint1, System.Windows.Point controlPoint2) { }
    public System.Windows.Point ControlPoint1 { get { return default(System.Windows.Point); } set { } }
    public System.Windows.Point ControlPoint2 { get { return default(System.Windows.Point); } set { } }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public double GetSplineProgress(double linearProgress) { return default(double); }
    protected override void OnChanged() { }
    string System.IFormattable.ToString(string format, System.IFormatProvider formatProvider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider formatProvider) { return default(string); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.KeyTimeConverter))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct KeyTime : System.IEquatable<System.Windows.Media.Animation.KeyTime> {
    public static System.Windows.Media.Animation.KeyTime Paced { get { return default(System.Windows.Media.Animation.KeyTime); } }
    public double Percent { get { return default(double); } }
    public System.TimeSpan TimeSpan { get { return default(System.TimeSpan); } }
    public System.Windows.Media.Animation.KeyTimeType Type { get { return default(System.Windows.Media.Animation.KeyTimeType); } }
    public static System.Windows.Media.Animation.KeyTime Uniform { get { return default(System.Windows.Media.Animation.KeyTime); } }
    public override bool Equals(object value) { return default(bool); }
    public bool Equals(System.Windows.Media.Animation.KeyTime value) { return default(bool); }
    public static bool Equals(System.Windows.Media.Animation.KeyTime keyTime1, System.Windows.Media.Animation.KeyTime keyTime2) { return default(bool); }
    public static System.Windows.Media.Animation.KeyTime FromPercent(double percent) { return default(System.Windows.Media.Animation.KeyTime); }
    public static System.Windows.Media.Animation.KeyTime FromTimeSpan(System.TimeSpan timeSpan) { return default(System.Windows.Media.Animation.KeyTime); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.Animation.KeyTime keyTime1, System.Windows.Media.Animation.KeyTime keyTime2) { return default(bool); }
    public static implicit operator System.Windows.Media.Animation.KeyTime (System.TimeSpan timeSpan) { return default(System.Windows.Media.Animation.KeyTime); }
    public static bool operator !=(System.Windows.Media.Animation.KeyTime keyTime1, System.Windows.Media.Animation.KeyTime keyTime2) { return default(bool); }
    public override string ToString() { return default(string); }
  }
  public enum KeyTimeType : byte {
    Paced = (byte)3,
    Percent = (byte)1,
    TimeSpan = (byte)2,
    Uniform = (byte)0,
  }
  public partial class LinearByteKeyFrame : System.Windows.Media.Animation.ByteKeyFrame {
    public LinearByteKeyFrame() { }
    public LinearByteKeyFrame(byte value) { }
    public LinearByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override byte InterpolateValueCore(byte baseValue, double keyFrameProgress) { return default(byte); }
  }
  public partial class LinearColorKeyFrame : System.Windows.Media.Animation.ColorKeyFrame {
    public LinearColorKeyFrame() { }
    public LinearColorKeyFrame(System.Windows.Media.Color value) { }
    public LinearColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress) { return default(System.Windows.Media.Color); }
  }
  public partial class LinearDecimalKeyFrame : System.Windows.Media.Animation.DecimalKeyFrame {
    public LinearDecimalKeyFrame() { }
    public LinearDecimalKeyFrame(decimal value) { }
    public LinearDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress) { return default(decimal); }
  }
  public partial class LinearDoubleKeyFrame : System.Windows.Media.Animation.DoubleKeyFrame {
    public LinearDoubleKeyFrame() { }
    public LinearDoubleKeyFrame(double value) { }
    public LinearDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double InterpolateValueCore(double baseValue, double keyFrameProgress) { return default(double); }
  }
  public partial class LinearInt16KeyFrame : System.Windows.Media.Animation.Int16KeyFrame {
    public LinearInt16KeyFrame() { }
    public LinearInt16KeyFrame(short value) { }
    public LinearInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override short InterpolateValueCore(short baseValue, double keyFrameProgress) { return default(short); }
  }
  public partial class LinearInt32KeyFrame : System.Windows.Media.Animation.Int32KeyFrame {
    public LinearInt32KeyFrame() { }
    public LinearInt32KeyFrame(int value) { }
    public LinearInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override int InterpolateValueCore(int baseValue, double keyFrameProgress) { return default(int); }
  }
  public partial class LinearInt64KeyFrame : System.Windows.Media.Animation.Int64KeyFrame {
    public LinearInt64KeyFrame() { }
    public LinearInt64KeyFrame(long value) { }
    public LinearInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override long InterpolateValueCore(long baseValue, double keyFrameProgress) { return default(long); }
  }
  public partial class LinearPoint3DKeyFrame : System.Windows.Media.Animation.Point3DKeyFrame {
    public LinearPoint3DKeyFrame() { }
    public LinearPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
    public LinearPoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Point3D); }
  }
  public partial class LinearPointKeyFrame : System.Windows.Media.Animation.PointKeyFrame {
    public LinearPointKeyFrame() { }
    public LinearPointKeyFrame(System.Windows.Point value) { }
    public LinearPointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress) { return default(System.Windows.Point); }
  }
  public partial class LinearQuaternionKeyFrame : System.Windows.Media.Animation.QuaternionKeyFrame {
    public static readonly System.Windows.DependencyProperty UseShortestPathProperty;
    public LinearQuaternionKeyFrame() { }
    public LinearQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
    public LinearQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public bool UseShortestPath { get { return default(bool); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Quaternion); }
  }
  public partial class LinearRectKeyFrame : System.Windows.Media.Animation.RectKeyFrame {
    public LinearRectKeyFrame() { }
    public LinearRectKeyFrame(System.Windows.Rect value) { }
    public LinearRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress) { return default(System.Windows.Rect); }
  }
  public partial class LinearRotation3DKeyFrame : System.Windows.Media.Animation.Rotation3DKeyFrame {
    public LinearRotation3DKeyFrame() { }
    public LinearRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
    public LinearRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Rotation3D); }
  }
  public partial class LinearSingleKeyFrame : System.Windows.Media.Animation.SingleKeyFrame {
    public LinearSingleKeyFrame() { }
    public LinearSingleKeyFrame(float value) { }
    public LinearSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override float InterpolateValueCore(float baseValue, double keyFrameProgress) { return default(float); }
  }
  public partial class LinearSizeKeyFrame : System.Windows.Media.Animation.SizeKeyFrame {
    public LinearSizeKeyFrame() { }
    public LinearSizeKeyFrame(System.Windows.Size value) { }
    public LinearSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress) { return default(System.Windows.Size); }
  }
  public partial class LinearVector3DKeyFrame : System.Windows.Media.Animation.Vector3DKeyFrame {
    public LinearVector3DKeyFrame() { }
    public LinearVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
    public LinearVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Vector3D); }
  }
  public partial class LinearVectorKeyFrame : System.Windows.Media.Animation.VectorKeyFrame {
    public LinearVectorKeyFrame() { }
    public LinearVectorKeyFrame(System.Windows.Vector value) { }
    public LinearVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress) { return default(System.Windows.Vector); }
  }
  public abstract partial class MatrixAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected MatrixAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.MatrixAnimationBase Clone() { return default(System.Windows.Media.Animation.MatrixAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Media.Matrix GetCurrentValue(System.Windows.Media.Matrix defaultOriginValue, System.Windows.Media.Matrix defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Matrix); }
    protected abstract System.Windows.Media.Matrix GetCurrentValueCore(System.Windows.Media.Matrix defaultOriginValue, System.Windows.Media.Matrix defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class MatrixAnimationUsingKeyFrames : System.Windows.Media.Animation.MatrixAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public MatrixAnimationUsingKeyFrames() { }
    public System.Windows.Media.Animation.MatrixKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.MatrixKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.MatrixAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Media.Matrix GetCurrentValueCore(System.Windows.Media.Matrix defaultOriginValue, System.Windows.Media.Matrix defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Matrix); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public partial class MatrixAnimationUsingPath : System.Windows.Media.Animation.MatrixAnimationBase {
    public static readonly System.Windows.DependencyProperty DoesRotateWithTangentProperty;
    public static readonly System.Windows.DependencyProperty IsAngleCumulativeProperty;
    public static readonly System.Windows.DependencyProperty IsOffsetCumulativeProperty;
    public static readonly System.Windows.DependencyProperty PathGeometryProperty;
    public MatrixAnimationUsingPath() { }
    public bool DoesRotateWithTangent { get { return default(bool); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsAngleCumulative { get { return default(bool); } set { } }
    public bool IsOffsetCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.PathGeometry PathGeometry { get { return default(System.Windows.Media.PathGeometry); } set { } }
    public new System.Windows.Media.Animation.MatrixAnimationUsingPath Clone() { return default(System.Windows.Media.Animation.MatrixAnimationUsingPath); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Matrix GetCurrentValueCore(System.Windows.Media.Matrix defaultOriginValue, System.Windows.Media.Matrix defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Matrix); }
    protected override void OnChanged() { }
  }
  public abstract partial class MatrixKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected MatrixKeyFrame() { }
    protected MatrixKeyFrame(System.Windows.Media.Matrix value) { }
    protected MatrixKeyFrame(System.Windows.Media.Matrix value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Media.Matrix Value { get { return default(System.Windows.Media.Matrix); } set { } }
    public System.Windows.Media.Matrix InterpolateValue(System.Windows.Media.Matrix baseValue, double keyFrameProgress) { return default(System.Windows.Media.Matrix); }
    protected abstract System.Windows.Media.Matrix InterpolateValueCore(System.Windows.Media.Matrix baseValue, double keyFrameProgress);
  }
  public partial class MatrixKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public MatrixKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.MatrixKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.MatrixKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.MatrixKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.MatrixKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.MatrixKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.MatrixKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.MatrixKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.MatrixKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public abstract partial class ObjectAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected ObjectAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.ObjectAnimationBase Clone() { return default(System.Windows.Media.Animation.ObjectAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected abstract object GetCurrentValueCore(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class ObjectAnimationUsingKeyFrames : System.Windows.Media.Animation.ObjectAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public ObjectAnimationUsingKeyFrames() { }
    public System.Windows.Media.Animation.ObjectKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.ObjectKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override object GetCurrentValueCore(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class ObjectKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected ObjectKeyFrame() { }
    protected ObjectKeyFrame(object value) { }
    protected ObjectKeyFrame(object value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public object Value { get { return default(object); } set { } }
    public object InterpolateValue(object baseValue, double keyFrameProgress) { return default(object); }
    protected abstract object InterpolateValueCore(object baseValue, double keyFrameProgress);
  }
  public partial class ObjectKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public ObjectKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.ObjectKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.ObjectKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.ObjectKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.ObjectKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.ObjectKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.ObjectKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.ObjectKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.ObjectKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class ParallelTimeline : System.Windows.Media.Animation.TimelineGroup {
    public static readonly System.Windows.DependencyProperty SlipBehaviorProperty;
    public ParallelTimeline() { }
    public ParallelTimeline(System.Nullable<System.TimeSpan> beginTime) { }
    public ParallelTimeline(System.Nullable<System.TimeSpan> beginTime, System.Windows.Duration duration) { }
    public ParallelTimeline(System.Nullable<System.TimeSpan> beginTime, System.Windows.Duration duration, System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { }
    [System.ComponentModel.DefaultValueAttribute((System.Windows.Media.Animation.SlipBehavior)(0))]
    public System.Windows.Media.Animation.SlipBehavior SlipBehavior { get { return default(System.Windows.Media.Animation.SlipBehavior); } set { } }
    public new System.Windows.Media.Animation.ParallelTimeline Clone() { return default(System.Windows.Media.Animation.ParallelTimeline); }
    public new System.Windows.Media.Animation.ParallelTimeline CloneCurrentValue() { return default(System.Windows.Media.Animation.ParallelTimeline); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
  }
  public enum PathAnimationSource : byte {
    Angle = (byte)2,
    X = (byte)0,
    Y = (byte)1,
  }
  public partial class Point3DAnimation : System.Windows.Media.Animation.Point3DAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public Point3DAnimation() { }
    public Point3DAnimation(System.Windows.Media.Media3D.Point3D toValue, System.Windows.Duration duration) { }
    public Point3DAnimation(System.Windows.Media.Media3D.Point3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public Point3DAnimation(System.Windows.Media.Media3D.Point3D fromValue, System.Windows.Media.Media3D.Point3D toValue, System.Windows.Duration duration) { }
    public Point3DAnimation(System.Windows.Media.Media3D.Point3D fromValue, System.Windows.Media.Media3D.Point3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Windows.Media.Media3D.Point3D> By { get { return default(System.Nullable<System.Windows.Media.Media3D.Point3D>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Windows.Media.Media3D.Point3D> From { get { return default(System.Nullable<System.Windows.Media.Media3D.Point3D>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Windows.Media.Media3D.Point3D> To { get { return default(System.Nullable<System.Windows.Media.Media3D.Point3D>); } set { } }
    public new System.Windows.Media.Animation.Point3DAnimation Clone() { return default(System.Windows.Media.Animation.Point3DAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Point3D GetCurrentValueCore(System.Windows.Media.Media3D.Point3D defaultOriginValue, System.Windows.Media.Media3D.Point3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Point3D); }
  }
  public abstract partial class Point3DAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected Point3DAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.Point3DAnimationBase Clone() { return default(System.Windows.Media.Animation.Point3DAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Media.Media3D.Point3D GetCurrentValue(System.Windows.Media.Media3D.Point3D defaultOriginValue, System.Windows.Media.Media3D.Point3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Point3D); }
    protected abstract System.Windows.Media.Media3D.Point3D GetCurrentValueCore(System.Windows.Media.Media3D.Point3D defaultOriginValue, System.Windows.Media.Media3D.Point3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class Point3DAnimationUsingKeyFrames : System.Windows.Media.Animation.Point3DAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public Point3DAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.Point3DKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.Point3DKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.Point3DAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Media.Media3D.Point3D GetCurrentValueCore(System.Windows.Media.Media3D.Point3D defaultOriginValue, System.Windows.Media.Media3D.Point3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Point3D); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class Point3DKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected Point3DKeyFrame() { }
    protected Point3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
    protected Point3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Media.Media3D.Point3D Value { get { return default(System.Windows.Media.Media3D.Point3D); } set { } }
    public System.Windows.Media.Media3D.Point3D InterpolateValue(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Point3D); }
    protected abstract System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress);
  }
  public partial class Point3DKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public Point3DKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.Point3DKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.Point3DKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.Point3DKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.Point3DKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.Point3DKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.Point3DKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.Point3DKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.Point3DKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class PointAnimation : System.Windows.Media.Animation.PointAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public PointAnimation() { }
    public PointAnimation(System.Windows.Point toValue, System.Windows.Duration duration) { }
    public PointAnimation(System.Windows.Point toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public PointAnimation(System.Windows.Point fromValue, System.Windows.Point toValue, System.Windows.Duration duration) { }
    public PointAnimation(System.Windows.Point fromValue, System.Windows.Point toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Windows.Point> By { get { return default(System.Nullable<System.Windows.Point>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Windows.Point> From { get { return default(System.Nullable<System.Windows.Point>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Windows.Point> To { get { return default(System.Nullable<System.Windows.Point>); } set { } }
    public new System.Windows.Media.Animation.PointAnimation Clone() { return default(System.Windows.Media.Animation.PointAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Point GetCurrentValueCore(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Point); }
  }
  public abstract partial class PointAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected PointAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.PointAnimationBase Clone() { return default(System.Windows.Media.Animation.PointAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Point GetCurrentValue(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Point); }
    protected abstract System.Windows.Point GetCurrentValueCore(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class PointAnimationUsingKeyFrames : System.Windows.Media.Animation.PointAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public PointAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.PointKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.PointKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.PointAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.PointAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.PointAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.PointAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Point GetCurrentValueCore(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Point); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public partial class PointAnimationUsingPath : System.Windows.Media.Animation.PointAnimationBase {
    public static readonly System.Windows.DependencyProperty PathGeometryProperty;
    public PointAnimationUsingPath() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.PathGeometry PathGeometry { get { return default(System.Windows.Media.PathGeometry); } set { } }
    public new System.Windows.Media.Animation.PointAnimationUsingPath Clone() { return default(System.Windows.Media.Animation.PointAnimationUsingPath); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Point GetCurrentValueCore(System.Windows.Point defaultOriginValue, System.Windows.Point defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Point); }
    protected override void OnChanged() { }
  }
  public abstract partial class PointKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected PointKeyFrame() { }
    protected PointKeyFrame(System.Windows.Point value) { }
    protected PointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Point Value { get { return default(System.Windows.Point); } set { } }
    public System.Windows.Point InterpolateValue(System.Windows.Point baseValue, double keyFrameProgress) { return default(System.Windows.Point); }
    protected abstract System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress);
  }
  public partial class PointKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public PointKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.PointKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.PointKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.PointKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.PointKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.PointKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.PointKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.PointKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.PointKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.PointKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.PointKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.PointKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.PointKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class PowerEase : System.Windows.Media.Animation.EasingFunctionBase {
    public static readonly System.Windows.DependencyProperty PowerProperty;
    public PowerEase() { }
    public double Power { get { return default(double); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public partial class QuadraticEase : System.Windows.Media.Animation.EasingFunctionBase {
    public QuadraticEase() { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public partial class QuarticEase : System.Windows.Media.Animation.EasingFunctionBase {
    public QuarticEase() { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public partial class QuaternionAnimation : System.Windows.Media.Animation.QuaternionAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public static readonly System.Windows.DependencyProperty UseShortestPathProperty;
    public QuaternionAnimation() { }
    public QuaternionAnimation(System.Windows.Media.Media3D.Quaternion toValue, System.Windows.Duration duration) { }
    public QuaternionAnimation(System.Windows.Media.Media3D.Quaternion toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public QuaternionAnimation(System.Windows.Media.Media3D.Quaternion fromValue, System.Windows.Media.Media3D.Quaternion toValue, System.Windows.Duration duration) { }
    public QuaternionAnimation(System.Windows.Media.Media3D.Quaternion fromValue, System.Windows.Media.Media3D.Quaternion toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Windows.Media.Media3D.Quaternion> By { get { return default(System.Nullable<System.Windows.Media.Media3D.Quaternion>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Windows.Media.Media3D.Quaternion> From { get { return default(System.Nullable<System.Windows.Media.Media3D.Quaternion>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Windows.Media.Media3D.Quaternion> To { get { return default(System.Nullable<System.Windows.Media.Media3D.Quaternion>); } set { } }
    public bool UseShortestPath { get { return default(bool); } set { } }
    public new System.Windows.Media.Animation.QuaternionAnimation Clone() { return default(System.Windows.Media.Animation.QuaternionAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Quaternion GetCurrentValueCore(System.Windows.Media.Media3D.Quaternion defaultOriginValue, System.Windows.Media.Media3D.Quaternion defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Quaternion); }
  }
  public abstract partial class QuaternionAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected QuaternionAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.QuaternionAnimationBase Clone() { return default(System.Windows.Media.Animation.QuaternionAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Media.Media3D.Quaternion GetCurrentValue(System.Windows.Media.Media3D.Quaternion defaultOriginValue, System.Windows.Media.Media3D.Quaternion defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Quaternion); }
    protected abstract System.Windows.Media.Media3D.Quaternion GetCurrentValueCore(System.Windows.Media.Media3D.Quaternion defaultOriginValue, System.Windows.Media.Media3D.Quaternion defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class QuaternionAnimationUsingKeyFrames : System.Windows.Media.Animation.QuaternionAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public QuaternionAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.QuaternionKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.QuaternionKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Media.Media3D.Quaternion GetCurrentValueCore(System.Windows.Media.Media3D.Quaternion defaultOriginValue, System.Windows.Media.Media3D.Quaternion defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Quaternion); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class QuaternionKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected QuaternionKeyFrame() { }
    protected QuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
    protected QuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Media.Media3D.Quaternion Value { get { return default(System.Windows.Media.Media3D.Quaternion); } set { } }
    public System.Windows.Media.Media3D.Quaternion InterpolateValue(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Quaternion); }
    protected abstract System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress);
  }
  public partial class QuaternionKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public QuaternionKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.QuaternionKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.QuaternionKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.QuaternionKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.QuaternionKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.QuaternionKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.QuaternionKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.QuaternionKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.QuaternionKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class QuinticEase : System.Windows.Media.Animation.EasingFunctionBase {
    public QuinticEase() { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public partial class RectAnimation : System.Windows.Media.Animation.RectAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public RectAnimation() { }
    public RectAnimation(System.Windows.Rect toValue, System.Windows.Duration duration) { }
    public RectAnimation(System.Windows.Rect toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public RectAnimation(System.Windows.Rect fromValue, System.Windows.Rect toValue, System.Windows.Duration duration) { }
    public RectAnimation(System.Windows.Rect fromValue, System.Windows.Rect toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Windows.Rect> By { get { return default(System.Nullable<System.Windows.Rect>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Windows.Rect> From { get { return default(System.Nullable<System.Windows.Rect>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Windows.Rect> To { get { return default(System.Nullable<System.Windows.Rect>); } set { } }
    public new System.Windows.Media.Animation.RectAnimation Clone() { return default(System.Windows.Media.Animation.RectAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Rect GetCurrentValueCore(System.Windows.Rect defaultOriginValue, System.Windows.Rect defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Rect); }
  }
  public abstract partial class RectAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected RectAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.RectAnimationBase Clone() { return default(System.Windows.Media.Animation.RectAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Rect GetCurrentValue(System.Windows.Rect defaultOriginValue, System.Windows.Rect defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Rect); }
    protected abstract System.Windows.Rect GetCurrentValueCore(System.Windows.Rect defaultOriginValue, System.Windows.Rect defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class RectAnimationUsingKeyFrames : System.Windows.Media.Animation.RectAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public RectAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.RectKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.RectKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.RectAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.RectAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.RectAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.RectAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Rect GetCurrentValueCore(System.Windows.Rect defaultOriginValue, System.Windows.Rect defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Rect); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class RectKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected RectKeyFrame() { }
    protected RectKeyFrame(System.Windows.Rect value) { }
    protected RectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Rect Value { get { return default(System.Windows.Rect); } set { } }
    public System.Windows.Rect InterpolateValue(System.Windows.Rect baseValue, double keyFrameProgress) { return default(System.Windows.Rect); }
    protected abstract System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress);
  }
  public partial class RectKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public RectKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.RectKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.RectKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.RectKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.RectKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.RectKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.RectKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.RectKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.RectKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.RectKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.RectKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.RectKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.RectKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Animation.RepeatBehaviorConverter))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct RepeatBehavior : System.IFormattable {
    public RepeatBehavior(double count) { throw new System.NotImplementedException(); }
    public RepeatBehavior(System.TimeSpan duration) { throw new System.NotImplementedException(); }
    public double Count { get { return default(double); } }
    public System.TimeSpan Duration { get { return default(System.TimeSpan); } }
    public static System.Windows.Media.Animation.RepeatBehavior Forever { get { return default(System.Windows.Media.Animation.RepeatBehavior); } }
    public bool HasCount { get { return default(bool); } }
    public bool HasDuration { get { return default(bool); } }
    public override bool Equals(object value) { return default(bool); }
    public bool Equals(System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { return default(bool); }
    public static bool Equals(System.Windows.Media.Animation.RepeatBehavior repeatBehavior1, System.Windows.Media.Animation.RepeatBehavior repeatBehavior2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.Animation.RepeatBehavior repeatBehavior1, System.Windows.Media.Animation.RepeatBehavior repeatBehavior2) { return default(bool); }
    public static bool operator !=(System.Windows.Media.Animation.RepeatBehavior repeatBehavior1, System.Windows.Media.Animation.RepeatBehavior repeatBehavior2) { return default(bool); }
    string System.IFormattable.ToString(string format, System.IFormatProvider formatProvider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider formatProvider) { return default(string); }
  }
  public sealed partial class RepeatBehaviorConverter : System.ComponentModel.TypeConverter {
    public RepeatBehaviorConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo cultureInfo, object value) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo cultureInfo, object value, System.Type destinationType) { return default(object); }
  }
  public partial class Rotation3DAnimation : System.Windows.Media.Animation.Rotation3DAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public Rotation3DAnimation() { }
    public Rotation3DAnimation(System.Windows.Media.Media3D.Rotation3D toValue, System.Windows.Duration duration) { }
    public Rotation3DAnimation(System.Windows.Media.Media3D.Rotation3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public Rotation3DAnimation(System.Windows.Media.Media3D.Rotation3D fromValue, System.Windows.Media.Media3D.Rotation3D toValue, System.Windows.Duration duration) { }
    public Rotation3DAnimation(System.Windows.Media.Media3D.Rotation3D fromValue, System.Windows.Media.Media3D.Rotation3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Windows.Media.Media3D.Rotation3D By { get { return default(System.Windows.Media.Media3D.Rotation3D); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Windows.Media.Media3D.Rotation3D From { get { return default(System.Windows.Media.Media3D.Rotation3D); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Media3D.Rotation3D To { get { return default(System.Windows.Media.Media3D.Rotation3D); } set { } }
    public new System.Windows.Media.Animation.Rotation3DAnimation Clone() { return default(System.Windows.Media.Animation.Rotation3DAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Rotation3D GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D defaultOriginValue, System.Windows.Media.Media3D.Rotation3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Rotation3D); }
  }
  public abstract partial class Rotation3DAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected Rotation3DAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.Rotation3DAnimationBase Clone() { return default(System.Windows.Media.Animation.Rotation3DAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Media.Media3D.Rotation3D GetCurrentValue(System.Windows.Media.Media3D.Rotation3D defaultOriginValue, System.Windows.Media.Media3D.Rotation3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Rotation3D); }
    protected abstract System.Windows.Media.Media3D.Rotation3D GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D defaultOriginValue, System.Windows.Media.Media3D.Rotation3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class Rotation3DAnimationUsingKeyFrames : System.Windows.Media.Animation.Rotation3DAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public Rotation3DAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.Rotation3DKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.Rotation3DKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Media.Media3D.Rotation3D GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D defaultOriginValue, System.Windows.Media.Media3D.Rotation3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Rotation3D); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class Rotation3DKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected Rotation3DKeyFrame() { }
    protected Rotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
    protected Rotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Media.Media3D.Rotation3D Value { get { return default(System.Windows.Media.Media3D.Rotation3D); } set { } }
    public System.Windows.Media.Media3D.Rotation3D InterpolateValue(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Rotation3D); }
    protected abstract System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress);
  }
  public partial class Rotation3DKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public Rotation3DKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.Rotation3DKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.Rotation3DKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.Rotation3DKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.Rotation3DKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.Rotation3DKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.Rotation3DKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.Rotation3DKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.Rotation3DKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class SineEase : System.Windows.Media.Animation.EasingFunctionBase {
    public SineEase() { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double EaseInCore(double normalizedTime) { return default(double); }
  }
  public partial class SingleAnimation : System.Windows.Media.Animation.SingleAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public SingleAnimation() { }
    public SingleAnimation(float fromValue, float toValue, System.Windows.Duration duration) { }
    public SingleAnimation(float fromValue, float toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public SingleAnimation(float toValue, System.Windows.Duration duration) { }
    public SingleAnimation(float toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Single> By { get { return default(System.Nullable<System.Single>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Single> From { get { return default(System.Nullable<System.Single>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Single> To { get { return default(System.Nullable<System.Single>); } set { } }
    public new System.Windows.Media.Animation.SingleAnimation Clone() { return default(System.Windows.Media.Animation.SingleAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override float GetCurrentValueCore(float defaultOriginValue, float defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(float); }
  }
  public abstract partial class SingleAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected SingleAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.SingleAnimationBase Clone() { return default(System.Windows.Media.Animation.SingleAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public float GetCurrentValue(float defaultOriginValue, float defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(float); }
    protected abstract float GetCurrentValueCore(float defaultOriginValue, float defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class SingleAnimationUsingKeyFrames : System.Windows.Media.Animation.SingleAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public SingleAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.SingleKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.SingleKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.SingleAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.SingleAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.SingleAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.SingleAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override float GetCurrentValueCore(float defaultOriginValue, float defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(float); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class SingleKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected SingleKeyFrame() { }
    protected SingleKeyFrame(float value) { }
    protected SingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public float Value { get { return default(float); } set { } }
    public float InterpolateValue(float baseValue, double keyFrameProgress) { return default(float); }
    protected abstract float InterpolateValueCore(float baseValue, double keyFrameProgress);
  }
  public partial class SingleKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public SingleKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.SingleKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.SingleKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.SingleKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.SingleKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.SingleKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.SingleKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.SingleKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.SingleKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.SingleKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.SingleKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.SingleKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.SingleKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class SizeAnimation : System.Windows.Media.Animation.SizeAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public SizeAnimation() { }
    public SizeAnimation(System.Windows.Size toValue, System.Windows.Duration duration) { }
    public SizeAnimation(System.Windows.Size toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public SizeAnimation(System.Windows.Size fromValue, System.Windows.Size toValue, System.Windows.Duration duration) { }
    public SizeAnimation(System.Windows.Size fromValue, System.Windows.Size toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Windows.Size> By { get { return default(System.Nullable<System.Windows.Size>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Windows.Size> From { get { return default(System.Nullable<System.Windows.Size>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Windows.Size> To { get { return default(System.Nullable<System.Windows.Size>); } set { } }
    public new System.Windows.Media.Animation.SizeAnimation Clone() { return default(System.Windows.Media.Animation.SizeAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Size GetCurrentValueCore(System.Windows.Size defaultOriginValue, System.Windows.Size defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Size); }
  }
  public abstract partial class SizeAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected SizeAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.SizeAnimationBase Clone() { return default(System.Windows.Media.Animation.SizeAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Size GetCurrentValue(System.Windows.Size defaultOriginValue, System.Windows.Size defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Size); }
    protected abstract System.Windows.Size GetCurrentValueCore(System.Windows.Size defaultOriginValue, System.Windows.Size defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class SizeAnimationUsingKeyFrames : System.Windows.Media.Animation.SizeAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public SizeAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.SizeKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.SizeKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.SizeAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.SizeAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.SizeAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.SizeAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Size GetCurrentValueCore(System.Windows.Size defaultOriginValue, System.Windows.Size defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Size); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class SizeKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected SizeKeyFrame() { }
    protected SizeKeyFrame(System.Windows.Size value) { }
    protected SizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Size Value { get { return default(System.Windows.Size); } set { } }
    public System.Windows.Size InterpolateValue(System.Windows.Size baseValue, double keyFrameProgress) { return default(System.Windows.Size); }
    protected abstract System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress);
  }
  public partial class SizeKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public SizeKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.SizeKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.SizeKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.SizeKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.SizeKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.SizeKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.SizeKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.SizeKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.SizeKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.SizeKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.SizeKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.SizeKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.SizeKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public enum SlipBehavior {
    Grow = 0,
    Slip = 1,
  }
  public partial class SplineByteKeyFrame : System.Windows.Media.Animation.ByteKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineByteKeyFrame() { }
    public SplineByteKeyFrame(byte value) { }
    public SplineByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineByteKeyFrame(byte value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override byte InterpolateValueCore(byte baseValue, double keyFrameProgress) { return default(byte); }
  }
  public partial class SplineColorKeyFrame : System.Windows.Media.Animation.ColorKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineColorKeyFrame() { }
    public SplineColorKeyFrame(System.Windows.Media.Color value) { }
    public SplineColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineColorKeyFrame(System.Windows.Media.Color value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Color InterpolateValueCore(System.Windows.Media.Color baseValue, double keyFrameProgress) { return default(System.Windows.Media.Color); }
  }
  public partial class SplineDecimalKeyFrame : System.Windows.Media.Animation.DecimalKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineDecimalKeyFrame() { }
    public SplineDecimalKeyFrame(decimal value) { }
    public SplineDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineDecimalKeyFrame(decimal value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override decimal InterpolateValueCore(decimal baseValue, double keyFrameProgress) { return default(decimal); }
  }
  public partial class SplineDoubleKeyFrame : System.Windows.Media.Animation.DoubleKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineDoubleKeyFrame() { }
    public SplineDoubleKeyFrame(double value) { }
    public SplineDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineDoubleKeyFrame(double value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override double InterpolateValueCore(double baseValue, double keyFrameProgress) { return default(double); }
  }
  public partial class SplineInt16KeyFrame : System.Windows.Media.Animation.Int16KeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineInt16KeyFrame() { }
    public SplineInt16KeyFrame(short value) { }
    public SplineInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineInt16KeyFrame(short value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override short InterpolateValueCore(short baseValue, double keyFrameProgress) { return default(short); }
  }
  public partial class SplineInt32KeyFrame : System.Windows.Media.Animation.Int32KeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineInt32KeyFrame() { }
    public SplineInt32KeyFrame(int value) { }
    public SplineInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineInt32KeyFrame(int value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override int InterpolateValueCore(int baseValue, double keyFrameProgress) { return default(int); }
  }
  public partial class SplineInt64KeyFrame : System.Windows.Media.Animation.Int64KeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineInt64KeyFrame() { }
    public SplineInt64KeyFrame(long value) { }
    public SplineInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineInt64KeyFrame(long value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override long InterpolateValueCore(long baseValue, double keyFrameProgress) { return default(long); }
  }
  public partial class SplinePoint3DKeyFrame : System.Windows.Media.Animation.Point3DKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplinePoint3DKeyFrame() { }
    public SplinePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value) { }
    public SplinePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplinePoint3DKeyFrame(System.Windows.Media.Media3D.Point3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Point3D InterpolateValueCore(System.Windows.Media.Media3D.Point3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Point3D); }
  }
  public partial class SplinePointKeyFrame : System.Windows.Media.Animation.PointKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplinePointKeyFrame() { }
    public SplinePointKeyFrame(System.Windows.Point value) { }
    public SplinePointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplinePointKeyFrame(System.Windows.Point value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Point InterpolateValueCore(System.Windows.Point baseValue, double keyFrameProgress) { return default(System.Windows.Point); }
  }
  public partial class SplineQuaternionKeyFrame : System.Windows.Media.Animation.QuaternionKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public static readonly System.Windows.DependencyProperty UseShortestPathProperty;
    public SplineQuaternionKeyFrame() { }
    public SplineQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value) { }
    public SplineQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineQuaternionKeyFrame(System.Windows.Media.Media3D.Quaternion value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    public bool UseShortestPath { get { return default(bool); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Quaternion InterpolateValueCore(System.Windows.Media.Media3D.Quaternion baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Quaternion); }
  }
  public partial class SplineRectKeyFrame : System.Windows.Media.Animation.RectKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineRectKeyFrame() { }
    public SplineRectKeyFrame(System.Windows.Rect value) { }
    public SplineRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineRectKeyFrame(System.Windows.Rect value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Rect InterpolateValueCore(System.Windows.Rect baseValue, double keyFrameProgress) { return default(System.Windows.Rect); }
  }
  public partial class SplineRotation3DKeyFrame : System.Windows.Media.Animation.Rotation3DKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineRotation3DKeyFrame() { }
    public SplineRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value) { }
    public SplineRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineRotation3DKeyFrame(System.Windows.Media.Media3D.Rotation3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Rotation3D InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Rotation3D); }
  }
  public partial class SplineSingleKeyFrame : System.Windows.Media.Animation.SingleKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineSingleKeyFrame() { }
    public SplineSingleKeyFrame(float value) { }
    public SplineSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineSingleKeyFrame(float value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override float InterpolateValueCore(float baseValue, double keyFrameProgress) { return default(float); }
  }
  public partial class SplineSizeKeyFrame : System.Windows.Media.Animation.SizeKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineSizeKeyFrame() { }
    public SplineSizeKeyFrame(System.Windows.Size value) { }
    public SplineSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineSizeKeyFrame(System.Windows.Size value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Size InterpolateValueCore(System.Windows.Size baseValue, double keyFrameProgress) { return default(System.Windows.Size); }
  }
  public partial class SplineVector3DKeyFrame : System.Windows.Media.Animation.Vector3DKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineVector3DKeyFrame() { }
    public SplineVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
    public SplineVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineVector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Vector3D); }
  }
  public partial class SplineVectorKeyFrame : System.Windows.Media.Animation.VectorKeyFrame {
    public static readonly System.Windows.DependencyProperty KeySplineProperty;
    public SplineVectorKeyFrame() { }
    public SplineVectorKeyFrame(System.Windows.Vector value) { }
    public SplineVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public SplineVectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime, System.Windows.Media.Animation.KeySpline keySpline) { }
    public System.Windows.Media.Animation.KeySpline KeySpline { get { return default(System.Windows.Media.Animation.KeySpline); } set { } }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress) { return default(System.Windows.Vector); }
  }
  public abstract partial class StringAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected StringAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.StringAnimationBase Clone() { return default(System.Windows.Media.Animation.StringAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public string GetCurrentValue(string defaultOriginValue, string defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(string); }
    protected abstract string GetCurrentValueCore(string defaultOriginValue, string defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class StringAnimationUsingKeyFrames : System.Windows.Media.Animation.StringAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public StringAnimationUsingKeyFrames() { }
    public System.Windows.Media.Animation.StringKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.StringKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.StringAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.StringAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.StringAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.StringAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override string GetCurrentValueCore(string defaultOriginValue, string defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(string); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class StringKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected StringKeyFrame() { }
    protected StringKeyFrame(string value) { }
    protected StringKeyFrame(string value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public string Value { get { return default(string); } set { } }
    public string InterpolateValue(string baseValue, double keyFrameProgress) { return default(string); }
    protected abstract string InterpolateValueCore(string baseValue, double keyFrameProgress);
  }
  public partial class StringKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public StringKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.StringKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.StringKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.StringKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.StringKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.StringKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.StringKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.StringKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.StringKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.StringKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.StringKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.StringKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.StringKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  [System.Windows.Markup.RuntimeNamePropertyAttribute("Name")]
  public abstract partial class Timeline : System.Windows.Media.Animation.Animatable {
    public static readonly System.Windows.DependencyProperty AccelerationRatioProperty;
    public static readonly System.Windows.DependencyProperty AutoReverseProperty;
    public static readonly System.Windows.DependencyProperty BeginTimeProperty;
    public static readonly System.Windows.DependencyProperty DecelerationRatioProperty;
    public static readonly System.Windows.DependencyProperty DesiredFrameRateProperty;
    public static readonly System.Windows.DependencyProperty DurationProperty;
    public static readonly System.Windows.DependencyProperty FillBehaviorProperty;
    public static readonly System.Windows.DependencyProperty NameProperty;
    public static readonly System.Windows.DependencyProperty RepeatBehaviorProperty;
    public static readonly System.Windows.DependencyProperty SpeedRatioProperty;
    protected Timeline() { }
    protected Timeline(System.Nullable<System.TimeSpan> beginTime) { }
    protected Timeline(System.Nullable<System.TimeSpan> beginTime, System.Windows.Duration duration) { }
    protected Timeline(System.Nullable<System.TimeSpan> beginTime, System.Windows.Duration duration, System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { }
    public double AccelerationRatio { get { return default(double); } set { } }
    [System.ComponentModel.DefaultValueAttribute(false)]
    public bool AutoReverse { get { return default(bool); } set { } }
    public System.Nullable<System.TimeSpan> BeginTime { get { return default(System.Nullable<System.TimeSpan>); } set { } }
    public double DecelerationRatio { get { return default(double); } set { } }
    public System.Windows.Duration Duration { get { return default(System.Windows.Duration); } set { } }
    public System.Windows.Media.Animation.FillBehavior FillBehavior { get { return default(System.Windows.Media.Animation.FillBehavior); } set { } }
    [System.ComponentModel.DefaultValueAttribute(null)]
    [System.ComponentModel.MergablePropertyAttribute(false)]
    public string Name { get { return default(string); } set { } }
    public System.Windows.Media.Animation.RepeatBehavior RepeatBehavior { get { return default(System.Windows.Media.Animation.RepeatBehavior); } set { } }
    [System.ComponentModel.DefaultValueAttribute(1)]
    public double SpeedRatio { get { return default(double); } set { } }
    public event System.EventHandler Completed { add { } remove { } }
    public event System.EventHandler CurrentGlobalSpeedInvalidated { add { } remove { } }
    public event System.EventHandler CurrentStateInvalidated { add { } remove { } }
    public event System.EventHandler CurrentTimeInvalidated { add { } remove { } }
    public event System.EventHandler RemoveRequested { add { } remove { } }
    protected internal virtual System.Windows.Media.Animation.Clock AllocateClock() { return default(System.Windows.Media.Animation.Clock); }
    public new System.Windows.Media.Animation.Timeline Clone() { return default(System.Windows.Media.Animation.Timeline); }
    public new System.Windows.Media.Animation.Timeline CloneCurrentValue() { return default(System.Windows.Media.Animation.Timeline); }
    public System.Windows.Media.Animation.Clock CreateClock() { return default(System.Windows.Media.Animation.Clock); }
    public System.Windows.Media.Animation.Clock CreateClock(bool hasControllableRoot) { return default(System.Windows.Media.Animation.Clock); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public static System.Nullable<System.Int32> GetDesiredFrameRate(System.Windows.Media.Animation.Timeline timeline) { return default(System.Nullable<System.Int32>); }
    protected internal System.Windows.Duration GetNaturalDuration(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected virtual System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    public static void SetDesiredFrameRate(System.Windows.Media.Animation.Timeline timeline, System.Nullable<System.Int32> desiredFrameRate) { }
  }
  public sealed partial class TimelineCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Animation.Timeline>, System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Timeline>, System.Collections.Generic.IList<System.Windows.Media.Animation.Timeline>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public TimelineCollection() { }
    public TimelineCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Timeline> collection) { }
    public TimelineCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Animation.Timeline this[int index] { get { return default(System.Windows.Media.Animation.Timeline); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Animation.Timeline>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Animation.Timeline value) { }
    public void Clear() { }
    public new System.Windows.Media.Animation.TimelineCollection Clone() { return default(System.Windows.Media.Animation.TimelineCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Animation.TimelineCollection CloneCurrentValue() { return default(System.Windows.Media.Animation.TimelineCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Animation.Timeline value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.Timeline[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.Animation.TimelineCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.Animation.TimelineCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Animation.Timeline value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.Timeline value) { }
    public bool Remove(System.Windows.Media.Animation.Timeline value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Animation.Timeline> System.Collections.Generic.IEnumerable<System.Windows.Media.Animation.Timeline>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Animation.Timeline>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Animation.Timeline>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Animation.Timeline Current { get { return default(System.Windows.Media.Animation.Timeline); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public abstract partial class TimelineGroup : System.Windows.Media.Animation.Timeline, System.Windows.Markup.IAddChild {
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    protected TimelineGroup() { }
    protected TimelineGroup(System.Nullable<System.TimeSpan> beginTime) { }
    protected TimelineGroup(System.Nullable<System.TimeSpan> beginTime, System.Windows.Duration duration) { }
    protected TimelineGroup(System.Nullable<System.TimeSpan> beginTime, System.Windows.Duration duration, System.Windows.Media.Animation.RepeatBehavior repeatBehavior) { }
    public System.Windows.Media.Animation.TimelineCollection Children { get { return default(System.Windows.Media.Animation.TimelineCollection); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    protected internal override System.Windows.Media.Animation.Clock AllocateClock() { return default(System.Windows.Media.Animation.Clock); }
    public new System.Windows.Media.Animation.TimelineGroup Clone() { return default(System.Windows.Media.Animation.TimelineGroup); }
    public new System.Windows.Media.Animation.TimelineGroup CloneCurrentValue() { return default(System.Windows.Media.Animation.TimelineGroup); }
    public new System.Windows.Media.Animation.ClockGroup CreateClock() { return default(System.Windows.Media.Animation.ClockGroup); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public enum TimeSeekOrigin {
    BeginTime = 0,
    Duration = 1,
  }
  public partial class Vector3DAnimation : System.Windows.Media.Animation.Vector3DAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public Vector3DAnimation() { }
    public Vector3DAnimation(System.Windows.Media.Media3D.Vector3D toValue, System.Windows.Duration duration) { }
    public Vector3DAnimation(System.Windows.Media.Media3D.Vector3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public Vector3DAnimation(System.Windows.Media.Media3D.Vector3D fromValue, System.Windows.Media.Media3D.Vector3D toValue, System.Windows.Duration duration) { }
    public Vector3DAnimation(System.Windows.Media.Media3D.Vector3D fromValue, System.Windows.Media.Media3D.Vector3D toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Windows.Media.Media3D.Vector3D> By { get { return default(System.Nullable<System.Windows.Media.Media3D.Vector3D>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Windows.Media.Media3D.Vector3D> From { get { return default(System.Nullable<System.Windows.Media.Media3D.Vector3D>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Windows.Media.Media3D.Vector3D> To { get { return default(System.Nullable<System.Windows.Media.Media3D.Vector3D>); } set { } }
    public new System.Windows.Media.Animation.Vector3DAnimation Clone() { return default(System.Windows.Media.Animation.Vector3DAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Media.Media3D.Vector3D GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D defaultOriginValue, System.Windows.Media.Media3D.Vector3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Vector3D); }
  }
  public abstract partial class Vector3DAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected Vector3DAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.Vector3DAnimationBase Clone() { return default(System.Windows.Media.Animation.Vector3DAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Media.Media3D.Vector3D GetCurrentValue(System.Windows.Media.Media3D.Vector3D defaultOriginValue, System.Windows.Media.Media3D.Vector3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Vector3D); }
    protected abstract System.Windows.Media.Media3D.Vector3D GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D defaultOriginValue, System.Windows.Media.Media3D.Vector3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class Vector3DAnimationUsingKeyFrames : System.Windows.Media.Animation.Vector3DAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public Vector3DAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.Vector3DKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.Vector3DKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Media.Media3D.Vector3D GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D defaultOriginValue, System.Windows.Media.Media3D.Vector3D defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Media.Media3D.Vector3D); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class Vector3DKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected Vector3DKeyFrame() { }
    protected Vector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value) { }
    protected Vector3DKeyFrame(System.Windows.Media.Media3D.Vector3D value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Media.Media3D.Vector3D Value { get { return default(System.Windows.Media.Media3D.Vector3D); } set { } }
    public System.Windows.Media.Media3D.Vector3D InterpolateValue(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress) { return default(System.Windows.Media.Media3D.Vector3D); }
    protected abstract System.Windows.Media.Media3D.Vector3D InterpolateValueCore(System.Windows.Media.Media3D.Vector3D baseValue, double keyFrameProgress);
  }
  public partial class Vector3DKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public Vector3DKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.Vector3DKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.Vector3DKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.Vector3DKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.Vector3DKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.Vector3DKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.Vector3DKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.Vector3DKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.Vector3DKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
  public partial class VectorAnimation : System.Windows.Media.Animation.VectorAnimationBase {
    public static readonly System.Windows.DependencyProperty ByProperty;
    public static readonly System.Windows.DependencyProperty EasingFunctionProperty;
    public static readonly System.Windows.DependencyProperty FromProperty;
    public static readonly System.Windows.DependencyProperty ToProperty;
    public VectorAnimation() { }
    public VectorAnimation(System.Windows.Vector toValue, System.Windows.Duration duration) { }
    public VectorAnimation(System.Windows.Vector toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public VectorAnimation(System.Windows.Vector fromValue, System.Windows.Vector toValue, System.Windows.Duration duration) { }
    public VectorAnimation(System.Windows.Vector fromValue, System.Windows.Vector toValue, System.Windows.Duration duration, System.Windows.Media.Animation.FillBehavior fillBehavior) { }
    public System.Nullable<System.Windows.Vector> By { get { return default(System.Nullable<System.Windows.Vector>); } set { } }
    public System.Windows.Media.Animation.IEasingFunction EasingFunction { get { return default(System.Windows.Media.Animation.IEasingFunction); } set { } }
    public System.Nullable<System.Windows.Vector> From { get { return default(System.Nullable<System.Windows.Vector>); } set { } }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Nullable<System.Windows.Vector> To { get { return default(System.Nullable<System.Windows.Vector>); } set { } }
    public new System.Windows.Media.Animation.VectorAnimation Clone() { return default(System.Windows.Media.Animation.VectorAnimation); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override System.Windows.Vector GetCurrentValueCore(System.Windows.Vector defaultOriginValue, System.Windows.Vector defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Vector); }
  }
  public abstract partial class VectorAnimationBase : System.Windows.Media.Animation.AnimationTimeline {
    protected VectorAnimationBase() { }
    public sealed override System.Type TargetPropertyType { get { return default(System.Type); } }
    public new System.Windows.Media.Animation.VectorAnimationBase Clone() { return default(System.Windows.Media.Animation.VectorAnimationBase); }
    public sealed override object GetCurrentValue(object defaultOriginValue, object defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(object); }
    public System.Windows.Vector GetCurrentValue(System.Windows.Vector defaultOriginValue, System.Windows.Vector defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Vector); }
    protected abstract System.Windows.Vector GetCurrentValueCore(System.Windows.Vector defaultOriginValue, System.Windows.Vector defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock);
  }
  [System.Windows.Markup.ContentPropertyAttribute("KeyFrames")]
  public partial class VectorAnimationUsingKeyFrames : System.Windows.Media.Animation.VectorAnimationBase, System.Windows.Markup.IAddChild, System.Windows.Media.Animation.IKeyFrameAnimation {
    public VectorAnimationUsingKeyFrames() { }
    public bool IsAdditive { get { return default(bool); } set { } }
    public bool IsCumulative { get { return default(bool); } set { } }
    public System.Windows.Media.Animation.VectorKeyFrameCollection KeyFrames { get { return default(System.Windows.Media.Animation.VectorKeyFrameCollection); } set { } }
    System.Collections.IList System.Windows.Media.Animation.IKeyFrameAnimation.KeyFrames { get { return default(System.Collections.IList); } set { } }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddChild(object child) { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(2))]
    protected virtual void AddText(string childText) { }
    public new System.Windows.Media.Animation.VectorAnimationUsingKeyFrames Clone() { return default(System.Windows.Media.Animation.VectorAnimationUsingKeyFrames); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Animation.VectorAnimationUsingKeyFrames CloneCurrentValue() { return default(System.Windows.Media.Animation.VectorAnimationUsingKeyFrames); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    protected sealed override System.Windows.Vector GetCurrentValueCore(System.Windows.Vector defaultOriginValue, System.Windows.Vector defaultDestinationValue, System.Windows.Media.Animation.AnimationClock animationClock) { return default(System.Windows.Vector); }
    protected sealed override System.Windows.Duration GetNaturalDurationCore(System.Windows.Media.Animation.Clock clock) { return default(System.Windows.Duration); }
    protected override void OnChanged() { }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeKeyFrames() { return default(bool); }
    void System.Windows.Markup.IAddChild.AddChild(object child) { }
    void System.Windows.Markup.IAddChild.AddText(string childText) { }
  }
  public abstract partial class VectorKeyFrame : System.Windows.Freezable, System.Windows.Media.Animation.IKeyFrame {
    public static readonly System.Windows.DependencyProperty KeyTimeProperty;
    public static readonly System.Windows.DependencyProperty ValueProperty;
    protected VectorKeyFrame() { }
    protected VectorKeyFrame(System.Windows.Vector value) { }
    protected VectorKeyFrame(System.Windows.Vector value, System.Windows.Media.Animation.KeyTime keyTime) { }
    public System.Windows.Media.Animation.KeyTime KeyTime { get { return default(System.Windows.Media.Animation.KeyTime); } set { } }
    object System.Windows.Media.Animation.IKeyFrame.Value { get { return default(object); } set { } }
    public System.Windows.Vector Value { get { return default(System.Windows.Vector); } set { } }
    public System.Windows.Vector InterpolateValue(System.Windows.Vector baseValue, double keyFrameProgress) { return default(System.Windows.Vector); }
    protected abstract System.Windows.Vector InterpolateValueCore(System.Windows.Vector baseValue, double keyFrameProgress);
  }
  public partial class VectorKeyFrameCollection : System.Windows.Freezable, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public VectorKeyFrameCollection() { }
    public int Count { get { return default(int); } }
    public static System.Windows.Media.Animation.VectorKeyFrameCollection Empty { get { return default(System.Windows.Media.Animation.VectorKeyFrameCollection); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public bool IsSynchronized { get { return default(bool); } }
    public System.Windows.Media.Animation.VectorKeyFrame this[int index] { get { return default(System.Windows.Media.Animation.VectorKeyFrame); } set { } }
    public object SyncRoot { get { return default(object); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public int Add(System.Windows.Media.Animation.VectorKeyFrame keyFrame) { return default(int); }
    public void Clear() { }
    public new System.Windows.Media.Animation.VectorKeyFrameCollection Clone() { return default(System.Windows.Media.Animation.VectorKeyFrameCollection); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    public bool Contains(System.Windows.Media.Animation.VectorKeyFrame keyFrame) { return default(bool); }
    public void CopyTo(System.Windows.Media.Animation.VectorKeyFrame[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Collections.IEnumerator GetEnumerator() { return default(System.Collections.IEnumerator); }
    public int IndexOf(System.Windows.Media.Animation.VectorKeyFrame keyFrame) { return default(int); }
    public void Insert(int index, System.Windows.Media.Animation.VectorKeyFrame keyFrame) { }
    public void Remove(System.Windows.Media.Animation.VectorKeyFrame keyFrame) { }
    public void RemoveAt(int index) { }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    int System.Collections.IList.Add(object keyFrame) { return default(int); }
    bool System.Collections.IList.Contains(object keyFrame) { return default(bool); }
    int System.Collections.IList.IndexOf(object keyFrame) { return default(int); }
    void System.Collections.IList.Insert(int index, object keyFrame) { }
    void System.Collections.IList.Remove(object keyFrame) { }
  }
}
namespace System.Windows.Media.Converters {
  [MS.Internal.PresentationCore.FriendAccessAllowedAttribute]
  public abstract partial class BaseIListConverter : System.ComponentModel.TypeConverter {
    protected BaseIListConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Type t) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext td, System.Globalization.CultureInfo ci, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class BoolIListConverter : System.Windows.Media.Converters.BaseIListConverter {
    public BoolIListConverter() { }
  }
  public partial class BrushValueSerializer : System.Windows.Markup.ValueSerializer {
    public BrushValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class CacheModeValueSerializer : System.Windows.Markup.ValueSerializer {
    public CacheModeValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public sealed partial class CharIListConverter : System.Windows.Media.Converters.BaseIListConverter {
    public CharIListConverter() { }
  }
  public partial class DoubleCollectionValueSerializer : System.Windows.Markup.ValueSerializer {
    public DoubleCollectionValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public sealed partial class DoubleIListConverter : System.Windows.Media.Converters.BaseIListConverter {
    public DoubleIListConverter() { }
  }
  public partial class GeometryValueSerializer : System.Windows.Markup.ValueSerializer {
    public GeometryValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class Int32CollectionValueSerializer : System.Windows.Markup.ValueSerializer {
    public Int32CollectionValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class PathFigureCollectionValueSerializer : System.Windows.Markup.ValueSerializer {
    public PathFigureCollectionValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class PointCollectionValueSerializer : System.Windows.Markup.ValueSerializer {
    public PointCollectionValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public sealed partial class PointIListConverter : System.Windows.Media.Converters.BaseIListConverter {
    public PointIListConverter() { }
  }
  public partial class TransformValueSerializer : System.Windows.Markup.ValueSerializer {
    public TransformValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public sealed partial class UShortIListConverter : System.Windows.Media.Converters.BaseIListConverter {
    public UShortIListConverter() { }
  }
  public partial class VectorCollectionValueSerializer : System.Windows.Markup.ValueSerializer {
    public VectorCollectionValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
}
namespace System.Windows.Media.Effects {
  public sealed partial class BevelBitmapEffect : System.Windows.Media.Effects.BitmapEffect {
    public static readonly System.Windows.DependencyProperty BevelWidthProperty;
    public static readonly System.Windows.DependencyProperty EdgeProfileProperty;
    public static readonly System.Windows.DependencyProperty LightAngleProperty;
    public static readonly System.Windows.DependencyProperty ReliefProperty;
    public static readonly System.Windows.DependencyProperty SmoothnessProperty;
    public BevelBitmapEffect() { }
    public double BevelWidth { get { return default(double); } set { } }
    public System.Windows.Media.Effects.EdgeProfile EdgeProfile { get { return default(System.Windows.Media.Effects.EdgeProfile); } set { } }
    public double LightAngle { get { return default(double); } set { } }
    public double Relief { get { return default(double); } set { } }
    public double Smoothness { get { return default(double); } set { } }
    public new System.Windows.Media.Effects.BevelBitmapEffect Clone() { return default(System.Windows.Media.Effects.BevelBitmapEffect); }
    public new System.Windows.Media.Effects.BevelBitmapEffect CloneCurrentValue() { return default(System.Windows.Media.Effects.BevelBitmapEffect); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecuritySafeCriticalAttribute]
    protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { return default(System.Runtime.InteropServices.SafeHandle); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
  }
  [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Window=(System.Security.Permissions.UIPermissionWindow)(3))]
  public abstract partial class BitmapEffect : System.Windows.Media.Animation.Animatable {
    [System.Security.SecuritySafeCriticalAttribute]
    protected BitmapEffect() { }
    public new System.Windows.Media.Effects.BitmapEffect Clone() { return default(System.Windows.Media.Effects.BitmapEffect); }
    public new System.Windows.Media.Effects.BitmapEffect CloneCurrentValue() { return default(System.Windows.Media.Effects.BitmapEffect); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected static System.Runtime.InteropServices.SafeHandle CreateBitmapEffectOuter() { return default(System.Runtime.InteropServices.SafeHandle); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    protected abstract System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect();
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    public System.Windows.Media.Imaging.BitmapSource GetOutput(System.Windows.Media.Effects.BitmapEffectInput input) { return default(System.Windows.Media.Imaging.BitmapSource); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected static void InitializeBitmapEffect(System.Runtime.InteropServices.SafeHandle outerObject, System.Runtime.InteropServices.SafeHandle innerObject) { }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected static void SetValue(System.Runtime.InteropServices.SafeHandle effect, string propertyName, object value) { }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    protected abstract void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect);
  }
  public sealed partial class BitmapEffectCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Effects.BitmapEffect>, System.Collections.Generic.IEnumerable<System.Windows.Media.Effects.BitmapEffect>, System.Collections.Generic.IList<System.Windows.Media.Effects.BitmapEffect>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public BitmapEffectCollection() { }
    public BitmapEffectCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Effects.BitmapEffect> collection) { }
    public BitmapEffectCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Effects.BitmapEffect this[int index] { get { return default(System.Windows.Media.Effects.BitmapEffect); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Effects.BitmapEffect>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Effects.BitmapEffect value) { }
    public void Clear() { }
    public new System.Windows.Media.Effects.BitmapEffectCollection Clone() { return default(System.Windows.Media.Effects.BitmapEffectCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Effects.BitmapEffectCollection CloneCurrentValue() { return default(System.Windows.Media.Effects.BitmapEffectCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Effects.BitmapEffect value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Effects.BitmapEffect[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.Effects.BitmapEffectCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.Effects.BitmapEffectCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Effects.BitmapEffect value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Effects.BitmapEffect value) { }
    public bool Remove(System.Windows.Media.Effects.BitmapEffect value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Effects.BitmapEffect> System.Collections.Generic.IEnumerable<System.Windows.Media.Effects.BitmapEffect>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Effects.BitmapEffect>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Effects.BitmapEffect>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Effects.BitmapEffect Current { get { return default(System.Windows.Media.Effects.BitmapEffect); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class BitmapEffectGroup : System.Windows.Media.Effects.BitmapEffect {
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    public BitmapEffectGroup() { }
    public System.Windows.Media.Effects.BitmapEffectCollection Children { get { return default(System.Windows.Media.Effects.BitmapEffectCollection); } set { } }
    public new System.Windows.Media.Effects.BitmapEffectGroup Clone() { return default(System.Windows.Media.Effects.BitmapEffectGroup); }
    public new System.Windows.Media.Effects.BitmapEffectGroup CloneCurrentValue() { return default(System.Windows.Media.Effects.BitmapEffectGroup); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecuritySafeCriticalAttribute]
    protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { return default(System.Runtime.InteropServices.SafeHandle); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecuritySafeCriticalAttribute]
    protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
  }
  public sealed partial class BitmapEffectInput : System.Windows.Media.Animation.Animatable {
    public static readonly System.Windows.DependencyProperty AreaToApplyEffectProperty;
    public static readonly System.Windows.DependencyProperty AreaToApplyEffectUnitsProperty;
    public static readonly System.Windows.DependencyProperty InputProperty;
    public BitmapEffectInput() { }
    public BitmapEffectInput(System.Windows.Media.Imaging.BitmapSource input) { }
    public System.Windows.Rect AreaToApplyEffect { get { return default(System.Windows.Rect); } set { } }
    public System.Windows.Media.BrushMappingMode AreaToApplyEffectUnits { get { return default(System.Windows.Media.BrushMappingMode); } set { } }
    public static System.Windows.Media.Imaging.BitmapSource ContextInputSource { get { return default(System.Windows.Media.Imaging.BitmapSource); } }
    public System.Windows.Media.Imaging.BitmapSource Input { get { return default(System.Windows.Media.Imaging.BitmapSource); } set { } }
    public new System.Windows.Media.Effects.BitmapEffectInput Clone() { return default(System.Windows.Media.Effects.BitmapEffectInput); }
    public new System.Windows.Media.Effects.BitmapEffectInput CloneCurrentValue() { return default(System.Windows.Media.Effects.BitmapEffectInput); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.ComponentModel.EditorBrowsableAttribute((System.ComponentModel.EditorBrowsableState)(1))]
    public bool ShouldSerializeInput() { return default(bool); }
  }
  public sealed partial class BlurBitmapEffect : System.Windows.Media.Effects.BitmapEffect {
    public static readonly System.Windows.DependencyProperty KernelTypeProperty;
    public static readonly System.Windows.DependencyProperty RadiusProperty;
    public BlurBitmapEffect() { }
    public System.Windows.Media.Effects.KernelType KernelType { get { return default(System.Windows.Media.Effects.KernelType); } set { } }
    public double Radius { get { return default(double); } set { } }
    public new System.Windows.Media.Effects.BlurBitmapEffect Clone() { return default(System.Windows.Media.Effects.BlurBitmapEffect); }
    public new System.Windows.Media.Effects.BlurBitmapEffect CloneCurrentValue() { return default(System.Windows.Media.Effects.BlurBitmapEffect); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecuritySafeCriticalAttribute]
    protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { return default(System.Runtime.InteropServices.SafeHandle); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
  }
  public sealed partial class BlurEffect : System.Windows.Media.Effects.Effect {
    public static readonly System.Windows.DependencyProperty KernelTypeProperty;
    public static readonly System.Windows.DependencyProperty RadiusProperty;
    public static readonly System.Windows.DependencyProperty RenderingBiasProperty;
    public BlurEffect() { }
    public System.Windows.Media.Effects.KernelType KernelType { get { return default(System.Windows.Media.Effects.KernelType); } set { } }
    public double Radius { get { return default(double); } set { } }
    public System.Windows.Media.Effects.RenderingBias RenderingBias { get { return default(System.Windows.Media.Effects.RenderingBias); } set { } }
    public new System.Windows.Media.Effects.BlurEffect Clone() { return default(System.Windows.Media.Effects.BlurEffect); }
    public new System.Windows.Media.Effects.BlurEffect CloneCurrentValue() { return default(System.Windows.Media.Effects.BlurEffect); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class DropShadowBitmapEffect : System.Windows.Media.Effects.BitmapEffect {
    public static readonly System.Windows.DependencyProperty ColorProperty;
    public static readonly System.Windows.DependencyProperty DirectionProperty;
    public static readonly System.Windows.DependencyProperty NoiseProperty;
    public static readonly System.Windows.DependencyProperty OpacityProperty;
    public static readonly System.Windows.DependencyProperty ShadowDepthProperty;
    public static readonly System.Windows.DependencyProperty SoftnessProperty;
    public DropShadowBitmapEffect() { }
    public System.Windows.Media.Color Color { get { return default(System.Windows.Media.Color); } set { } }
    public double Direction { get { return default(double); } set { } }
    public double Noise { get { return default(double); } set { } }
    public double Opacity { get { return default(double); } set { } }
    public double ShadowDepth { get { return default(double); } set { } }
    public double Softness { get { return default(double); } set { } }
    public new System.Windows.Media.Effects.DropShadowBitmapEffect Clone() { return default(System.Windows.Media.Effects.DropShadowBitmapEffect); }
    public new System.Windows.Media.Effects.DropShadowBitmapEffect CloneCurrentValue() { return default(System.Windows.Media.Effects.DropShadowBitmapEffect); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecuritySafeCriticalAttribute]
    protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { return default(System.Runtime.InteropServices.SafeHandle); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
  }
  public sealed partial class DropShadowEffect : System.Windows.Media.Effects.Effect {
    public static readonly System.Windows.DependencyProperty BlurRadiusProperty;
    public static readonly System.Windows.DependencyProperty ColorProperty;
    public static readonly System.Windows.DependencyProperty DirectionProperty;
    public static readonly System.Windows.DependencyProperty OpacityProperty;
    public static readonly System.Windows.DependencyProperty RenderingBiasProperty;
    public static readonly System.Windows.DependencyProperty ShadowDepthProperty;
    public DropShadowEffect() { }
    public double BlurRadius { get { return default(double); } set { } }
    public System.Windows.Media.Color Color { get { return default(System.Windows.Media.Color); } set { } }
    public double Direction { get { return default(double); } set { } }
    public double Opacity { get { return default(double); } set { } }
    public System.Windows.Media.Effects.RenderingBias RenderingBias { get { return default(System.Windows.Media.Effects.RenderingBias); } set { } }
    public double ShadowDepth { get { return default(double); } set { } }
    public new System.Windows.Media.Effects.DropShadowEffect Clone() { return default(System.Windows.Media.Effects.DropShadowEffect); }
    public new System.Windows.Media.Effects.DropShadowEffect CloneCurrentValue() { return default(System.Windows.Media.Effects.DropShadowEffect); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public enum EdgeProfile {
    BulgedUp = 3,
    CurvedIn = 1,
    CurvedOut = 2,
    Linear = 0,
  }
  [System.Security.Permissions.UIPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Window=(System.Security.Permissions.UIPermissionWindow)(3))]
  public abstract partial class Effect : System.Windows.Media.Animation.Animatable {
    [System.Security.SecuritySafeCriticalAttribute]
    protected Effect() { }
    protected internal virtual System.Windows.Media.GeneralTransform EffectMapping { get { return default(System.Windows.Media.GeneralTransform); } }
    [System.ComponentModel.BrowsableAttribute(false)]
    public static System.Windows.Media.Brush ImplicitInput { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Windows.Media.Brush); } }
    public new System.Windows.Media.Effects.Effect Clone() { return default(System.Windows.Media.Effects.Effect); }
    public new System.Windows.Media.Effects.Effect CloneCurrentValue() { return default(System.Windows.Media.Effects.Effect); }
  }
  public sealed partial class EmbossBitmapEffect : System.Windows.Media.Effects.BitmapEffect {
    public static readonly System.Windows.DependencyProperty LightAngleProperty;
    public static readonly System.Windows.DependencyProperty ReliefProperty;
    public EmbossBitmapEffect() { }
    public double LightAngle { get { return default(double); } set { } }
    public double Relief { get { return default(double); } set { } }
    public new System.Windows.Media.Effects.EmbossBitmapEffect Clone() { return default(System.Windows.Media.Effects.EmbossBitmapEffect); }
    public new System.Windows.Media.Effects.EmbossBitmapEffect CloneCurrentValue() { return default(System.Windows.Media.Effects.EmbossBitmapEffect); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecuritySafeCriticalAttribute]
    protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { return default(System.Runtime.InteropServices.SafeHandle); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
  }
  public enum KernelType {
    Box = 1,
    Gaussian = 0,
  }
  public sealed partial class OuterGlowBitmapEffect : System.Windows.Media.Effects.BitmapEffect {
    public static readonly System.Windows.DependencyProperty GlowColorProperty;
    public static readonly System.Windows.DependencyProperty GlowSizeProperty;
    public static readonly System.Windows.DependencyProperty NoiseProperty;
    public static readonly System.Windows.DependencyProperty OpacityProperty;
    public OuterGlowBitmapEffect() { }
    public System.Windows.Media.Color GlowColor { get { return default(System.Windows.Media.Color); } set { } }
    public double GlowSize { get { return default(double); } set { } }
    public double Noise { get { return default(double); } set { } }
    public double Opacity { get { return default(double); } set { } }
    public new System.Windows.Media.Effects.OuterGlowBitmapEffect Clone() { return default(System.Windows.Media.Effects.OuterGlowBitmapEffect); }
    public new System.Windows.Media.Effects.OuterGlowBitmapEffect CloneCurrentValue() { return default(System.Windows.Media.Effects.OuterGlowBitmapEffect); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecuritySafeCriticalAttribute]
    protected override System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() { return default(System.Runtime.InteropServices.SafeHandle); }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle unmanagedEffect) { }
  }
  public sealed partial class PixelShader : System.Windows.Media.Animation.Animatable {
    public static readonly System.Windows.DependencyProperty ShaderRenderModeProperty;
    public static readonly System.Windows.DependencyProperty UriSourceProperty;
    public PixelShader() { }
    public System.Windows.Media.Effects.ShaderRenderMode ShaderRenderMode { get { return default(System.Windows.Media.Effects.ShaderRenderMode); } set { } }
    public System.Uri UriSource { get { return default(System.Uri); } set { } }
    public static event System.EventHandler InvalidPixelShaderEncountered { add { } remove { } }
    public new System.Windows.Media.Effects.PixelShader Clone() { return default(System.Windows.Media.Effects.PixelShader); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Effects.PixelShader CloneCurrentValue() { return default(System.Windows.Media.Effects.PixelShader); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public void SetStreamSource(System.IO.Stream source) { }
  }
  public enum RenderingBias {
    Performance = 0,
    Quality = 1,
  }
  public enum SamplingMode {
    Auto = 2,
    Bilinear = 1,
    NearestNeighbor = 0,
  }
  public abstract partial class ShaderEffect : System.Windows.Media.Effects.Effect {
    protected static readonly System.Windows.DependencyProperty PixelShaderProperty;
    protected ShaderEffect() { }
    protected int DdxUvDdyUvRegisterIndex { get { return default(int); } set { } }
    protected double PaddingBottom { get { return default(double); } set { } }
    protected double PaddingLeft { get { return default(double); } set { } }
    protected double PaddingRight { get { return default(double); } set { } }
    protected double PaddingTop { get { return default(double); } set { } }
    protected System.Windows.Media.Effects.PixelShader PixelShader { get { return default(System.Windows.Media.Effects.PixelShader); } set { } }
    public new System.Windows.Media.Effects.ShaderEffect Clone() { return default(System.Windows.Media.Effects.ShaderEffect); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Effects.ShaderEffect CloneCurrentValue() { return default(System.Windows.Media.Effects.ShaderEffect); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected static System.Windows.PropertyChangedCallback PixelShaderConstantCallback(int floatRegisterIndex) { return default(System.Windows.PropertyChangedCallback); }
    protected static System.Windows.PropertyChangedCallback PixelShaderSamplerCallback(int samplerRegisterIndex) { return default(System.Windows.PropertyChangedCallback); }
    protected static System.Windows.PropertyChangedCallback PixelShaderSamplerCallback(int samplerRegisterIndex, System.Windows.Media.Effects.SamplingMode samplingMode) { return default(System.Windows.PropertyChangedCallback); }
    protected static System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty(string dpName, System.Type ownerType, int samplerRegisterIndex) { return default(System.Windows.DependencyProperty); }
    protected static System.Windows.DependencyProperty RegisterPixelShaderSamplerProperty(string dpName, System.Type ownerType, int samplerRegisterIndex, System.Windows.Media.Effects.SamplingMode samplingMode) { return default(System.Windows.DependencyProperty); }
    protected void UpdateShaderValue(System.Windows.DependencyProperty dp) { }
  }
  public enum ShaderRenderMode {
    Auto = 0,
    HardwareOnly = 2,
    SoftwareOnly = 1,
  }
}
namespace System.Windows.Media.Imaging {
  public enum BitmapCacheOption {
    Default = 0,
    None = 2,
    OnDemand = 0,
    OnLoad = 1,
  }
  public abstract partial class BitmapCodecInfo {
    protected BitmapCodecInfo() { }
    public virtual string Author { [System.Security.SecurityCriticalAttribute]get { return default(string); } }
    public virtual System.Guid ContainerFormat { [System.Security.SecurityCriticalAttribute]get { return default(System.Guid); } }
    public virtual string DeviceManufacturer { [System.Security.SecurityCriticalAttribute]get { return default(string); } }
    public virtual string DeviceModels { [System.Security.SecurityCriticalAttribute]get { return default(string); } }
    public virtual string FileExtensions { [System.Security.SecurityCriticalAttribute]get { return default(string); } }
    public virtual string FriendlyName { [System.Security.SecurityCriticalAttribute]get { return default(string); } }
    public virtual string MimeTypes { [System.Security.SecurityCriticalAttribute]get { return default(string); } }
    public virtual System.Version SpecificationVersion { [System.Security.SecurityCriticalAttribute]get { return default(System.Version); } }
    public virtual bool SupportsAnimation { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    public virtual bool SupportsLossless { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    public virtual bool SupportsMultipleFrames { [System.Security.SecurityCriticalAttribute]get { return default(bool); } }
    public virtual System.Version Version { [System.Security.SecurityCriticalAttribute]get { return default(System.Version); } }
  }
  [System.FlagsAttribute]
  public enum BitmapCreateOptions {
    DelayCreation = 2,
    IgnoreColorProfile = 4,
    IgnoreImageCache = 8,
    None = 0,
    PreservePixelFormat = 1,
  }
  public abstract partial class BitmapDecoder : System.Windows.Threading.DispatcherObject {
    protected BitmapDecoder() { }
    public virtual System.Windows.Media.Imaging.BitmapCodecInfo CodecInfo { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapCodecInfo); } }
    public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> ColorContexts { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext>); } }
    public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.Imaging.BitmapFrame> Frames { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.Imaging.BitmapFrame>); } }
    public virtual bool IsDownloading { get { return default(bool); } }
    public virtual System.Windows.Media.Imaging.BitmapMetadata Metadata { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapMetadata); } }
    public virtual System.Windows.Media.Imaging.BitmapPalette Palette { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public virtual System.Windows.Media.Imaging.BitmapSource Preview { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapSource); } }
    public virtual System.Windows.Media.Imaging.BitmapSource Thumbnail { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapSource); } }
    public virtual event System.EventHandler DownloadCompleted { add { } remove { } }
    public virtual event System.EventHandler<System.Windows.Media.ExceptionEventArgs> DownloadFailed { add { } remove { } }
    public virtual event System.EventHandler<System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress { add { } remove { } }
    public static System.Windows.Media.Imaging.BitmapDecoder Create(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { return default(System.Windows.Media.Imaging.BitmapDecoder); }
    public static System.Windows.Media.Imaging.BitmapDecoder Create(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { return default(System.Windows.Media.Imaging.BitmapDecoder); }
    public static System.Windows.Media.Imaging.BitmapDecoder Create(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption, System.Net.Cache.RequestCachePolicy uriCachePolicy) { return default(System.Windows.Media.Imaging.BitmapDecoder); }
    public virtual System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter CreateInPlaceBitmapMetadataWriter() { return default(System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter); }
    ~BitmapDecoder() { }
    public override string ToString() { return default(string); }
  }
  public abstract partial class BitmapEncoder : System.Windows.Threading.DispatcherObject {
    protected BitmapEncoder() { }
    public virtual System.Windows.Media.Imaging.BitmapCodecInfo CodecInfo { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapCodecInfo); } }
    public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> ColorContexts { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext>); } set { } }
    public virtual System.Collections.Generic.IList<System.Windows.Media.Imaging.BitmapFrame> Frames { get { return default(System.Collections.Generic.IList<System.Windows.Media.Imaging.BitmapFrame>); } set { } }
    public virtual System.Windows.Media.Imaging.BitmapMetadata Metadata { get { return default(System.Windows.Media.Imaging.BitmapMetadata); } set { } }
    public virtual System.Windows.Media.Imaging.BitmapPalette Palette { get { return default(System.Windows.Media.Imaging.BitmapPalette); } set { } }
    public virtual System.Windows.Media.Imaging.BitmapSource Preview { get { return default(System.Windows.Media.Imaging.BitmapSource); } set { } }
    public virtual System.Windows.Media.Imaging.BitmapSource Thumbnail { get { return default(System.Windows.Media.Imaging.BitmapSource); } set { } }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.Media.Imaging.BitmapEncoder Create(System.Guid containerFormat) { return default(System.Windows.Media.Imaging.BitmapEncoder); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Flags=(System.Security.Permissions.SecurityPermissionFlag)(2))]
    [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Flags=(System.Security.Permissions.SecurityPermissionFlag)(2))]
    public virtual void Save(System.IO.Stream stream) { }
  }
  public abstract partial class BitmapFrame : System.Windows.Media.Imaging.BitmapSource, System.Windows.Markup.IUriContext {
    protected BitmapFrame() { }
    public abstract System.Uri BaseUri { get; set; }
    public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> ColorContexts { get; }
    public abstract System.Windows.Media.Imaging.BitmapDecoder Decoder { get; }
    public abstract System.Windows.Media.Imaging.BitmapSource Thumbnail { get; }
    public static System.Windows.Media.Imaging.BitmapFrame Create(System.IO.Stream bitmapStream) { return default(System.Windows.Media.Imaging.BitmapFrame); }
    public static System.Windows.Media.Imaging.BitmapFrame Create(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { return default(System.Windows.Media.Imaging.BitmapFrame); }
    public static System.Windows.Media.Imaging.BitmapFrame Create(System.Uri bitmapUri) { return default(System.Windows.Media.Imaging.BitmapFrame); }
    public static System.Windows.Media.Imaging.BitmapFrame Create(System.Uri bitmapUri, System.Net.Cache.RequestCachePolicy uriCachePolicy) { return default(System.Windows.Media.Imaging.BitmapFrame); }
    public static System.Windows.Media.Imaging.BitmapFrame Create(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { return default(System.Windows.Media.Imaging.BitmapFrame); }
    public static System.Windows.Media.Imaging.BitmapFrame Create(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption, System.Net.Cache.RequestCachePolicy uriCachePolicy) { return default(System.Windows.Media.Imaging.BitmapFrame); }
    public static System.Windows.Media.Imaging.BitmapFrame Create(System.Windows.Media.Imaging.BitmapSource source) { return default(System.Windows.Media.Imaging.BitmapFrame); }
    public static System.Windows.Media.Imaging.BitmapFrame Create(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.Imaging.BitmapSource thumbnail) { return default(System.Windows.Media.Imaging.BitmapFrame); }
    public static System.Windows.Media.Imaging.BitmapFrame Create(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.Imaging.BitmapSource thumbnail, System.Windows.Media.Imaging.BitmapMetadata metadata, System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> colorContexts) { return default(System.Windows.Media.Imaging.BitmapFrame); }
    public abstract System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter CreateInPlaceBitmapMetadataWriter();
  }
  public sealed partial class BitmapImage : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize, System.Windows.Markup.IUriContext {
    public static readonly System.Windows.DependencyProperty CacheOptionProperty;
    public static readonly System.Windows.DependencyProperty CreateOptionsProperty;
    public static readonly System.Windows.DependencyProperty DecodePixelHeightProperty;
    public static readonly System.Windows.DependencyProperty DecodePixelWidthProperty;
    public static readonly System.Windows.DependencyProperty RotationProperty;
    public static readonly System.Windows.DependencyProperty SourceRectProperty;
    public static readonly System.Windows.DependencyProperty StreamSourceProperty;
    public static readonly System.Windows.DependencyProperty UriCachePolicyProperty;
    public static readonly System.Windows.DependencyProperty UriSourceProperty;
    public BitmapImage() { }
    public BitmapImage(System.Uri uriSource) { }
    public BitmapImage(System.Uri uriSource, System.Net.Cache.RequestCachePolicy uriCachePolicy) { }
    public System.Uri BaseUri { get { return default(System.Uri); } set { } }
    public System.Windows.Media.Imaging.BitmapCacheOption CacheOption { get { return default(System.Windows.Media.Imaging.BitmapCacheOption); } set { } }
    public System.Windows.Media.Imaging.BitmapCreateOptions CreateOptions { get { return default(System.Windows.Media.Imaging.BitmapCreateOptions); } set { } }
    public int DecodePixelHeight { get { return default(int); } set { } }
    public int DecodePixelWidth { get { return default(int); } set { } }
    public override bool IsDownloading { get { return default(bool); } }
    public override System.Windows.Media.ImageMetadata Metadata { get { return default(System.Windows.Media.ImageMetadata); } }
    public System.Windows.Media.Imaging.Rotation Rotation { get { return default(System.Windows.Media.Imaging.Rotation); } set { } }
    public System.Windows.Int32Rect SourceRect { get { return default(System.Windows.Int32Rect); } set { } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(0))]
    public System.IO.Stream StreamSource { get { return default(System.IO.Stream); } set { } }
    [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.RequestCachePolicyConverter))]
    public System.Net.Cache.RequestCachePolicy UriCachePolicy { get { return default(System.Net.Cache.RequestCachePolicy); } set { } }
    public System.Uri UriSource { get { return default(System.Uri); } set { } }
    public void BeginInit() { }
    public new System.Windows.Media.Imaging.BitmapImage Clone() { return default(System.Windows.Media.Imaging.BitmapImage); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Imaging.BitmapImage CloneCurrentValue() { return default(System.Windows.Media.Imaging.BitmapImage); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public void EndInit() { }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
  }
  public partial class BitmapMetadata : System.Windows.Media.ImageMetadata, System.Collections.Generic.IEnumerable<System.String>, System.Collections.IEnumerable {
    [System.Security.SecurityCriticalAttribute]
    public BitmapMetadata(string containerFormat) { }
    public string ApplicationName { get { return default(string); } set { } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.String> Author { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.String>); } set { } }
    public string CameraManufacturer { get { return default(string); } set { } }
    public string CameraModel { get { return default(string); } set { } }
    public string Comment { get { return default(string); } set { } }
    public string Copyright { get { return default(string); } set { } }
    public string DateTaken { get { return default(string); } set { } }
    public string Format { [System.Security.SecurityCriticalAttribute]get { return default(string); } }
    public bool IsFixedSize { get { return default(bool); } }
    public bool IsReadOnly { get { return default(bool); } }
    public System.Collections.ObjectModel.ReadOnlyCollection<System.String> Keywords { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.String>); } set { } }
    public string Location { [System.Security.SecurityCriticalAttribute]get { return default(string); } }
    public int Rating { get { return default(int); } set { } }
    public string Subject { get { return default(string); } set { } }
    public string Title { get { return default(string); } set { } }
    public new System.Windows.Media.Imaging.BitmapMetadata Clone() { return default(System.Windows.Media.Imaging.BitmapMetadata); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    public bool ContainsQuery(string query) { return default(bool); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    public object GetQuery(string query) { return default(object); }
    [System.Security.SecurityCriticalAttribute]
    public void RemoveQuery(string query) { }
    [System.Security.SecurityCriticalAttribute]
    public void SetQuery(string query, object value) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    System.Collections.Generic.IEnumerator<System.String> System.Collections.Generic.IEnumerable<System.String>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.String>); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
  }
  public partial class BitmapMetadataBlob {
    public BitmapMetadataBlob(System.Byte[] blob) { }
    public System.Byte[] GetBlobValue() { return default(System.Byte[]); }
  }
  public sealed partial class BitmapPalette : System.Windows.Threading.DispatcherObject {
    public BitmapPalette(System.Collections.Generic.IList<System.Windows.Media.Color> colors) { }
    [System.Security.SecurityCriticalAttribute]
    public BitmapPalette(System.Windows.Media.Imaging.BitmapSource bitmapSource, int maxColorCount) { }
    public System.Collections.Generic.IList<System.Windows.Media.Color> Colors { get { return default(System.Collections.Generic.IList<System.Windows.Media.Color>); } }
  }
  public static partial class BitmapPalettes {
    public static System.Windows.Media.Imaging.BitmapPalette BlackAndWhite { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette BlackAndWhiteTransparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Gray16 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Gray16Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Gray256 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Gray256Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Gray4 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Gray4Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone125 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone125Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone216 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone216Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone252 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone252Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone256 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone256Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone27 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone27Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone64 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone64Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone8 { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette Halftone8Transparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette WebPalette { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public static System.Windows.Media.Imaging.BitmapPalette WebPaletteTransparent { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
  }
  public partial class BitmapSizeOptions {
    internal BitmapSizeOptions() { }
    public int PixelHeight { get { return default(int); } }
    public int PixelWidth { get { return default(int); } }
    public bool PreservesAspectRatio { get { return default(bool); } }
    public System.Windows.Media.Imaging.Rotation Rotation { get { return default(System.Windows.Media.Imaging.Rotation); } }
    public static System.Windows.Media.Imaging.BitmapSizeOptions FromEmptyOptions() { return default(System.Windows.Media.Imaging.BitmapSizeOptions); }
    public static System.Windows.Media.Imaging.BitmapSizeOptions FromHeight(int pixelHeight) { return default(System.Windows.Media.Imaging.BitmapSizeOptions); }
    public static System.Windows.Media.Imaging.BitmapSizeOptions FromRotation(System.Windows.Media.Imaging.Rotation rotation) { return default(System.Windows.Media.Imaging.BitmapSizeOptions); }
    public static System.Windows.Media.Imaging.BitmapSizeOptions FromWidth(int pixelWidth) { return default(System.Windows.Media.Imaging.BitmapSizeOptions); }
    public static System.Windows.Media.Imaging.BitmapSizeOptions FromWidthAndHeight(int pixelWidth, int pixelHeight) { return default(System.Windows.Media.Imaging.BitmapSizeOptions); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public abstract partial class BitmapSource : System.Windows.Media.ImageSource {
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected BitmapSource() { }
    public virtual double DpiX { get { return default(double); } }
    public virtual double DpiY { get { return default(double); } }
    public virtual System.Windows.Media.PixelFormat Format { get { return default(System.Windows.Media.PixelFormat); } }
    public override double Height { get { return default(double); } }
    public virtual bool IsDownloading { get { return default(bool); } }
    public override System.Windows.Media.ImageMetadata Metadata { get { return default(System.Windows.Media.ImageMetadata); } }
    public virtual System.Windows.Media.Imaging.BitmapPalette Palette { get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public virtual int PixelHeight { get { return default(int); } }
    public virtual int PixelWidth { get { return default(int); } }
    public override double Width { get { return default(double); } }
    public virtual event System.EventHandler<System.Windows.Media.ExceptionEventArgs> DecodeFailed { add { } remove { } }
    public virtual event System.EventHandler DownloadCompleted { add { } remove { } }
    public virtual event System.EventHandler<System.Windows.Media.ExceptionEventArgs> DownloadFailed { add { } remove { } }
    public virtual event System.EventHandler<System.Windows.Media.Imaging.DownloadProgressEventArgs> DownloadProgress { add { } remove { } }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected void CheckIfSiteOfOrigin() { }
    public new System.Windows.Media.Imaging.BitmapSource Clone() { return default(System.Windows.Media.Imaging.BitmapSource); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Imaging.BitmapSource CloneCurrentValue() { return default(System.Windows.Media.Imaging.BitmapSource); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Flags=(System.Security.Permissions.SecurityPermissionFlag)(2))]
    public virtual void CopyPixels(System.Array pixels, int stride, int offset) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Flags=(System.Security.Permissions.SecurityPermissionFlag)(2))]
    public virtual void CopyPixels(System.Windows.Int32Rect sourceRect, System.Array pixels, int stride, int offset) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.InheritanceDemand, Flags=(System.Security.Permissions.SecurityPermissionFlag)(2))]
    [System.Security.Permissions.SecurityPermissionAttribute(System.Security.Permissions.SecurityAction.LinkDemand, Flags=(System.Security.Permissions.SecurityPermissionFlag)(2))]
    public virtual void CopyPixels(System.Windows.Int32Rect sourceRect, System.IntPtr buffer, int bufferSize, int stride) { }
    public static System.Windows.Media.Imaging.BitmapSource Create(int pixelWidth, int pixelHeight, double dpiX, double dpiY, System.Windows.Media.PixelFormat pixelFormat, System.Windows.Media.Imaging.BitmapPalette palette, System.Array pixels, int stride) { return default(System.Windows.Media.Imaging.BitmapSource); }
    [System.Security.SecurityCriticalAttribute]
    public static System.Windows.Media.Imaging.BitmapSource Create(int pixelWidth, int pixelHeight, double dpiX, double dpiY, System.Windows.Media.PixelFormat pixelFormat, System.Windows.Media.Imaging.BitmapPalette palette, System.IntPtr buffer, int bufferSize, int stride) { return default(System.Windows.Media.Imaging.BitmapSource); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
  }
  public sealed partial class BmpBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder {
    [System.Security.SecurityCriticalAttribute]
    public BmpBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    [System.Security.SecurityCriticalAttribute]
    public BmpBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
  }
  public sealed partial class BmpBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder {
    [System.Security.SecurityCriticalAttribute]
    public BmpBitmapEncoder() { }
  }
  public sealed partial class CachedBitmap : System.Windows.Media.Imaging.BitmapSource {
    public CachedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    public new System.Windows.Media.Imaging.CachedBitmap Clone() { return default(System.Windows.Media.Imaging.CachedBitmap); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Imaging.CachedBitmap CloneCurrentValue() { return default(System.Windows.Media.Imaging.CachedBitmap); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
  }
  public sealed partial class ColorConvertedBitmap : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize {
    public static readonly System.Windows.DependencyProperty DestinationColorContextProperty;
    public static readonly System.Windows.DependencyProperty DestinationFormatProperty;
    public static readonly System.Windows.DependencyProperty SourceColorContextProperty;
    public static readonly System.Windows.DependencyProperty SourceProperty;
    public ColorConvertedBitmap() { }
    public ColorConvertedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.ColorContext sourceColorContext, System.Windows.Media.ColorContext destinationColorContext, System.Windows.Media.PixelFormat format) { }
    public System.Windows.Media.ColorContext DestinationColorContext { get { return default(System.Windows.Media.ColorContext); } set { } }
    public System.Windows.Media.PixelFormat DestinationFormat { get { return default(System.Windows.Media.PixelFormat); } set { } }
    public System.Windows.Media.Imaging.BitmapSource Source { get { return default(System.Windows.Media.Imaging.BitmapSource); } set { } }
    public System.Windows.Media.ColorContext SourceColorContext { get { return default(System.Windows.Media.ColorContext); } set { } }
    public void BeginInit() { }
    public new System.Windows.Media.Imaging.ColorConvertedBitmap Clone() { return default(System.Windows.Media.Imaging.ColorConvertedBitmap); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Imaging.ColorConvertedBitmap CloneCurrentValue() { return default(System.Windows.Media.Imaging.ColorConvertedBitmap); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.Security.SecurityCriticalAttribute]
    public void EndInit() { }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
  }
  public sealed partial class CroppedBitmap : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize {
    public static readonly System.Windows.DependencyProperty SourceProperty;
    public static readonly System.Windows.DependencyProperty SourceRectProperty;
    public CroppedBitmap() { }
    public CroppedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Int32Rect sourceRect) { }
    public System.Windows.Media.Imaging.BitmapSource Source { get { return default(System.Windows.Media.Imaging.BitmapSource); } set { } }
    public System.Windows.Int32Rect SourceRect { get { return default(System.Windows.Int32Rect); } set { } }
    public void BeginInit() { }
    public new System.Windows.Media.Imaging.CroppedBitmap Clone() { return default(System.Windows.Media.Imaging.CroppedBitmap); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Imaging.CroppedBitmap CloneCurrentValue() { return default(System.Windows.Media.Imaging.CroppedBitmap); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.Security.SecurityCriticalAttribute]
    public void EndInit() { }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
  }
  public partial class DownloadProgressEventArgs : System.EventArgs {
    internal DownloadProgressEventArgs() { }
    public int Progress { get { return default(int); } }
  }
  public sealed partial class FormatConvertedBitmap : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize {
    public static readonly System.Windows.DependencyProperty AlphaThresholdProperty;
    public static readonly System.Windows.DependencyProperty DestinationFormatProperty;
    public static readonly System.Windows.DependencyProperty DestinationPaletteProperty;
    public static readonly System.Windows.DependencyProperty SourceProperty;
    public FormatConvertedBitmap() { }
    public FormatConvertedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.PixelFormat destinationFormat, System.Windows.Media.Imaging.BitmapPalette destinationPalette, double alphaThreshold) { }
    public double AlphaThreshold { get { return default(double); } set { } }
    public System.Windows.Media.PixelFormat DestinationFormat { get { return default(System.Windows.Media.PixelFormat); } set { } }
    public System.Windows.Media.Imaging.BitmapPalette DestinationPalette { get { return default(System.Windows.Media.Imaging.BitmapPalette); } set { } }
    public System.Windows.Media.Imaging.BitmapSource Source { get { return default(System.Windows.Media.Imaging.BitmapSource); } set { } }
    public void BeginInit() { }
    public new System.Windows.Media.Imaging.FormatConvertedBitmap Clone() { return default(System.Windows.Media.Imaging.FormatConvertedBitmap); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Imaging.FormatConvertedBitmap CloneCurrentValue() { return default(System.Windows.Media.Imaging.FormatConvertedBitmap); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.Security.SecurityCriticalAttribute]
    public void EndInit() { }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
  }
  public sealed partial class GifBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder {
    [System.Security.SecurityCriticalAttribute]
    public GifBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    [System.Security.SecurityCriticalAttribute]
    public GifBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
  }
  public sealed partial class GifBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder {
    [System.Security.SecurityCriticalAttribute]
    public GifBitmapEncoder() { }
  }
  public sealed partial class IconBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder {
    [System.Security.SecurityCriticalAttribute]
    public IconBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    [System.Security.SecurityCriticalAttribute]
    public IconBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
  }
  public sealed partial class InPlaceBitmapMetadataWriter : System.Windows.Media.Imaging.BitmapMetadata {
    internal InPlaceBitmapMetadataWriter() : base (default(string)) { }
    public new System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter Clone() { return default(System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter); }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    public bool TrySave() { return default(bool); }
  }
  public sealed partial class JpegBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder {
    [System.Security.SecurityCriticalAttribute]
    public JpegBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    [System.Security.SecurityCriticalAttribute]
    public JpegBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
  }
  public sealed partial class JpegBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder {
    [System.Security.SecurityCriticalAttribute]
    public JpegBitmapEncoder() { }
    public bool FlipHorizontal { get { return default(bool); } set { } }
    public bool FlipVertical { get { return default(bool); } set { } }
    public int QualityLevel { get { return default(int); } set { } }
    public System.Windows.Media.Imaging.Rotation Rotation { get { return default(System.Windows.Media.Imaging.Rotation); } set { } }
  }
  public sealed partial class LateBoundBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder {
    internal LateBoundBitmapDecoder() { }
    public override System.Windows.Media.Imaging.BitmapCodecInfo CodecInfo { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapCodecInfo); } }
    public override System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext> ColorContexts { [System.Security.SecurityCriticalAttribute]get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.ColorContext>); } }
    public System.Windows.Media.Imaging.BitmapDecoder Decoder { get { return default(System.Windows.Media.Imaging.BitmapDecoder); } }
    public override System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.Imaging.BitmapFrame> Frames { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<System.Windows.Media.Imaging.BitmapFrame>); } }
    public override bool IsDownloading { get { return default(bool); } }
    public override System.Windows.Media.Imaging.BitmapPalette Palette { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapPalette); } }
    public override System.Windows.Media.Imaging.BitmapSource Preview { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapSource); } }
    public override System.Windows.Media.Imaging.BitmapSource Thumbnail { [System.Security.SecurityCriticalAttribute]get { return default(System.Windows.Media.Imaging.BitmapSource); } }
  }
  public sealed partial class PngBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder {
    [System.Security.SecurityCriticalAttribute]
    public PngBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    [System.Security.SecurityCriticalAttribute]
    public PngBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
  }
  public sealed partial class PngBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder {
    [System.Security.SecurityCriticalAttribute]
    public PngBitmapEncoder() { }
    public System.Windows.Media.Imaging.PngInterlaceOption Interlace { get { return default(System.Windows.Media.Imaging.PngInterlaceOption); } set { } }
  }
  public enum PngInterlaceOption {
    Default = 0,
    Off = 2,
    On = 1,
  }
  public sealed partial class RenderTargetBitmap : System.Windows.Media.Imaging.BitmapSource {
    [System.Security.SecurityCriticalAttribute]
    public RenderTargetBitmap(int pixelWidth, int pixelHeight, double dpiX, double dpiY, System.Windows.Media.PixelFormat pixelFormat) { }
    [System.Security.SecurityCriticalAttribute]
    public void Clear() { }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public void Render(System.Windows.Media.Visual visual) { }
  }
  public enum Rotation {
    Rotate0 = 0,
    Rotate180 = 2,
    Rotate270 = 3,
    Rotate90 = 1,
  }
  public sealed partial class TiffBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder {
    [System.Security.SecurityCriticalAttribute]
    public TiffBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    [System.Security.SecurityCriticalAttribute]
    public TiffBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
  }
  public sealed partial class TiffBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder {
    [System.Security.SecurityCriticalAttribute]
    public TiffBitmapEncoder() { }
    public System.Windows.Media.Imaging.TiffCompressOption Compression { get { return default(System.Windows.Media.Imaging.TiffCompressOption); } set { } }
  }
  public enum TiffCompressOption {
    Ccitt3 = 2,
    Ccitt4 = 3,
    Default = 0,
    Lzw = 4,
    None = 1,
    Rle = 5,
    Zip = 6,
  }
  public sealed partial class TransformedBitmap : System.Windows.Media.Imaging.BitmapSource, System.ComponentModel.ISupportInitialize {
    public static readonly System.Windows.DependencyProperty SourceProperty;
    public static readonly System.Windows.DependencyProperty TransformProperty;
    public TransformedBitmap() { }
    public TransformedBitmap(System.Windows.Media.Imaging.BitmapSource source, System.Windows.Media.Transform newTransform) { }
    public System.Windows.Media.Imaging.BitmapSource Source { get { return default(System.Windows.Media.Imaging.BitmapSource); } set { } }
    public System.Windows.Media.Transform Transform { get { return default(System.Windows.Media.Transform); } set { } }
    public void BeginInit() { }
    public new System.Windows.Media.Imaging.TransformedBitmap Clone() { return default(System.Windows.Media.Imaging.TransformedBitmap); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Imaging.TransformedBitmap CloneCurrentValue() { return default(System.Windows.Media.Imaging.TransformedBitmap); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.Security.SecurityCriticalAttribute]
    public void EndInit() { }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
  }
  public sealed partial class WmpBitmapDecoder : System.Windows.Media.Imaging.BitmapDecoder {
    [System.Security.SecurityCriticalAttribute]
    public WmpBitmapDecoder(System.IO.Stream bitmapStream, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
    [System.Security.SecurityCriticalAttribute]
    public WmpBitmapDecoder(System.Uri bitmapUri, System.Windows.Media.Imaging.BitmapCreateOptions createOptions, System.Windows.Media.Imaging.BitmapCacheOption cacheOption) { }
  }
  public sealed partial class WmpBitmapEncoder : System.Windows.Media.Imaging.BitmapEncoder {
    [System.Security.SecurityCriticalAttribute]
    public WmpBitmapEncoder() { }
    public byte AlphaDataDiscardLevel { get { return default(byte); } set { } }
    public byte AlphaQualityLevel { get { return default(byte); } set { } }
    public bool CompressedDomainTranscode { get { return default(bool); } set { } }
    public bool FlipHorizontal { get { return default(bool); } set { } }
    public bool FlipVertical { get { return default(bool); } set { } }
    public bool FrequencyOrder { get { return default(bool); } set { } }
    public short HorizontalTileSlices { get { return default(short); } set { } }
    public bool IgnoreOverlap { get { return default(bool); } set { } }
    public byte ImageDataDiscardLevel { get { return default(byte); } set { } }
    public float ImageQualityLevel { get { return default(float); } set { } }
    public bool InterleavedAlpha { get { return default(bool); } set { } }
    public bool Lossless { get { return default(bool); } set { } }
    public byte OverlapLevel { get { return default(byte); } set { } }
    public byte QualityLevel { get { return default(byte); } set { } }
    public System.Windows.Media.Imaging.Rotation Rotation { get { return default(System.Windows.Media.Imaging.Rotation); } set { } }
    public byte SubsamplingLevel { get { return default(byte); } set { } }
    public bool UseCodecOptions { get { return default(bool); } set { } }
    public short VerticalTileSlices { get { return default(short); } set { } }
  }
  public sealed partial class WriteableBitmap : System.Windows.Media.Imaging.BitmapSource {
    [System.Security.SecurityCriticalAttribute]
    public WriteableBitmap(int pixelWidth, int pixelHeight, double dpiX, double dpiY, System.Windows.Media.PixelFormat pixelFormat, System.Windows.Media.Imaging.BitmapPalette palette) { }
    [System.Security.SecurityCriticalAttribute]
    public WriteableBitmap(System.Windows.Media.Imaging.BitmapSource source) { }
    public System.IntPtr BackBuffer { [System.Security.SecurityCriticalAttribute]get { return default(System.IntPtr); } }
    public int BackBufferStride { get { return default(int); } }
    [System.Security.SecurityCriticalAttribute]
    public void AddDirtyRect(System.Windows.Int32Rect dirtyRect) { }
    public new System.Windows.Media.Imaging.WriteableBitmap Clone() { return default(System.Windows.Media.Imaging.WriteableBitmap); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    public new System.Windows.Media.Imaging.WriteableBitmap CloneCurrentValue() { return default(System.Windows.Media.Imaging.WriteableBitmap); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    [System.Security.SecurityCriticalAttribute]
    [System.Security.SecurityTreatAsSafeAttribute]
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public void Lock() { }
    [System.Security.SecurityCriticalAttribute]
    public bool TryLock(System.Windows.Duration timeout) { return default(bool); }
    [System.Security.SecurityCriticalAttribute]
    public void Unlock() { }
    [System.Security.SecurityCriticalAttribute]
    public void WritePixels(System.Windows.Int32Rect sourceRect, System.Array pixels, int stride, int offset) { }
    [System.Security.SecurityCriticalAttribute]
    public void WritePixels(System.Windows.Int32Rect sourceRect, System.Array sourceBuffer, int sourceBufferStride, int destinationX, int destinationY) { }
    [System.Security.SecurityCriticalAttribute]
    public void WritePixels(System.Windows.Int32Rect sourceRect, System.IntPtr buffer, int bufferSize, int stride) { }
    [System.Security.SecurityCriticalAttribute]
    public void WritePixels(System.Windows.Int32Rect sourceRect, System.IntPtr sourceBuffer, int sourceBufferSize, int sourceBufferStride, int destinationX, int destinationY) { }
  }
}
namespace System.Windows.Media.Media3D {
  public abstract partial class AffineTransform3D : System.Windows.Media.Media3D.Transform3D {
    internal AffineTransform3D() { }
    public override bool IsAffine { get { return default(bool); } }
    public new System.Windows.Media.Media3D.AffineTransform3D Clone() { return default(System.Windows.Media.Media3D.AffineTransform3D); }
    public new System.Windows.Media.Media3D.AffineTransform3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.AffineTransform3D); }
  }
  public sealed partial class AmbientLight : System.Windows.Media.Media3D.Light {
    public AmbientLight() { }
    public AmbientLight(System.Windows.Media.Color ambientColor) { }
    public new System.Windows.Media.Media3D.AmbientLight Clone() { return default(System.Windows.Media.Media3D.AmbientLight); }
    public new System.Windows.Media.Media3D.AmbientLight CloneCurrentValue() { return default(System.Windows.Media.Media3D.AmbientLight); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class AxisAngleRotation3D : System.Windows.Media.Media3D.Rotation3D {
    public static readonly System.Windows.DependencyProperty AngleProperty;
    public static readonly System.Windows.DependencyProperty AxisProperty;
    public AxisAngleRotation3D() { }
    public AxisAngleRotation3D(System.Windows.Media.Media3D.Vector3D axis, double angle) { }
    public double Angle { get { return default(double); } set { } }
    public System.Windows.Media.Media3D.Vector3D Axis { get { return default(System.Windows.Media.Media3D.Vector3D); } set { } }
    public new System.Windows.Media.Media3D.AxisAngleRotation3D Clone() { return default(System.Windows.Media.Media3D.AxisAngleRotation3D); }
    public new System.Windows.Media.Media3D.AxisAngleRotation3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.AxisAngleRotation3D); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public abstract partial class Camera : System.Windows.Media.Animation.Animatable, System.IFormattable {
    internal Camera() { }
    public static readonly System.Windows.DependencyProperty TransformProperty;
    public System.Windows.Media.Media3D.Transform3D Transform { get { return default(System.Windows.Media.Media3D.Transform3D); } set { } }
    public new System.Windows.Media.Media3D.Camera Clone() { return default(System.Windows.Media.Media3D.Camera); }
    public new System.Windows.Media.Media3D.Camera CloneCurrentValue() { return default(System.Windows.Media.Media3D.Camera); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class ContainerUIElement3D : System.Windows.UIElement3D {
    public ContainerUIElement3D() { }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Media.Media3D.Visual3DCollection Children { get { return default(System.Windows.Media.Media3D.Visual3DCollection); } }
    protected override int Visual3DChildrenCount { get { return default(int); } }
    protected override System.Windows.Media.Media3D.Visual3D GetVisual3DChild(int index) { return default(System.Windows.Media.Media3D.Visual3D); }
    protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { return default(System.Windows.Automation.Peers.AutomationPeer); }
  }
  public sealed partial class DiffuseMaterial : System.Windows.Media.Media3D.Material {
    public static readonly System.Windows.DependencyProperty AmbientColorProperty;
    public static readonly System.Windows.DependencyProperty BrushProperty;
    public static readonly System.Windows.DependencyProperty ColorProperty;
    public DiffuseMaterial() { }
    public DiffuseMaterial(System.Windows.Media.Brush brush) { }
    public System.Windows.Media.Color AmbientColor { get { return default(System.Windows.Media.Color); } set { } }
    public System.Windows.Media.Brush Brush { get { return default(System.Windows.Media.Brush); } set { } }
    public System.Windows.Media.Color Color { get { return default(System.Windows.Media.Color); } set { } }
    public new System.Windows.Media.Media3D.DiffuseMaterial Clone() { return default(System.Windows.Media.Media3D.DiffuseMaterial); }
    public new System.Windows.Media.Media3D.DiffuseMaterial CloneCurrentValue() { return default(System.Windows.Media.Media3D.DiffuseMaterial); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class DirectionalLight : System.Windows.Media.Media3D.Light {
    public static readonly System.Windows.DependencyProperty DirectionProperty;
    public DirectionalLight() { }
    public DirectionalLight(System.Windows.Media.Color diffuseColor, System.Windows.Media.Media3D.Vector3D direction) { }
    public System.Windows.Media.Media3D.Vector3D Direction { get { return default(System.Windows.Media.Media3D.Vector3D); } set { } }
    public new System.Windows.Media.Media3D.DirectionalLight Clone() { return default(System.Windows.Media.Media3D.DirectionalLight); }
    public new System.Windows.Media.Media3D.DirectionalLight CloneCurrentValue() { return default(System.Windows.Media.Media3D.DirectionalLight); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class EmissiveMaterial : System.Windows.Media.Media3D.Material {
    public static readonly System.Windows.DependencyProperty BrushProperty;
    public static readonly System.Windows.DependencyProperty ColorProperty;
    public EmissiveMaterial() { }
    public EmissiveMaterial(System.Windows.Media.Brush brush) { }
    public System.Windows.Media.Brush Brush { get { return default(System.Windows.Media.Brush); } set { } }
    public System.Windows.Media.Color Color { get { return default(System.Windows.Media.Color); } set { } }
    public new System.Windows.Media.Media3D.EmissiveMaterial Clone() { return default(System.Windows.Media.Media3D.EmissiveMaterial); }
    public new System.Windows.Media.Media3D.EmissiveMaterial CloneCurrentValue() { return default(System.Windows.Media.Media3D.EmissiveMaterial); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public partial class GeneralTransform2DTo3D : System.Windows.Freezable {
    internal GeneralTransform2DTo3D() { }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Windows.Media.Media3D.Point3D Transform(System.Windows.Point point) { return default(System.Windows.Media.Media3D.Point3D); }
    public bool TryTransform(System.Windows.Point inPoint, out System.Windows.Media.Media3D.Point3D result) { result = default(System.Windows.Media.Media3D.Point3D); return default(bool); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public abstract partial class GeneralTransform3D : System.Windows.Media.Animation.Animatable, System.IFormattable {
    internal GeneralTransform3D() { }
    public abstract System.Windows.Media.Media3D.GeneralTransform3D Inverse { get; }
    public new System.Windows.Media.Media3D.GeneralTransform3D Clone() { return default(System.Windows.Media.Media3D.GeneralTransform3D); }
    public new System.Windows.Media.Media3D.GeneralTransform3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.GeneralTransform3D); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public System.Windows.Media.Media3D.Point3D Transform(System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Point3D); }
    public abstract System.Windows.Media.Media3D.Rect3D TransformBounds(System.Windows.Media.Media3D.Rect3D rect);
    public abstract bool TryTransform(System.Windows.Media.Media3D.Point3D inPoint, out System.Windows.Media.Media3D.Point3D result);
  }
  public sealed partial class GeneralTransform3DCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.GeneralTransform3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.GeneralTransform3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.GeneralTransform3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public GeneralTransform3DCollection() { }
    public GeneralTransform3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.GeneralTransform3D> collection) { }
    public GeneralTransform3DCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Media3D.GeneralTransform3D this[int index] { get { return default(System.Windows.Media.Media3D.GeneralTransform3D); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.GeneralTransform3D>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Media3D.GeneralTransform3D value) { }
    public void Clear() { }
    public new System.Windows.Media.Media3D.GeneralTransform3DCollection Clone() { return default(System.Windows.Media.Media3D.GeneralTransform3DCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Media3D.GeneralTransform3DCollection CloneCurrentValue() { return default(System.Windows.Media.Media3D.GeneralTransform3DCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Media3D.GeneralTransform3D value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Media3D.GeneralTransform3D[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Media3D.GeneralTransform3D value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Media3D.GeneralTransform3D value) { }
    public bool Remove(System.Windows.Media.Media3D.GeneralTransform3D value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.GeneralTransform3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.GeneralTransform3D>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.GeneralTransform3D>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.GeneralTransform3D>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Media3D.GeneralTransform3D Current { get { return default(System.Windows.Media.Media3D.GeneralTransform3D); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class GeneralTransform3DGroup : System.Windows.Media.Media3D.GeneralTransform3D {
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    public GeneralTransform3DGroup() { }
    public System.Windows.Media.Media3D.GeneralTransform3DCollection Children { get { return default(System.Windows.Media.Media3D.GeneralTransform3DCollection); } set { } }
    public override System.Windows.Media.Media3D.GeneralTransform3D Inverse { get { return default(System.Windows.Media.Media3D.GeneralTransform3D); } }
    public new System.Windows.Media.Media3D.GeneralTransform3DGroup Clone() { return default(System.Windows.Media.Media3D.GeneralTransform3DGroup); }
    public new System.Windows.Media.Media3D.GeneralTransform3DGroup CloneCurrentValue() { return default(System.Windows.Media.Media3D.GeneralTransform3DGroup); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    public override System.Windows.Media.Media3D.Rect3D TransformBounds(System.Windows.Media.Media3D.Rect3D rect) { return default(System.Windows.Media.Media3D.Rect3D); }
    public override bool TryTransform(System.Windows.Media.Media3D.Point3D inPoint, out System.Windows.Media.Media3D.Point3D result) { result = default(System.Windows.Media.Media3D.Point3D); return default(bool); }
  }
  public partial class GeneralTransform3DTo2D : System.Windows.Freezable {
    internal GeneralTransform3DTo2D() { }
    protected override void CloneCore(System.Windows.Freezable sourceFreezable) { }
    protected override void CloneCurrentValueCore(System.Windows.Freezable sourceFreezable) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable sourceFreezable) { }
    public System.Windows.Point Transform(System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Point); }
    public System.Windows.Rect TransformBounds(System.Windows.Media.Media3D.Rect3D rect3D) { return default(System.Windows.Rect); }
    public bool TryTransform(System.Windows.Media.Media3D.Point3D inPoint, out System.Windows.Point result) { result = default(System.Windows.Point); return default(bool); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public abstract partial class Geometry3D : System.Windows.Media.Animation.Animatable {
    internal Geometry3D() { }
    public abstract System.Windows.Media.Media3D.Rect3D Bounds { get; }
    public new System.Windows.Media.Media3D.Geometry3D Clone() { return default(System.Windows.Media.Media3D.Geometry3D); }
    public new System.Windows.Media.Media3D.Geometry3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.Geometry3D); }
  }
  public sealed partial class GeometryModel3D : System.Windows.Media.Media3D.Model3D {
    public static readonly System.Windows.DependencyProperty BackMaterialProperty;
    public static readonly System.Windows.DependencyProperty GeometryProperty;
    public static readonly System.Windows.DependencyProperty MaterialProperty;
    public GeometryModel3D() { }
    public GeometryModel3D(System.Windows.Media.Media3D.Geometry3D geometry, System.Windows.Media.Media3D.Material material) { }
    public System.Windows.Media.Media3D.Material BackMaterial { get { return default(System.Windows.Media.Media3D.Material); } set { } }
    public System.Windows.Media.Media3D.Geometry3D Geometry { get { return default(System.Windows.Media.Media3D.Geometry3D); } set { } }
    public System.Windows.Media.Media3D.Material Material { get { return default(System.Windows.Media.Media3D.Material); } set { } }
    public new System.Windows.Media.Media3D.GeometryModel3D Clone() { return default(System.Windows.Media.Media3D.GeometryModel3D); }
    public new System.Windows.Media.Media3D.GeometryModel3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.GeometryModel3D); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public abstract partial class HitTestParameters3D {
    internal HitTestParameters3D() { }
  }
  public abstract partial class Light : System.Windows.Media.Media3D.Model3D {
    internal Light() { }
    public static readonly System.Windows.DependencyProperty ColorProperty;
    public System.Windows.Media.Color Color { get { return default(System.Windows.Media.Color); } set { } }
    public new System.Windows.Media.Media3D.Light Clone() { return default(System.Windows.Media.Media3D.Light); }
    public new System.Windows.Media.Media3D.Light CloneCurrentValue() { return default(System.Windows.Media.Media3D.Light); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public abstract partial class Material : System.Windows.Media.Animation.Animatable, System.IFormattable {
    internal Material() { }
    public new System.Windows.Media.Media3D.Material Clone() { return default(System.Windows.Media.Media3D.Material); }
    public new System.Windows.Media.Media3D.Material CloneCurrentValue() { return default(System.Windows.Media.Media3D.Material); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public sealed partial class MaterialCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Material>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Material>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Material>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public MaterialCollection() { }
    public MaterialCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Material> collection) { }
    public MaterialCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Media3D.Material this[int index] { get { return default(System.Windows.Media.Media3D.Material); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Material>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Media3D.Material value) { }
    public void Clear() { }
    public new System.Windows.Media.Media3D.MaterialCollection Clone() { return default(System.Windows.Media.Media3D.MaterialCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Media3D.MaterialCollection CloneCurrentValue() { return default(System.Windows.Media.Media3D.MaterialCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Media3D.Material value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Media3D.Material[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.Media3D.MaterialCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.Media3D.MaterialCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Media3D.Material value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Media3D.Material value) { }
    public bool Remove(System.Windows.Media.Media3D.Material value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Material> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Material>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Material>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Material>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Media3D.Material Current { get { return default(System.Windows.Media.Media3D.Material); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class MaterialGroup : System.Windows.Media.Media3D.Material {
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    public MaterialGroup() { }
    public System.Windows.Media.Media3D.MaterialCollection Children { get { return default(System.Windows.Media.Media3D.MaterialCollection); } set { } }
    public new System.Windows.Media.Media3D.MaterialGroup Clone() { return default(System.Windows.Media.Media3D.MaterialGroup); }
    public new System.Windows.Media.Media3D.MaterialGroup CloneCurrentValue() { return default(System.Windows.Media.Media3D.MaterialGroup); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Matrix3DConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Matrix3D : System.IFormattable {
    public Matrix3D(double m11, double m12, double m13, double m14, double m21, double m22, double m23, double m24, double m31, double m32, double m33, double m34, double offsetX, double offsetY, double offsetZ, double m44) { throw new System.NotImplementedException(); }
    public double Determinant { get { return default(double); } }
    public bool HasInverse { get { return default(bool); } }
    public static System.Windows.Media.Media3D.Matrix3D Identity { get { return default(System.Windows.Media.Media3D.Matrix3D); } }
    public bool IsAffine { get { return default(bool); } }
    public bool IsIdentity { get { return default(bool); } }
    public double M11 { get { return default(double); } set { } }
    public double M12 { get { return default(double); } set { } }
    public double M13 { get { return default(double); } set { } }
    public double M14 { get { return default(double); } set { } }
    public double M21 { get { return default(double); } set { } }
    public double M22 { get { return default(double); } set { } }
    public double M23 { get { return default(double); } set { } }
    public double M24 { get { return default(double); } set { } }
    public double M31 { get { return default(double); } set { } }
    public double M32 { get { return default(double); } set { } }
    public double M33 { get { return default(double); } set { } }
    public double M34 { get { return default(double); } set { } }
    public double M44 { get { return default(double); } set { } }
    public double OffsetX { get { return default(double); } set { } }
    public double OffsetY { get { return default(double); } set { } }
    public double OffsetZ { get { return default(double); } set { } }
    public void Append(System.Windows.Media.Media3D.Matrix3D matrix) { }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Media.Media3D.Matrix3D value) { return default(bool); }
    public static bool Equals(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public void Invert() { }
    public static System.Windows.Media.Media3D.Matrix3D Multiply(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { return default(System.Windows.Media.Media3D.Matrix3D); }
    public static bool operator ==(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { return default(bool); }
    public static bool operator !=(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { return default(bool); }
    public static System.Windows.Media.Media3D.Matrix3D operator *(System.Windows.Media.Media3D.Matrix3D matrix1, System.Windows.Media.Media3D.Matrix3D matrix2) { return default(System.Windows.Media.Media3D.Matrix3D); }
    public static System.Windows.Media.Media3D.Matrix3D Parse(string source) { return default(System.Windows.Media.Media3D.Matrix3D); }
    public void Prepend(System.Windows.Media.Media3D.Matrix3D matrix) { }
    public void Rotate(System.Windows.Media.Media3D.Quaternion quaternion) { }
    public void RotateAt(System.Windows.Media.Media3D.Quaternion quaternion, System.Windows.Media.Media3D.Point3D center) { }
    public void RotateAtPrepend(System.Windows.Media.Media3D.Quaternion quaternion, System.Windows.Media.Media3D.Point3D center) { }
    public void RotatePrepend(System.Windows.Media.Media3D.Quaternion quaternion) { }
    public void Scale(System.Windows.Media.Media3D.Vector3D scale) { }
    public void ScaleAt(System.Windows.Media.Media3D.Vector3D scale, System.Windows.Media.Media3D.Point3D center) { }
    public void ScaleAtPrepend(System.Windows.Media.Media3D.Vector3D scale, System.Windows.Media.Media3D.Point3D center) { }
    public void ScalePrepend(System.Windows.Media.Media3D.Vector3D scale) { }
    public void SetIdentity() { }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public System.Windows.Media.Media3D.Point3D Transform(System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Point3D); }
    public void Transform(System.Windows.Media.Media3D.Point3D[] points) { }
    public System.Windows.Media.Media3D.Point4D Transform(System.Windows.Media.Media3D.Point4D point) { return default(System.Windows.Media.Media3D.Point4D); }
    public void Transform(System.Windows.Media.Media3D.Point4D[] points) { }
    public System.Windows.Media.Media3D.Vector3D Transform(System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Vector3D); }
    public void Transform(System.Windows.Media.Media3D.Vector3D[] vectors) { }
    public void Translate(System.Windows.Media.Media3D.Vector3D offset) { }
    public void TranslatePrepend(System.Windows.Media.Media3D.Vector3D offset) { }
  }
  public sealed partial class Matrix3DConverter : System.ComponentModel.TypeConverter {
    public Matrix3DConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class MatrixCamera : System.Windows.Media.Media3D.Camera {
    public static readonly System.Windows.DependencyProperty ProjectionMatrixProperty;
    public static readonly System.Windows.DependencyProperty ViewMatrixProperty;
    public MatrixCamera() { }
    public MatrixCamera(System.Windows.Media.Media3D.Matrix3D viewMatrix, System.Windows.Media.Media3D.Matrix3D projectionMatrix) { }
    public System.Windows.Media.Media3D.Matrix3D ProjectionMatrix { get { return default(System.Windows.Media.Media3D.Matrix3D); } set { } }
    public System.Windows.Media.Media3D.Matrix3D ViewMatrix { get { return default(System.Windows.Media.Media3D.Matrix3D); } set { } }
    public new System.Windows.Media.Media3D.MatrixCamera Clone() { return default(System.Windows.Media.Media3D.MatrixCamera); }
    public new System.Windows.Media.Media3D.MatrixCamera CloneCurrentValue() { return default(System.Windows.Media.Media3D.MatrixCamera); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class MatrixTransform3D : System.Windows.Media.Media3D.Transform3D {
    public static readonly System.Windows.DependencyProperty MatrixProperty;
    public MatrixTransform3D() { }
    public MatrixTransform3D(System.Windows.Media.Media3D.Matrix3D matrix) { }
    public override bool IsAffine { get { return default(bool); } }
    public System.Windows.Media.Media3D.Matrix3D Matrix { get { return default(System.Windows.Media.Media3D.Matrix3D); } set { } }
    public override System.Windows.Media.Media3D.Matrix3D Value { get { return default(System.Windows.Media.Media3D.Matrix3D); } }
    public new System.Windows.Media.Media3D.MatrixTransform3D Clone() { return default(System.Windows.Media.Media3D.MatrixTransform3D); }
    public new System.Windows.Media.Media3D.MatrixTransform3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.MatrixTransform3D); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class MeshGeometry3D : System.Windows.Media.Media3D.Geometry3D {
    public static readonly System.Windows.DependencyProperty NormalsProperty;
    public static readonly System.Windows.DependencyProperty PositionsProperty;
    public static readonly System.Windows.DependencyProperty TextureCoordinatesProperty;
    public static readonly System.Windows.DependencyProperty TriangleIndicesProperty;
    public MeshGeometry3D() { }
    public override System.Windows.Media.Media3D.Rect3D Bounds { get { return default(System.Windows.Media.Media3D.Rect3D); } }
    public System.Windows.Media.Media3D.Vector3DCollection Normals { get { return default(System.Windows.Media.Media3D.Vector3DCollection); } set { } }
    public System.Windows.Media.Media3D.Point3DCollection Positions { get { return default(System.Windows.Media.Media3D.Point3DCollection); } set { } }
    public System.Windows.Media.PointCollection TextureCoordinates { get { return default(System.Windows.Media.PointCollection); } set { } }
    public System.Windows.Media.Int32Collection TriangleIndices { get { return default(System.Windows.Media.Int32Collection); } set { } }
    public new System.Windows.Media.Media3D.MeshGeometry3D Clone() { return default(System.Windows.Media.Media3D.MeshGeometry3D); }
    public new System.Windows.Media.Media3D.MeshGeometry3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.MeshGeometry3D); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs e) { }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public abstract partial class Model3D : System.Windows.Media.Animation.Animatable, System.IFormattable {
    internal Model3D() { }
    public static readonly System.Windows.DependencyProperty TransformProperty;
    public System.Windows.Media.Media3D.Rect3D Bounds { get { return default(System.Windows.Media.Media3D.Rect3D); } }
    public System.Windows.Media.Media3D.Transform3D Transform { get { return default(System.Windows.Media.Media3D.Transform3D); } set { } }
    public new System.Windows.Media.Media3D.Model3D Clone() { return default(System.Windows.Media.Media3D.Model3D); }
    public new System.Windows.Media.Media3D.Model3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.Model3D); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public sealed partial class Model3DCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Model3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Model3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Model3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public Model3DCollection() { }
    public Model3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Model3D> collection) { }
    public Model3DCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Media3D.Model3D this[int index] { get { return default(System.Windows.Media.Media3D.Model3D); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Model3D>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Media3D.Model3D value) { }
    public void Clear() { }
    public new System.Windows.Media.Media3D.Model3DCollection Clone() { return default(System.Windows.Media.Media3D.Model3DCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Media3D.Model3DCollection CloneCurrentValue() { return default(System.Windows.Media.Media3D.Model3DCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Media3D.Model3D value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Media3D.Model3D[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.Media3D.Model3DCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.Media3D.Model3DCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Media3D.Model3D value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Media3D.Model3D value) { }
    public bool Remove(System.Windows.Media.Media3D.Model3D value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Model3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Model3D>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Model3D>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Model3D>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Media3D.Model3D Current { get { return default(System.Windows.Media.Media3D.Model3D); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class Model3DGroup : System.Windows.Media.Media3D.Model3D {
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    public Model3DGroup() { }
    public System.Windows.Media.Media3D.Model3DCollection Children { get { return default(System.Windows.Media.Media3D.Model3DCollection); } set { } }
    public new System.Windows.Media.Media3D.Model3DGroup Clone() { return default(System.Windows.Media.Media3D.Model3DGroup); }
    public new System.Windows.Media.Media3D.Model3DGroup CloneCurrentValue() { return default(System.Windows.Media.Media3D.Model3DGroup); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Model")]
  public sealed partial class ModelUIElement3D : System.Windows.UIElement3D {
    public static readonly System.Windows.DependencyProperty ModelProperty;
    public ModelUIElement3D() { }
    public System.Windows.Media.Media3D.Model3D Model { get { return default(System.Windows.Media.Media3D.Model3D); } set { } }
    protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { return default(System.Windows.Automation.Peers.AutomationPeer); }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public partial class ModelVisual3D : System.Windows.Media.Media3D.Visual3D, System.Windows.Markup.IAddChild {
    public static readonly System.Windows.DependencyProperty ContentProperty;
    public static readonly new System.Windows.DependencyProperty TransformProperty;
    public ModelVisual3D() { }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Media.Media3D.Visual3DCollection Children { get { return default(System.Windows.Media.Media3D.Visual3DCollection); } }
    public System.Windows.Media.Media3D.Model3D Content { get { return default(System.Windows.Media.Media3D.Model3D); } set { } }
    public new System.Windows.Media.Media3D.Transform3D Transform { get { return default(System.Windows.Media.Media3D.Transform3D); } set { } }
    protected sealed override int Visual3DChildrenCount { get { return default(int); } }
    protected sealed override System.Windows.Media.Media3D.Visual3D GetVisual3DChild(int index) { return default(System.Windows.Media.Media3D.Visual3D); }
    void System.Windows.Markup.IAddChild.AddChild(object value) { }
    void System.Windows.Markup.IAddChild.AddText(string text) { }
  }
  public sealed partial class OrthographicCamera : System.Windows.Media.Media3D.ProjectionCamera {
    public static readonly System.Windows.DependencyProperty WidthProperty;
    public OrthographicCamera() { }
    public OrthographicCamera(System.Windows.Media.Media3D.Point3D position, System.Windows.Media.Media3D.Vector3D lookDirection, System.Windows.Media.Media3D.Vector3D upDirection, double width) { }
    public double Width { get { return default(double); } set { } }
    public new System.Windows.Media.Media3D.OrthographicCamera Clone() { return default(System.Windows.Media.Media3D.OrthographicCamera); }
    public new System.Windows.Media.Media3D.OrthographicCamera CloneCurrentValue() { return default(System.Windows.Media.Media3D.OrthographicCamera); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class PerspectiveCamera : System.Windows.Media.Media3D.ProjectionCamera {
    public static readonly System.Windows.DependencyProperty FieldOfViewProperty;
    public PerspectiveCamera() { }
    public PerspectiveCamera(System.Windows.Media.Media3D.Point3D position, System.Windows.Media.Media3D.Vector3D lookDirection, System.Windows.Media.Media3D.Vector3D upDirection, double fieldOfView) { }
    public double FieldOfView { get { return default(double); } set { } }
    public new System.Windows.Media.Media3D.PerspectiveCamera Clone() { return default(System.Windows.Media.Media3D.PerspectiveCamera); }
    public new System.Windows.Media.Media3D.PerspectiveCamera CloneCurrentValue() { return default(System.Windows.Media.Media3D.PerspectiveCamera); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Point3DConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Point3DValueSerializer))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Point3D : System.IFormattable {
    public Point3D(double x, double y, double z) { throw new System.NotImplementedException(); }
    public double X { get { return default(double); } set { } }
    public double Y { get { return default(double); } set { } }
    public double Z { get { return default(double); } set { } }
    public static System.Windows.Media.Media3D.Point3D Add(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Point3D); }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Media.Media3D.Point3D value) { return default(bool); }
    public static bool Equals(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Windows.Media.Media3D.Point3D Multiply(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Matrix3D matrix) { return default(System.Windows.Media.Media3D.Point3D); }
    public void Offset(double offsetX, double offsetY, double offsetZ) { }
    public static System.Windows.Media.Media3D.Point3D operator +(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Point3D); }
    public static bool operator ==(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { return default(bool); }
    public static explicit operator System.Windows.Media.Media3D.Point4D (System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Point4D); }
    public static explicit operator System.Windows.Media.Media3D.Vector3D (System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static bool operator !=(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { return default(bool); }
    public static System.Windows.Media.Media3D.Point3D operator *(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Matrix3D matrix) { return default(System.Windows.Media.Media3D.Point3D); }
    public static System.Windows.Media.Media3D.Vector3D operator -(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Point3D operator -(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Point3D); }
    public static System.Windows.Media.Media3D.Point3D Parse(string source) { return default(System.Windows.Media.Media3D.Point3D); }
    public static System.Windows.Media.Media3D.Vector3D Subtract(System.Windows.Media.Media3D.Point3D point1, System.Windows.Media.Media3D.Point3D point2) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Point3D Subtract(System.Windows.Media.Media3D.Point3D point, System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Point3D); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Point3DCollectionConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer))]
  public sealed partial class Point3DCollection : System.Windows.Freezable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Point3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Point3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Point3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable {
    public Point3DCollection() { }
    public Point3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Point3D> collection) { }
    public Point3DCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Media3D.Point3D this[int index] { get { return default(System.Windows.Media.Media3D.Point3D); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Point3D>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Media3D.Point3D value) { }
    public void Clear() { }
    public new System.Windows.Media.Media3D.Point3DCollection Clone() { return default(System.Windows.Media.Media3D.Point3DCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Media3D.Point3DCollection CloneCurrentValue() { return default(System.Windows.Media.Media3D.Point3DCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Media3D.Point3D value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Media3D.Point3D[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.Media3D.Point3DCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.Media3D.Point3DCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Media3D.Point3D value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Media3D.Point3D value) { }
    public static System.Windows.Media.Media3D.Point3DCollection Parse(string source) { return default(System.Windows.Media.Media3D.Point3DCollection); }
    public bool Remove(System.Windows.Media.Media3D.Point3D value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Point3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Point3D>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Point3D>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Point3D>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Media3D.Point3D Current { get { return default(System.Windows.Media.Media3D.Point3D); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class Point3DCollectionConverter : System.ComponentModel.TypeConverter {
    public Point3DCollectionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class Point3DConverter : System.ComponentModel.TypeConverter {
    public Point3DConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Point4DConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Point4DValueSerializer))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Point4D : System.IFormattable {
    public Point4D(double x, double y, double z, double w) { throw new System.NotImplementedException(); }
    public double W { get { return default(double); } set { } }
    public double X { get { return default(double); } set { } }
    public double Y { get { return default(double); } set { } }
    public double Z { get { return default(double); } set { } }
    public static System.Windows.Media.Media3D.Point4D Add(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { return default(System.Windows.Media.Media3D.Point4D); }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Media.Media3D.Point4D value) { return default(bool); }
    public static bool Equals(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Windows.Media.Media3D.Point4D Multiply(System.Windows.Media.Media3D.Point4D point, System.Windows.Media.Media3D.Matrix3D matrix) { return default(System.Windows.Media.Media3D.Point4D); }
    public void Offset(double deltaX, double deltaY, double deltaZ, double deltaW) { }
    public static System.Windows.Media.Media3D.Point4D operator +(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { return default(System.Windows.Media.Media3D.Point4D); }
    public static bool operator ==(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { return default(bool); }
    public static bool operator !=(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { return default(bool); }
    public static System.Windows.Media.Media3D.Point4D operator *(System.Windows.Media.Media3D.Point4D point, System.Windows.Media.Media3D.Matrix3D matrix) { return default(System.Windows.Media.Media3D.Point4D); }
    public static System.Windows.Media.Media3D.Point4D operator -(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { return default(System.Windows.Media.Media3D.Point4D); }
    public static System.Windows.Media.Media3D.Point4D Parse(string source) { return default(System.Windows.Media.Media3D.Point4D); }
    public static System.Windows.Media.Media3D.Point4D Subtract(System.Windows.Media.Media3D.Point4D point1, System.Windows.Media.Media3D.Point4D point2) { return default(System.Windows.Media.Media3D.Point4D); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public sealed partial class Point4DConverter : System.ComponentModel.TypeConverter {
    public Point4DConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class PointLight : System.Windows.Media.Media3D.PointLightBase {
    public PointLight() { }
    public PointLight(System.Windows.Media.Color diffuseColor, System.Windows.Media.Media3D.Point3D position) { }
    public new System.Windows.Media.Media3D.PointLight Clone() { return default(System.Windows.Media.Media3D.PointLight); }
    public new System.Windows.Media.Media3D.PointLight CloneCurrentValue() { return default(System.Windows.Media.Media3D.PointLight); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public abstract partial class PointLightBase : System.Windows.Media.Media3D.Light {
    internal PointLightBase() { }
    public static readonly System.Windows.DependencyProperty ConstantAttenuationProperty;
    public static readonly System.Windows.DependencyProperty LinearAttenuationProperty;
    public static readonly System.Windows.DependencyProperty PositionProperty;
    public static readonly System.Windows.DependencyProperty QuadraticAttenuationProperty;
    public static readonly System.Windows.DependencyProperty RangeProperty;
    public double ConstantAttenuation { get { return default(double); } set { } }
    public double LinearAttenuation { get { return default(double); } set { } }
    public System.Windows.Media.Media3D.Point3D Position { get { return default(System.Windows.Media.Media3D.Point3D); } set { } }
    public double QuadraticAttenuation { get { return default(double); } set { } }
    public double Range { get { return default(double); } set { } }
    public new System.Windows.Media.Media3D.PointLightBase Clone() { return default(System.Windows.Media.Media3D.PointLightBase); }
    public new System.Windows.Media.Media3D.PointLightBase CloneCurrentValue() { return default(System.Windows.Media.Media3D.PointLightBase); }
  }
  public abstract partial class ProjectionCamera : System.Windows.Media.Media3D.Camera {
    internal ProjectionCamera() { }
    public static readonly System.Windows.DependencyProperty FarPlaneDistanceProperty;
    public static readonly System.Windows.DependencyProperty LookDirectionProperty;
    public static readonly System.Windows.DependencyProperty NearPlaneDistanceProperty;
    public static readonly System.Windows.DependencyProperty PositionProperty;
    public static readonly System.Windows.DependencyProperty UpDirectionProperty;
    public double FarPlaneDistance { get { return default(double); } set { } }
    public System.Windows.Media.Media3D.Vector3D LookDirection { get { return default(System.Windows.Media.Media3D.Vector3D); } set { } }
    public double NearPlaneDistance { get { return default(double); } set { } }
    public System.Windows.Media.Media3D.Point3D Position { get { return default(System.Windows.Media.Media3D.Point3D); } set { } }
    public System.Windows.Media.Media3D.Vector3D UpDirection { get { return default(System.Windows.Media.Media3D.Vector3D); } set { } }
    public new System.Windows.Media.Media3D.ProjectionCamera Clone() { return default(System.Windows.Media.Media3D.ProjectionCamera); }
    public new System.Windows.Media.Media3D.ProjectionCamera CloneCurrentValue() { return default(System.Windows.Media.Media3D.ProjectionCamera); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.QuaternionConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.QuaternionValueSerializer))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Quaternion : System.IFormattable {
    public Quaternion(double x, double y, double z, double w) { throw new System.NotImplementedException(); }
    public Quaternion(System.Windows.Media.Media3D.Vector3D axisOfRotation, double angleInDegrees) { throw new System.NotImplementedException(); }
    public double Angle { get { return default(double); } }
    public System.Windows.Media.Media3D.Vector3D Axis { get { return default(System.Windows.Media.Media3D.Vector3D); } }
    public static System.Windows.Media.Media3D.Quaternion Identity { get { return default(System.Windows.Media.Media3D.Quaternion); } }
    public bool IsIdentity { get { return default(bool); } }
    public bool IsNormalized { get { return default(bool); } }
    public double W { get { return default(double); } set { } }
    public double X { get { return default(double); } set { } }
    public double Y { get { return default(double); } set { } }
    public double Z { get { return default(double); } set { } }
    public static System.Windows.Media.Media3D.Quaternion Add(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { return default(System.Windows.Media.Media3D.Quaternion); }
    public void Conjugate() { }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Media.Media3D.Quaternion value) { return default(bool); }
    public static bool Equals(System.Windows.Media.Media3D.Quaternion quaternion1, System.Windows.Media.Media3D.Quaternion quaternion2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public void Invert() { }
    public static System.Windows.Media.Media3D.Quaternion Multiply(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { return default(System.Windows.Media.Media3D.Quaternion); }
    public void Normalize() { }
    public static System.Windows.Media.Media3D.Quaternion operator +(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { return default(System.Windows.Media.Media3D.Quaternion); }
    public static bool operator ==(System.Windows.Media.Media3D.Quaternion quaternion1, System.Windows.Media.Media3D.Quaternion quaternion2) { return default(bool); }
    public static bool operator !=(System.Windows.Media.Media3D.Quaternion quaternion1, System.Windows.Media.Media3D.Quaternion quaternion2) { return default(bool); }
    public static System.Windows.Media.Media3D.Quaternion operator *(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { return default(System.Windows.Media.Media3D.Quaternion); }
    public static System.Windows.Media.Media3D.Quaternion operator -(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { return default(System.Windows.Media.Media3D.Quaternion); }
    public static System.Windows.Media.Media3D.Quaternion Parse(string source) { return default(System.Windows.Media.Media3D.Quaternion); }
    public static System.Windows.Media.Media3D.Quaternion Slerp(System.Windows.Media.Media3D.Quaternion from, System.Windows.Media.Media3D.Quaternion to, double t) { return default(System.Windows.Media.Media3D.Quaternion); }
    public static System.Windows.Media.Media3D.Quaternion Slerp(System.Windows.Media.Media3D.Quaternion from, System.Windows.Media.Media3D.Quaternion to, double t, bool useShortestPath) { return default(System.Windows.Media.Media3D.Quaternion); }
    public static System.Windows.Media.Media3D.Quaternion Subtract(System.Windows.Media.Media3D.Quaternion left, System.Windows.Media.Media3D.Quaternion right) { return default(System.Windows.Media.Media3D.Quaternion); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public sealed partial class QuaternionConverter : System.ComponentModel.TypeConverter {
    public QuaternionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class QuaternionRotation3D : System.Windows.Media.Media3D.Rotation3D {
    public static readonly System.Windows.DependencyProperty QuaternionProperty;
    public QuaternionRotation3D() { }
    public QuaternionRotation3D(System.Windows.Media.Media3D.Quaternion quaternion) { }
    public System.Windows.Media.Media3D.Quaternion Quaternion { get { return default(System.Windows.Media.Media3D.Quaternion); } set { } }
    public new System.Windows.Media.Media3D.QuaternionRotation3D Clone() { return default(System.Windows.Media.Media3D.QuaternionRotation3D); }
    public new System.Windows.Media.Media3D.QuaternionRotation3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.QuaternionRotation3D); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class RayHitTestParameters : System.Windows.Media.Media3D.HitTestParameters3D {
    public RayHitTestParameters(System.Windows.Media.Media3D.Point3D origin, System.Windows.Media.Media3D.Vector3D direction) { }
    public System.Windows.Media.Media3D.Vector3D Direction { get { return default(System.Windows.Media.Media3D.Vector3D); } }
    public System.Windows.Media.Media3D.Point3D Origin { get { return default(System.Windows.Media.Media3D.Point3D); } }
  }
  public abstract partial class RayHitTestResult : System.Windows.Media.HitTestResult {
    internal RayHitTestResult() { }
    public abstract double DistanceToRayOrigin { get; }
    public System.Windows.Media.Media3D.Model3D ModelHit { get { return default(System.Windows.Media.Media3D.Model3D); } }
    public abstract System.Windows.Media.Media3D.Point3D PointHit { get; }
    public new System.Windows.Media.Media3D.Visual3D VisualHit { get { return default(System.Windows.Media.Media3D.Visual3D); } }
  }
  public sealed partial class RayMeshGeometry3DHitTestResult : System.Windows.Media.Media3D.RayHitTestResult {
    internal RayMeshGeometry3DHitTestResult() { }
    public override double DistanceToRayOrigin { get { return default(double); } }
    public System.Windows.Media.Media3D.MeshGeometry3D MeshHit { get { return default(System.Windows.Media.Media3D.MeshGeometry3D); } }
    public override System.Windows.Media.Media3D.Point3D PointHit { get { return default(System.Windows.Media.Media3D.Point3D); } }
    public int VertexIndex1 { get { return default(int); } }
    public int VertexIndex2 { get { return default(int); } }
    public int VertexIndex3 { get { return default(int); } }
    public double VertexWeight1 { get { return default(double); } }
    public double VertexWeight2 { get { return default(double); } }
    public double VertexWeight3 { get { return default(double); } }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Rect3DConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Rect3DValueSerializer))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Rect3D : System.IFormattable {
    public Rect3D(double x, double y, double z, double sizeX, double sizeY, double sizeZ) { throw new System.NotImplementedException(); }
    public Rect3D(System.Windows.Media.Media3D.Point3D location, System.Windows.Media.Media3D.Size3D size) { throw new System.NotImplementedException(); }
    public static System.Windows.Media.Media3D.Rect3D Empty { get { return default(System.Windows.Media.Media3D.Rect3D); } }
    public bool IsEmpty { get { return default(bool); } }
    public System.Windows.Media.Media3D.Point3D Location { get { return default(System.Windows.Media.Media3D.Point3D); } set { } }
    public System.Windows.Media.Media3D.Size3D Size { get { return default(System.Windows.Media.Media3D.Size3D); } set { } }
    public double SizeX { get { return default(double); } set { } }
    public double SizeY { get { return default(double); } set { } }
    public double SizeZ { get { return default(double); } set { } }
    public double X { get { return default(double); } set { } }
    public double Y { get { return default(double); } set { } }
    public double Z { get { return default(double); } set { } }
    public bool Contains(double x, double y, double z) { return default(bool); }
    public bool Contains(System.Windows.Media.Media3D.Point3D point) { return default(bool); }
    public bool Contains(System.Windows.Media.Media3D.Rect3D rect) { return default(bool); }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Media.Media3D.Rect3D value) { return default(bool); }
    public static bool Equals(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public void Intersect(System.Windows.Media.Media3D.Rect3D rect) { }
    public static System.Windows.Media.Media3D.Rect3D Intersect(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { return default(System.Windows.Media.Media3D.Rect3D); }
    public bool IntersectsWith(System.Windows.Media.Media3D.Rect3D rect) { return default(bool); }
    public void Offset(double offsetX, double offsetY, double offsetZ) { }
    public static System.Windows.Media.Media3D.Rect3D Offset(System.Windows.Media.Media3D.Rect3D rect, double offsetX, double offsetY, double offsetZ) { return default(System.Windows.Media.Media3D.Rect3D); }
    public static System.Windows.Media.Media3D.Rect3D Offset(System.Windows.Media.Media3D.Rect3D rect, System.Windows.Media.Media3D.Vector3D offsetVector) { return default(System.Windows.Media.Media3D.Rect3D); }
    public void Offset(System.Windows.Media.Media3D.Vector3D offsetVector) { }
    public static bool operator ==(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { return default(bool); }
    public static bool operator !=(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { return default(bool); }
    public static System.Windows.Media.Media3D.Rect3D Parse(string source) { return default(System.Windows.Media.Media3D.Rect3D); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    public void Union(System.Windows.Media.Media3D.Point3D point) { }
    public void Union(System.Windows.Media.Media3D.Rect3D rect) { }
    public static System.Windows.Media.Media3D.Rect3D Union(System.Windows.Media.Media3D.Rect3D rect, System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Rect3D); }
    public static System.Windows.Media.Media3D.Rect3D Union(System.Windows.Media.Media3D.Rect3D rect1, System.Windows.Media.Media3D.Rect3D rect2) { return default(System.Windows.Media.Media3D.Rect3D); }
  }
  public sealed partial class Rect3DConverter : System.ComponentModel.TypeConverter {
    public Rect3DConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class RotateTransform3D : System.Windows.Media.Media3D.AffineTransform3D {
    public static readonly System.Windows.DependencyProperty CenterXProperty;
    public static readonly System.Windows.DependencyProperty CenterYProperty;
    public static readonly System.Windows.DependencyProperty CenterZProperty;
    public static readonly System.Windows.DependencyProperty RotationProperty;
    public RotateTransform3D() { }
    public RotateTransform3D(System.Windows.Media.Media3D.Rotation3D rotation) { }
    public RotateTransform3D(System.Windows.Media.Media3D.Rotation3D rotation, double centerX, double centerY, double centerZ) { }
    public RotateTransform3D(System.Windows.Media.Media3D.Rotation3D rotation, System.Windows.Media.Media3D.Point3D center) { }
    public double CenterX { get { return default(double); } set { } }
    public double CenterY { get { return default(double); } set { } }
    public double CenterZ { get { return default(double); } set { } }
    public System.Windows.Media.Media3D.Rotation3D Rotation { get { return default(System.Windows.Media.Media3D.Rotation3D); } set { } }
    public override System.Windows.Media.Media3D.Matrix3D Value { get { return default(System.Windows.Media.Media3D.Matrix3D); } }
    public new System.Windows.Media.Media3D.RotateTransform3D Clone() { return default(System.Windows.Media.Media3D.RotateTransform3D); }
    public new System.Windows.Media.Media3D.RotateTransform3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.RotateTransform3D); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public abstract partial class Rotation3D : System.Windows.Media.Animation.Animatable, System.IFormattable {
    internal Rotation3D() { }
    public static System.Windows.Media.Media3D.Rotation3D Identity { get { return default(System.Windows.Media.Media3D.Rotation3D); } }
    public new System.Windows.Media.Media3D.Rotation3D Clone() { return default(System.Windows.Media.Media3D.Rotation3D); }
    public new System.Windows.Media.Media3D.Rotation3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.Rotation3D); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public sealed partial class ScaleTransform3D : System.Windows.Media.Media3D.AffineTransform3D {
    public static readonly System.Windows.DependencyProperty CenterXProperty;
    public static readonly System.Windows.DependencyProperty CenterYProperty;
    public static readonly System.Windows.DependencyProperty CenterZProperty;
    public static readonly System.Windows.DependencyProperty ScaleXProperty;
    public static readonly System.Windows.DependencyProperty ScaleYProperty;
    public static readonly System.Windows.DependencyProperty ScaleZProperty;
    public ScaleTransform3D() { }
    public ScaleTransform3D(double scaleX, double scaleY, double scaleZ) { }
    public ScaleTransform3D(double scaleX, double scaleY, double scaleZ, double centerX, double centerY, double centerZ) { }
    public ScaleTransform3D(System.Windows.Media.Media3D.Vector3D scale) { }
    public ScaleTransform3D(System.Windows.Media.Media3D.Vector3D scale, System.Windows.Media.Media3D.Point3D center) { }
    public double CenterX { get { return default(double); } set { } }
    public double CenterY { get { return default(double); } set { } }
    public double CenterZ { get { return default(double); } set { } }
    public double ScaleX { get { return default(double); } set { } }
    public double ScaleY { get { return default(double); } set { } }
    public double ScaleZ { get { return default(double); } set { } }
    public override System.Windows.Media.Media3D.Matrix3D Value { get { return default(System.Windows.Media.Media3D.Matrix3D); } }
    public new System.Windows.Media.Media3D.ScaleTransform3D Clone() { return default(System.Windows.Media.Media3D.ScaleTransform3D); }
    public new System.Windows.Media.Media3D.ScaleTransform3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.ScaleTransform3D); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Size3DConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Size3DValueSerializer))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Size3D : System.IFormattable {
    public Size3D(double x, double y, double z) { throw new System.NotImplementedException(); }
    public static System.Windows.Media.Media3D.Size3D Empty { get { return default(System.Windows.Media.Media3D.Size3D); } }
    public bool IsEmpty { get { return default(bool); } }
    public double X { get { return default(double); } set { } }
    public double Y { get { return default(double); } set { } }
    public double Z { get { return default(double); } set { } }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Media.Media3D.Size3D value) { return default(bool); }
    public static bool Equals(System.Windows.Media.Media3D.Size3D size1, System.Windows.Media.Media3D.Size3D size2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.Media3D.Size3D size1, System.Windows.Media.Media3D.Size3D size2) { return default(bool); }
    public static explicit operator System.Windows.Media.Media3D.Point3D (System.Windows.Media.Media3D.Size3D size) { return default(System.Windows.Media.Media3D.Point3D); }
    public static explicit operator System.Windows.Media.Media3D.Vector3D (System.Windows.Media.Media3D.Size3D size) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static bool operator !=(System.Windows.Media.Media3D.Size3D size1, System.Windows.Media.Media3D.Size3D size2) { return default(bool); }
    public static System.Windows.Media.Media3D.Size3D Parse(string source) { return default(System.Windows.Media.Media3D.Size3D); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  public sealed partial class Size3DConverter : System.ComponentModel.TypeConverter {
    public Size3DConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class SpecularMaterial : System.Windows.Media.Media3D.Material {
    public static readonly System.Windows.DependencyProperty BrushProperty;
    public static readonly System.Windows.DependencyProperty ColorProperty;
    public static readonly System.Windows.DependencyProperty SpecularPowerProperty;
    public SpecularMaterial() { }
    public SpecularMaterial(System.Windows.Media.Brush brush, double specularPower) { }
    public System.Windows.Media.Brush Brush { get { return default(System.Windows.Media.Brush); } set { } }
    public System.Windows.Media.Color Color { get { return default(System.Windows.Media.Color); } set { } }
    public double SpecularPower { get { return default(double); } set { } }
    public new System.Windows.Media.Media3D.SpecularMaterial Clone() { return default(System.Windows.Media.Media3D.SpecularMaterial); }
    public new System.Windows.Media.Media3D.SpecularMaterial CloneCurrentValue() { return default(System.Windows.Media.Media3D.SpecularMaterial); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class SpotLight : System.Windows.Media.Media3D.PointLightBase {
    public static readonly System.Windows.DependencyProperty DirectionProperty;
    public static readonly System.Windows.DependencyProperty InnerConeAngleProperty;
    public static readonly System.Windows.DependencyProperty OuterConeAngleProperty;
    public SpotLight() { }
    public SpotLight(System.Windows.Media.Color diffuseColor, System.Windows.Media.Media3D.Point3D position, System.Windows.Media.Media3D.Vector3D direction, double outerConeAngle, double innerConeAngle) { }
    public System.Windows.Media.Media3D.Vector3D Direction { get { return default(System.Windows.Media.Media3D.Vector3D); } set { } }
    public double InnerConeAngle { get { return default(double); } set { } }
    public double OuterConeAngle { get { return default(double); } set { } }
    public new System.Windows.Media.Media3D.SpotLight Clone() { return default(System.Windows.Media.Media3D.SpotLight); }
    public new System.Windows.Media.Media3D.SpotLight CloneCurrentValue() { return default(System.Windows.Media.Media3D.SpotLight); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  [System.Windows.LocalizabilityAttribute((System.Windows.LocalizationCategory)(0), Readability=(System.Windows.Readability)(0))]
  public abstract partial class Transform3D : System.Windows.Media.Media3D.GeneralTransform3D {
    internal Transform3D() { }
    public static System.Windows.Media.Media3D.Transform3D Identity { get { return default(System.Windows.Media.Media3D.Transform3D); } }
    public override System.Windows.Media.Media3D.GeneralTransform3D Inverse { get { return default(System.Windows.Media.Media3D.GeneralTransform3D); } }
    public abstract bool IsAffine { get; }
    public abstract System.Windows.Media.Media3D.Matrix3D Value { get; }
    public new System.Windows.Media.Media3D.Transform3D Clone() { return default(System.Windows.Media.Media3D.Transform3D); }
    public new System.Windows.Media.Media3D.Transform3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.Transform3D); }
    public new System.Windows.Media.Media3D.Point3D Transform(System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Point3D); }
    public void Transform(System.Windows.Media.Media3D.Point3D[] points) { }
    public System.Windows.Media.Media3D.Point4D Transform(System.Windows.Media.Media3D.Point4D point) { return default(System.Windows.Media.Media3D.Point4D); }
    public void Transform(System.Windows.Media.Media3D.Point4D[] points) { }
    public System.Windows.Media.Media3D.Vector3D Transform(System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Vector3D); }
    public void Transform(System.Windows.Media.Media3D.Vector3D[] vectors) { }
    public override System.Windows.Media.Media3D.Rect3D TransformBounds(System.Windows.Media.Media3D.Rect3D rect) { return default(System.Windows.Media.Media3D.Rect3D); }
    public override bool TryTransform(System.Windows.Media.Media3D.Point3D inPoint, out System.Windows.Media.Media3D.Point3D result) { result = default(System.Windows.Media.Media3D.Point3D); return default(bool); }
  }
  public sealed partial class Transform3DCollection : System.Windows.Media.Animation.Animatable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Transform3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Transform3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Transform3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    public Transform3DCollection() { }
    public Transform3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Transform3D> collection) { }
    public Transform3DCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Media3D.Transform3D this[int index] { get { return default(System.Windows.Media.Media3D.Transform3D); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Transform3D>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Media3D.Transform3D value) { }
    public void Clear() { }
    public new System.Windows.Media.Media3D.Transform3DCollection Clone() { return default(System.Windows.Media.Media3D.Transform3DCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Media3D.Transform3DCollection CloneCurrentValue() { return default(System.Windows.Media.Media3D.Transform3DCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Media3D.Transform3D value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Media3D.Transform3D[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override bool FreezeCore(bool isChecking) { return default(bool); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.Media3D.Transform3DCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.Media3D.Transform3DCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Media3D.Transform3D value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Media3D.Transform3D value) { }
    public bool Remove(System.Windows.Media.Media3D.Transform3D value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Transform3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Transform3D>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Transform3D>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Transform3D>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Media3D.Transform3D Current { get { return default(System.Windows.Media.Media3D.Transform3D); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class Transform3DGroup : System.Windows.Media.Media3D.Transform3D {
    public static readonly System.Windows.DependencyProperty ChildrenProperty;
    public Transform3DGroup() { }
    public System.Windows.Media.Media3D.Transform3DCollection Children { get { return default(System.Windows.Media.Media3D.Transform3DCollection); } set { } }
    public override bool IsAffine { get { return default(bool); } }
    public override System.Windows.Media.Media3D.Matrix3D Value { get { return default(System.Windows.Media.Media3D.Matrix3D); } }
    public new System.Windows.Media.Media3D.Transform3DGroup Clone() { return default(System.Windows.Media.Media3D.Transform3DGroup); }
    public new System.Windows.Media.Media3D.Transform3DGroup CloneCurrentValue() { return default(System.Windows.Media.Media3D.Transform3DGroup); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  public sealed partial class TranslateTransform3D : System.Windows.Media.Media3D.AffineTransform3D {
    public static readonly System.Windows.DependencyProperty OffsetXProperty;
    public static readonly System.Windows.DependencyProperty OffsetYProperty;
    public static readonly System.Windows.DependencyProperty OffsetZProperty;
    public TranslateTransform3D() { }
    public TranslateTransform3D(double offsetX, double offsetY, double offsetZ) { }
    public TranslateTransform3D(System.Windows.Media.Media3D.Vector3D offset) { }
    public double OffsetX { get { return default(double); } set { } }
    public double OffsetY { get { return default(double); } set { } }
    public double OffsetZ { get { return default(double); } set { } }
    public override System.Windows.Media.Media3D.Matrix3D Value { get { return default(System.Windows.Media.Media3D.Matrix3D); } }
    public new System.Windows.Media.Media3D.TranslateTransform3D Clone() { return default(System.Windows.Media.Media3D.TranslateTransform3D); }
    public new System.Windows.Media.Media3D.TranslateTransform3D CloneCurrentValue() { return default(System.Windows.Media.Media3D.TranslateTransform3D); }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Vector3DConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Vector3DValueSerializer))]
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct Vector3D : System.IFormattable {
    public Vector3D(double x, double y, double z) { throw new System.NotImplementedException(); }
    public double Length { get { return default(double); } }
    public double LengthSquared { get { return default(double); } }
    public double X { get { return default(double); } set { } }
    public double Y { get { return default(double); } set { } }
    public double Z { get { return default(double); } set { } }
    public static System.Windows.Media.Media3D.Point3D Add(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Point3D); }
    public static System.Windows.Media.Media3D.Vector3D Add(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static double AngleBetween(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(double); }
    public static System.Windows.Media.Media3D.Vector3D CrossProduct(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Vector3D Divide(System.Windows.Media.Media3D.Vector3D vector, double scalar) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static double DotProduct(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(double); }
    public override bool Equals(object o) { return default(bool); }
    public bool Equals(System.Windows.Media.Media3D.Vector3D value) { return default(bool); }
    public static bool Equals(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static System.Windows.Media.Media3D.Vector3D Multiply(double scalar, System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Vector3D Multiply(System.Windows.Media.Media3D.Vector3D vector, double scalar) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Vector3D Multiply(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Matrix3D matrix) { return default(System.Windows.Media.Media3D.Vector3D); }
    public void Negate() { }
    public void Normalize() { }
    public static System.Windows.Media.Media3D.Point3D operator +(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Point3D); }
    public static System.Windows.Media.Media3D.Vector3D operator +(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Vector3D operator /(System.Windows.Media.Media3D.Vector3D vector, double scalar) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static bool operator ==(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(bool); }
    public static explicit operator System.Windows.Media.Media3D.Point3D (System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Point3D); }
    public static explicit operator System.Windows.Media.Media3D.Size3D (System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Size3D); }
    public static bool operator !=(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(bool); }
    public static System.Windows.Media.Media3D.Vector3D operator *(double scalar, System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Vector3D operator *(System.Windows.Media.Media3D.Vector3D vector, double scalar) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Vector3D operator *(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Matrix3D matrix) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Point3D operator -(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Point3D); }
    public static System.Windows.Media.Media3D.Vector3D operator -(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Vector3D operator -(System.Windows.Media.Media3D.Vector3D vector) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Vector3D Parse(string source) { return default(System.Windows.Media.Media3D.Vector3D); }
    public static System.Windows.Media.Media3D.Point3D Subtract(System.Windows.Media.Media3D.Vector3D vector, System.Windows.Media.Media3D.Point3D point) { return default(System.Windows.Media.Media3D.Point3D); }
    public static System.Windows.Media.Media3D.Vector3D Subtract(System.Windows.Media.Media3D.Vector3D vector1, System.Windows.Media.Media3D.Vector3D vector2) { return default(System.Windows.Media.Media3D.Vector3D); }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
  }
  [System.ComponentModel.TypeConverterAttribute(typeof(System.Windows.Media.Media3D.Vector3DCollectionConverter))]
  [System.Windows.Markup.ValueSerializerAttribute(typeof(System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer))]
  public sealed partial class Vector3DCollection : System.Windows.Freezable, System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Vector3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Vector3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Vector3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.IFormattable {
    public Vector3DCollection() { }
    public Vector3DCollection(System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Vector3D> collection) { }
    public Vector3DCollection(int capacity) { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Media3D.Vector3D this[int index] { get { return default(System.Windows.Media.Media3D.Vector3D); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Vector3D>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Media3D.Vector3D value) { }
    public void Clear() { }
    public new System.Windows.Media.Media3D.Vector3DCollection Clone() { return default(System.Windows.Media.Media3D.Vector3DCollection); }
    protected override void CloneCore(System.Windows.Freezable source) { }
    public new System.Windows.Media.Media3D.Vector3DCollection CloneCurrentValue() { return default(System.Windows.Media.Media3D.Vector3DCollection); }
    protected override void CloneCurrentValueCore(System.Windows.Freezable source) { }
    public bool Contains(System.Windows.Media.Media3D.Vector3D value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Media3D.Vector3D[] array, int index) { }
    protected override System.Windows.Freezable CreateInstanceCore() { return default(System.Windows.Freezable); }
    protected override void GetAsFrozenCore(System.Windows.Freezable source) { }
    protected override void GetCurrentValueAsFrozenCore(System.Windows.Freezable source) { }
    public System.Windows.Media.Media3D.Vector3DCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.Media3D.Vector3DCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Media3D.Vector3D value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Media3D.Vector3D value) { }
    public static System.Windows.Media.Media3D.Vector3DCollection Parse(string source) { return default(System.Windows.Media.Media3D.Vector3DCollection); }
    public bool Remove(System.Windows.Media.Media3D.Vector3D value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Vector3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Vector3D>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Vector3D>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    string System.IFormattable.ToString(string format, System.IFormatProvider provider) { return default(string); }
    public override string ToString() { return default(string); }
    public string ToString(System.IFormatProvider provider) { return default(string); }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Vector3D>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Media3D.Vector3D Current { get { return default(System.Windows.Media.Media3D.Vector3D); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
  public sealed partial class Vector3DCollectionConverter : System.ComponentModel.TypeConverter {
    public Vector3DCollectionConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  public sealed partial class Vector3DConverter : System.ComponentModel.TypeConverter {
    public Vector3DConverter() { }
    public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { return default(bool); }
    public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { return default(bool); }
    public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { return default(object); }
    public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { return default(object); }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Visual")]
  public sealed partial class Viewport2DVisual3D : System.Windows.Media.Media3D.Visual3D {
    public static readonly System.Windows.DependencyProperty CacheModeProperty;
    public static readonly System.Windows.DependencyProperty GeometryProperty;
    public static readonly System.Windows.DependencyProperty IsVisualHostMaterialProperty;
    public static readonly System.Windows.DependencyProperty MaterialProperty;
    public static readonly System.Windows.DependencyProperty VisualProperty;
    public Viewport2DVisual3D() { }
    public System.Windows.Media.CacheMode CacheMode { get { return default(System.Windows.Media.CacheMode); } set { } }
    public System.Windows.Media.Media3D.Geometry3D Geometry { get { return default(System.Windows.Media.Media3D.Geometry3D); } set { } }
    public System.Windows.Media.Media3D.Material Material { get { return default(System.Windows.Media.Media3D.Material); } set { } }
    public System.Windows.Media.Visual Visual { get { return default(System.Windows.Media.Visual); } set { } }
    protected override int Visual3DChildrenCount { get { return default(int); } }
    public static bool GetIsVisualHostMaterial(System.Windows.Media.Media3D.Material element) { return default(bool); }
    protected override System.Windows.Media.Media3D.Visual3D GetVisual3DChild(int index) { return default(System.Windows.Media.Media3D.Visual3D); }
    public static void SetIsVisualHostMaterial(System.Windows.Media.Media3D.Material element, bool value) { }
  }
  [System.Windows.Markup.ContentPropertyAttribute("Children")]
  public sealed partial class Viewport3DVisual : System.Windows.Media.Visual {
    public static readonly System.Windows.DependencyProperty CameraProperty;
    public static readonly System.Windows.DependencyProperty ViewportProperty;
    public Viewport3DVisual() { }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get { return default(System.Windows.Media.Effects.BitmapEffect); } set { } }
    [System.ObsoleteAttribute("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")]
    public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get { return default(System.Windows.Media.Effects.BitmapEffectInput); } set { } }
    public System.Windows.Media.Media3D.Camera Camera { get { return default(System.Windows.Media.Media3D.Camera); } set { } }
    [System.ComponentModel.DesignerSerializationVisibilityAttribute((System.ComponentModel.DesignerSerializationVisibility)(2))]
    public System.Windows.Media.Media3D.Visual3DCollection Children { get { return default(System.Windows.Media.Media3D.Visual3DCollection); } }
    public System.Windows.Media.Geometry Clip { get { return default(System.Windows.Media.Geometry); } set { } }
    public System.Windows.Rect ContentBounds { get { return default(System.Windows.Rect); } }
    public System.Windows.Rect DescendantBounds { get { return default(System.Windows.Rect); } }
    public System.Windows.Vector Offset { get { return default(System.Windows.Vector); } set { } }
    public double Opacity { get { return default(double); } set { } }
    public System.Windows.Media.Brush OpacityMask { get { return default(System.Windows.Media.Brush); } set { } }
    public System.Windows.DependencyObject Parent { get { return default(System.Windows.DependencyObject); } }
    public System.Windows.Media.Transform Transform { get { return default(System.Windows.Media.Transform); } set { } }
    public System.Windows.Rect Viewport { get { return default(System.Windows.Rect); } set { } }
    public void HitTest(System.Windows.Media.HitTestFilterCallback filterCallback, System.Windows.Media.HitTestResultCallback resultCallback, System.Windows.Media.HitTestParameters hitTestParameters) { }
    public System.Windows.Media.HitTestResult HitTest(System.Windows.Point point) { return default(System.Windows.Media.HitTestResult); }
    protected override System.Windows.Media.GeometryHitTestResult HitTestCore(System.Windows.Media.GeometryHitTestParameters hitTestParameters) { return default(System.Windows.Media.GeometryHitTestResult); }
  }
  public abstract partial class Visual3D : System.Windows.DependencyObject, System.Windows.Media.Animation.IAnimatable {
    internal Visual3D() { }
    public static readonly System.Windows.DependencyProperty TransformProperty;
    public bool HasAnimatedProperties { get { return default(bool); } }
    public System.Windows.Media.Media3D.Transform3D Transform { get { return default(System.Windows.Media.Media3D.Transform3D); } set { } }
    protected virtual int Visual3DChildrenCount { get { return default(int); } }
    protected System.Windows.Media.Media3D.Model3D Visual3DModel { get { return default(System.Windows.Media.Media3D.Model3D); } set { } }
    protected void AddVisual3DChild(System.Windows.Media.Media3D.Visual3D child) { }
    public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock) { }
    public void ApplyAnimationClock(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
    public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation) { }
    public void BeginAnimation(System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior) { }
    public System.Windows.DependencyObject FindCommonVisualAncestor(System.Windows.DependencyObject otherVisual) { return default(System.Windows.DependencyObject); }
    public object GetAnimationBaseValue(System.Windows.DependencyProperty dp) { return default(object); }
    protected virtual System.Windows.Media.Media3D.Visual3D GetVisual3DChild(int index) { return default(System.Windows.Media.Media3D.Visual3D); }
    public bool IsAncestorOf(System.Windows.DependencyObject descendant) { return default(bool); }
    public bool IsDescendantOf(System.Windows.DependencyObject ancestor) { return default(bool); }
    protected internal virtual void OnVisualChildrenChanged(System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved) { }
    protected internal virtual void OnVisualParentChanged(System.Windows.DependencyObject oldParent) { }
    protected void RemoveVisual3DChild(System.Windows.Media.Media3D.Visual3D child) { }
    public System.Windows.Media.Media3D.GeneralTransform3D TransformToAncestor(System.Windows.Media.Media3D.Visual3D ancestor) { return default(System.Windows.Media.Media3D.GeneralTransform3D); }
    public System.Windows.Media.Media3D.GeneralTransform3DTo2D TransformToAncestor(System.Windows.Media.Visual ancestor) { return default(System.Windows.Media.Media3D.GeneralTransform3DTo2D); }
    public System.Windows.Media.Media3D.GeneralTransform3D TransformToDescendant(System.Windows.Media.Media3D.Visual3D descendant) { return default(System.Windows.Media.Media3D.GeneralTransform3D); }
  }
  public sealed partial class Visual3DCollection : System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Visual3D>, System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Visual3D>, System.Collections.Generic.IList<System.Windows.Media.Media3D.Visual3D>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList {
    internal Visual3DCollection() { }
    public int Count { get { return default(int); } }
    public System.Windows.Media.Media3D.Visual3D this[int index] { get { return default(System.Windows.Media.Media3D.Visual3D); } set { } }
    bool System.Collections.Generic.ICollection<System.Windows.Media.Media3D.Visual3D>.IsReadOnly { get { return default(bool); } }
    bool System.Collections.ICollection.IsSynchronized { get { return default(bool); } }
    object System.Collections.ICollection.SyncRoot { get { return default(object); } }
    bool System.Collections.IList.IsFixedSize { get { return default(bool); } }
    bool System.Collections.IList.IsReadOnly { get { return default(bool); } }
    object System.Collections.IList.this[int index] { get { return default(object); } set { } }
    public void Add(System.Windows.Media.Media3D.Visual3D value) { }
    public void Clear() { }
    public bool Contains(System.Windows.Media.Media3D.Visual3D value) { return default(bool); }
    public void CopyTo(System.Windows.Media.Media3D.Visual3D[] array, int index) { }
    public System.Windows.Media.Media3D.Visual3DCollection.Enumerator GetEnumerator() { return default(System.Windows.Media.Media3D.Visual3DCollection.Enumerator); }
    public int IndexOf(System.Windows.Media.Media3D.Visual3D value) { return default(int); }
    public void Insert(int index, System.Windows.Media.Media3D.Visual3D value) { }
    public bool Remove(System.Windows.Media.Media3D.Visual3D value) { return default(bool); }
    public void RemoveAt(int index) { }
    System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Visual3D> System.Collections.Generic.IEnumerable<System.Windows.Media.Media3D.Visual3D>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Visual3D>); }
    void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
    int System.Collections.IList.Add(object value) { return default(int); }
    bool System.Collections.IList.Contains(object value) { return default(bool); }
    int System.Collections.IList.IndexOf(object value) { return default(int); }
    void System.Collections.IList.Insert(int index, object value) { }
    void System.Collections.IList.Remove(object value) { }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct Enumerator : System.Collections.Generic.IEnumerator<System.Windows.Media.Media3D.Visual3D>, System.Collections.IEnumerator, System.IDisposable {
      public System.Windows.Media.Media3D.Visual3D Current { get { return default(System.Windows.Media.Media3D.Visual3D); } }
      object System.Collections.IEnumerator.Current { get { return default(object); } }
      public bool MoveNext() { return default(bool); }
      public void Reset() { }
      void System.IDisposable.Dispose() { }
    }
  }
}
namespace System.Windows.Media.Media3D.Converters {
  public partial class Matrix3DValueSerializer : System.Windows.Markup.ValueSerializer {
    public Matrix3DValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class Point3DCollectionValueSerializer : System.Windows.Markup.ValueSerializer {
    public Point3DCollectionValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class Point3DValueSerializer : System.Windows.Markup.ValueSerializer {
    public Point3DValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class Point4DValueSerializer : System.Windows.Markup.ValueSerializer {
    public Point4DValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class QuaternionValueSerializer : System.Windows.Markup.ValueSerializer {
    public QuaternionValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class Rect3DValueSerializer : System.Windows.Markup.ValueSerializer {
    public Rect3DValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class Size3DValueSerializer : System.Windows.Markup.ValueSerializer {
    public Size3DValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class Vector3DCollectionValueSerializer : System.Windows.Markup.ValueSerializer {
    public Vector3DCollectionValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
  public partial class Vector3DValueSerializer : System.Windows.Markup.ValueSerializer {
    public Vector3DValueSerializer() { }
    public override bool CanConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override bool CanConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(bool); }
    public override object ConvertFromString(string value, System.Windows.Markup.IValueSerializerContext context) { return default(object); }
    public override string ConvertToString(object value, System.Windows.Markup.IValueSerializerContext context) { return default(string); }
  }
}
namespace System.Windows.Media.TextFormatting {
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct CharacterBufferRange : System.IEquatable<System.Windows.Media.TextFormatting.CharacterBufferRange> {
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe CharacterBufferRange(char* unsafeCharacterString, int characterLength) { throw new System.NotImplementedException(); }
    public CharacterBufferRange(System.Char[] characterArray, int offsetToFirstChar, int characterLength) { throw new System.NotImplementedException(); }
    public CharacterBufferRange(string characterString, int offsetToFirstChar, int characterLength) { throw new System.NotImplementedException(); }
    public System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { return default(System.Windows.Media.TextFormatting.CharacterBufferReference); } }
    public static System.Windows.Media.TextFormatting.CharacterBufferRange Empty { get { return default(System.Windows.Media.TextFormatting.CharacterBufferRange); } }
    public int Length { get { return default(int); } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.Media.TextFormatting.CharacterBufferRange value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.TextFormatting.CharacterBufferRange left, System.Windows.Media.TextFormatting.CharacterBufferRange right) { return default(bool); }
    public static bool operator !=(System.Windows.Media.TextFormatting.CharacterBufferRange left, System.Windows.Media.TextFormatting.CharacterBufferRange right) { return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct CharacterBufferReference : System.IEquatable<System.Windows.Media.TextFormatting.CharacterBufferReference> {
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe CharacterBufferReference(char* unsafeCharacterString, int characterLength) { throw new System.NotImplementedException(); }
    public CharacterBufferReference(System.Char[] characterArray, int offsetToFirstChar) { throw new System.NotImplementedException(); }
    public CharacterBufferReference(string characterString, int offsetToFirstChar) { throw new System.NotImplementedException(); }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.Media.TextFormatting.CharacterBufferReference value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.TextFormatting.CharacterBufferReference left, System.Windows.Media.TextFormatting.CharacterBufferReference right) { return default(bool); }
    public static bool operator !=(System.Windows.Media.TextFormatting.CharacterBufferReference left, System.Windows.Media.TextFormatting.CharacterBufferReference right) { return default(bool); }
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct CharacterHit : System.IEquatable<System.Windows.Media.TextFormatting.CharacterHit> {
    public CharacterHit(int firstCharacterIndex, int trailingLength) { throw new System.NotImplementedException(); }
    public int FirstCharacterIndex { get { return default(int); } }
    public int TrailingLength { get { return default(int); } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.Media.TextFormatting.CharacterHit obj) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.TextFormatting.CharacterHit left, System.Windows.Media.TextFormatting.CharacterHit right) { return default(bool); }
    public static bool operator !=(System.Windows.Media.TextFormatting.CharacterHit left, System.Windows.Media.TextFormatting.CharacterHit right) { return default(bool); }
  }
  public partial class CultureSpecificCharacterBufferRange {
    public CultureSpecificCharacterBufferRange(System.Globalization.CultureInfo culture, System.Windows.Media.TextFormatting.CharacterBufferRange characterBufferRange) { }
    public System.Windows.Media.TextFormatting.CharacterBufferRange CharacterBufferRange { get { return default(System.Windows.Media.TextFormatting.CharacterBufferRange); } }
    public System.Globalization.CultureInfo CultureInfo { get { return default(System.Globalization.CultureInfo); } }
  }
  public sealed partial class IndexedGlyphRun {
    internal IndexedGlyphRun() { }
    public System.Windows.Media.GlyphRun GlyphRun { get { return default(System.Windows.Media.GlyphRun); } }
    public int TextSourceCharacterIndex { get { return default(int); } }
    public int TextSourceLength { get { return default(int); } }
  }
  [System.FlagsAttribute]
  public enum InvertAxes {
    Both = 3,
    Horizontal = 1,
    None = 0,
    Vertical = 2,
  }
  [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
  public partial struct MinMaxParagraphWidth : System.IEquatable<System.Windows.Media.TextFormatting.MinMaxParagraphWidth> {
    public double MaxWidth { get { return default(double); } }
    public double MinWidth { get { return default(double); } }
    public override bool Equals(object obj) { return default(bool); }
    public bool Equals(System.Windows.Media.TextFormatting.MinMaxParagraphWidth value) { return default(bool); }
    public override int GetHashCode() { return default(int); }
    public static bool operator ==(System.Windows.Media.TextFormatting.MinMaxParagraphWidth left, System.Windows.Media.TextFormatting.MinMaxParagraphWidth right) { return default(bool); }
    public static bool operator !=(System.Windows.Media.TextFormatting.MinMaxParagraphWidth left, System.Windows.Media.TextFormatting.MinMaxParagraphWidth right) { return default(bool); }
  }
  public sealed partial class TextBounds {
    internal TextBounds() { }
    public System.Windows.FlowDirection FlowDirection { get { return default(System.Windows.FlowDirection); } }
    public System.Windows.Rect Rectangle { get { return default(System.Windows.Rect); } }
    public System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextRunBounds> TextRunBounds { get { return default(System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextRunBounds>); } }
  }
  public partial class TextCharacters : System.Windows.Media.TextFormatting.TextRun {
    [System.CLSCompliantAttribute(false)]
    [System.Security.SecurityCriticalAttribute]
    public unsafe TextCharacters(char* unsafeCharacterString, int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
    public TextCharacters(System.Char[] characterArray, int offsetToFirstChar, int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
    public TextCharacters(string characterString, int offsetToFirstChar, int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
    public TextCharacters(string characterString, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
    public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { return default(System.Windows.Media.TextFormatting.CharacterBufferReference); } }
    public sealed override int Length { get { return default(int); } }
    public sealed override System.Windows.Media.TextFormatting.TextRunProperties Properties { get { return default(System.Windows.Media.TextFormatting.TextRunProperties); } }
  }
  public sealed partial class TextCollapsedRange {
    internal TextCollapsedRange() { }
    public int Length { get { return default(int); } }
    public int TextSourceCharacterIndex { get { return default(int); } }
    public double Width { get { return default(double); } }
  }
  public abstract partial class TextCollapsingProperties {
    protected TextCollapsingProperties() { }
    public abstract System.Windows.Media.TextFormatting.TextCollapsingStyle Style { get; }
    public abstract System.Windows.Media.TextFormatting.TextRun Symbol { get; }
    public abstract double Width { get; }
  }
  public enum TextCollapsingStyle {
    TrailingCharacter = 0,
    TrailingWord = 1,
  }
  public abstract partial class TextEmbeddedObject : System.Windows.Media.TextFormatting.TextRun {
    protected TextEmbeddedObject() { }
    public abstract System.Windows.LineBreakCondition BreakAfter { get; }
    public abstract System.Windows.LineBreakCondition BreakBefore { get; }
    public abstract bool HasFixedSize { get; }
    public abstract System.Windows.Rect ComputeBoundingBox(bool rightToLeft, bool sideways);
    public abstract void Draw(System.Windows.Media.DrawingContext drawingContext, System.Windows.Point origin, bool rightToLeft, bool sideways);
    public abstract System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics Format(double remainingParagraphWidth);
  }
  public partial class TextEmbeddedObjectMetrics {
    public TextEmbeddedObjectMetrics(double width, double height, double baseline) { }
    public double Baseline { get { return default(double); } }
    public double Height { get { return default(double); } }
    public double Width { get { return default(double); } }
  }
  public partial class TextEndOfLine : System.Windows.Media.TextFormatting.TextRun {
    public TextEndOfLine(int length) { }
    public TextEndOfLine(int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
    public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { return default(System.Windows.Media.TextFormatting.CharacterBufferReference); } }
    public sealed override int Length { get { return default(int); } }
    public sealed override System.Windows.Media.TextFormatting.TextRunProperties Properties { get { return default(System.Windows.Media.TextFormatting.TextRunProperties); } }
  }
  public partial class TextEndOfParagraph : System.Windows.Media.TextFormatting.TextEndOfLine {
    public TextEndOfParagraph(int length) : base (default(int)) { }
    public TextEndOfParagraph(int length, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) : base (default(int)) { }
  }
  public partial class TextEndOfSegment : System.Windows.Media.TextFormatting.TextRun {
    public TextEndOfSegment(int length) { }
    public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { return default(System.Windows.Media.TextFormatting.CharacterBufferReference); } }
    public sealed override int Length { get { return default(int); } }
    public sealed override System.Windows.Media.TextFormatting.TextRunProperties Properties { get { return default(System.Windows.Media.TextFormatting.TextRunProperties); } }
  }
  public abstract partial class TextFormatter : System.IDisposable {
    protected TextFormatter() { }
    public static System.Windows.Media.TextFormatting.TextFormatter Create() { return default(System.Windows.Media.TextFormatting.TextFormatter); }
    public static System.Windows.Media.TextFormatting.TextFormatter Create(System.Windows.Media.TextFormattingMode textFormattingMode) { return default(System.Windows.Media.TextFormatting.TextFormatter); }
    public virtual void Dispose() { }
    public abstract System.Windows.Media.TextFormatting.TextLine FormatLine(System.Windows.Media.TextFormatting.TextSource textSource, int firstCharIndex, double paragraphWidth, System.Windows.Media.TextFormatting.TextParagraphProperties paragraphProperties, System.Windows.Media.TextFormatting.TextLineBreak previousLineBreak);
    public abstract System.Windows.Media.TextFormatting.TextLine FormatLine(System.Windows.Media.TextFormatting.TextSource textSource, int firstCharIndex, double paragraphWidth, System.Windows.Media.TextFormatting.TextParagraphProperties paragraphProperties, System.Windows.Media.TextFormatting.TextLineBreak previousLineBreak, System.Windows.Media.TextFormatting.TextRunCache textRunCache);
    public abstract System.Windows.Media.TextFormatting.MinMaxParagraphWidth FormatMinMaxParagraphWidth(System.Windows.Media.TextFormatting.TextSource textSource, int firstCharIndex, System.Windows.Media.TextFormatting.TextParagraphProperties paragraphProperties);
    public abstract System.Windows.Media.TextFormatting.MinMaxParagraphWidth FormatMinMaxParagraphWidth(System.Windows.Media.TextFormatting.TextSource textSource, int firstCharIndex, System.Windows.Media.TextFormatting.TextParagraphProperties paragraphProperties, System.Windows.Media.TextFormatting.TextRunCache textRunCache);
  }
  public partial class TextHidden : System.Windows.Media.TextFormatting.TextRun {
    public TextHidden(int length) { }
    public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { return default(System.Windows.Media.TextFormatting.CharacterBufferReference); } }
    public sealed override int Length { get { return default(int); } }
    public sealed override System.Windows.Media.TextFormatting.TextRunProperties Properties { get { return default(System.Windows.Media.TextFormatting.TextRunProperties); } }
  }
  public abstract partial class TextLine : System.IDisposable {
    protected TextLine() { }
    protected TextLine(double pixelsPerDip) { }
    public abstract double Baseline { get; }
    public abstract int DependentLength { get; }
    public abstract double Extent { get; }
    public abstract bool HasCollapsed { get; }
    public abstract bool HasOverflowed { get; }
    public abstract double Height { get; }
    public virtual bool IsTruncated { get { return default(bool); } }
    public abstract int Length { get; }
    public abstract double MarkerBaseline { get; }
    public abstract double MarkerHeight { get; }
    public abstract int NewlineLength { get; }
    public abstract double OverhangAfter { get; }
    public abstract double OverhangLeading { get; }
    public abstract double OverhangTrailing { get; }
    public double PixelsPerDip { get { return default(double); } set { } }
    public abstract double Start { get; }
    public abstract double TextBaseline { get; }
    public abstract double TextHeight { get; }
    public abstract int TrailingWhitespaceLength { get; }
    public abstract double Width { get; }
    public abstract double WidthIncludingTrailingWhitespace { get; }
    public abstract System.Windows.Media.TextFormatting.TextLine Collapse(params System.Windows.Media.TextFormatting.TextCollapsingProperties[] collapsingPropertiesList);
    public abstract void Dispose();
    public abstract void Draw(System.Windows.Media.DrawingContext drawingContext, System.Windows.Point origin, System.Windows.Media.TextFormatting.InvertAxes inversion);
    public abstract System.Windows.Media.TextFormatting.CharacterHit GetBackspaceCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit);
    public abstract System.Windows.Media.TextFormatting.CharacterHit GetCharacterHitFromDistance(double distance);
    public abstract double GetDistanceFromCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit);
    public abstract System.Collections.Generic.IEnumerable<System.Windows.Media.TextFormatting.IndexedGlyphRun> GetIndexedGlyphRuns();
    public abstract System.Windows.Media.TextFormatting.CharacterHit GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit);
    public abstract System.Windows.Media.TextFormatting.CharacterHit GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit characterHit);
    public abstract System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextBounds> GetTextBounds(int firstTextSourceCharacterIndex, int textLength);
    public abstract System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextCollapsedRange> GetTextCollapsedRanges();
    public abstract System.Windows.Media.TextFormatting.TextLineBreak GetTextLineBreak();
    public abstract System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextSpan<System.Windows.Media.TextFormatting.TextRun>> GetTextRunSpans();
  }
  public sealed partial class TextLineBreak : System.IDisposable {
    internal TextLineBreak() { }
    [System.Security.SecurityCriticalAttribute]
    public System.Windows.Media.TextFormatting.TextLineBreak Clone() { return default(System.Windows.Media.TextFormatting.TextLineBreak); }
    public void Dispose() { }
    ~TextLineBreak() { }
  }
  public abstract partial class TextMarkerProperties {
    protected TextMarkerProperties() { }
    public abstract double Offset { get; }
    public abstract System.Windows.Media.TextFormatting.TextSource TextSource { get; }
  }
  public abstract partial class TextModifier : System.Windows.Media.TextFormatting.TextRun {
    protected TextModifier() { }
    public sealed override System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get { return default(System.Windows.Media.TextFormatting.CharacterBufferReference); } }
    public abstract System.Windows.FlowDirection FlowDirection { get; }
    public abstract bool HasDirectionalEmbedding { get; }
    public abstract System.Windows.Media.TextFormatting.TextRunProperties ModifyProperties(System.Windows.Media.TextFormatting.TextRunProperties properties);
  }
  public abstract partial class TextParagraphProperties {
    protected TextParagraphProperties() { }
    public virtual bool AlwaysCollapsible { get { return default(bool); } }
    public virtual double DefaultIncrementalTab { get { return default(double); } }
    public abstract System.Windows.Media.TextFormatting.TextRunProperties DefaultTextRunProperties { get; }
    public abstract bool FirstLineInParagraph { get; }
    public abstract System.Windows.FlowDirection FlowDirection { get; }
    public abstract double Indent { get; }
    public abstract double LineHeight { get; }
    public virtual double ParagraphIndent { get { return default(double); } }
    public virtual System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextTabProperties> Tabs { get { return default(System.Collections.Generic.IList<System.Windows.Media.TextFormatting.TextTabProperties>); } }
    public abstract System.Windows.TextAlignment TextAlignment { get; }
    public virtual System.Windows.TextDecorationCollection TextDecorations { get { return default(System.Windows.TextDecorationCollection); } }
    public abstract System.Windows.Media.TextFormatting.TextMarkerProperties TextMarkerProperties { get; }
    public abstract System.Windows.TextWrapping TextWrapping { get; }
  }
  public abstract partial class TextRun {
    protected TextRun() { }
    public abstract System.Windows.Media.TextFormatting.CharacterBufferReference CharacterBufferReference { get; }
    public abstract int Length { get; }
    public abstract System.Windows.Media.TextFormatting.TextRunProperties Properties { get; }
  }
  public sealed partial class TextRunBounds {
    internal TextRunBounds() { }
    public int Length { get { return default(int); } }
    public System.Windows.Rect Rectangle { get { return default(System.Windows.Rect); } }
    public System.Windows.Media.TextFormatting.TextRun TextRun { get { return default(System.Windows.Media.TextFormatting.TextRun); } }
    public int TextSourceCharacterIndex { get { return default(int); } }
  }
  public sealed partial class TextRunCache {
    public TextRunCache() { }
    public void Change(int textSourceCharacterIndex, int addition, int removal) { }
    public void Invalidate() { }
  }
  public abstract partial class TextRunProperties {
    protected TextRunProperties() { }
    public abstract System.Windows.Media.Brush BackgroundBrush { get; }
    public virtual System.Windows.BaselineAlignment BaselineAlignment { get { return default(System.Windows.BaselineAlignment); } }
    public abstract System.Globalization.CultureInfo CultureInfo { get; }
    public abstract double FontHintingEmSize { get; }
    public abstract double FontRenderingEmSize { get; }
    public abstract System.Windows.Media.Brush ForegroundBrush { get; }
    public virtual System.Windows.Media.NumberSubstitution NumberSubstitution { get { return default(System.Windows.Media.NumberSubstitution); } }
    public double PixelsPerDip { get { return default(double); } set { } }
    public abstract System.Windows.TextDecorationCollection TextDecorations { get; }
    public abstract System.Windows.Media.TextEffectCollection TextEffects { get; }
    public abstract System.Windows.Media.Typeface Typeface { get; }
    public virtual System.Windows.Media.TextFormatting.TextRunTypographyProperties TypographyProperties { get { return default(System.Windows.Media.TextFormatting.TextRunTypographyProperties); } }
  }
  public abstract partial class TextRunTypographyProperties {
    protected TextRunTypographyProperties() { }
    public abstract int AnnotationAlternates { get; }
    public abstract System.Windows.FontCapitals Capitals { get; }
    public abstract bool CapitalSpacing { get; }
    public abstract bool CaseSensitiveForms { get; }
    public abstract bool ContextualAlternates { get; }
    public abstract bool ContextualLigatures { get; }
    public abstract int ContextualSwashes { get; }
    public abstract bool DiscretionaryLigatures { get; }
    public abstract bool EastAsianExpertForms { get; }
    public abstract System.Windows.FontEastAsianLanguage EastAsianLanguage { get; }
    public abstract System.Windows.FontEastAsianWidths EastAsianWidths { get; }
    public abstract System.Windows.FontFraction Fraction { get; }
    public abstract bool HistoricalForms { get; }
    public abstract bool HistoricalLigatures { get; }
    public abstract bool Kerning { get; }
    public abstract bool MathematicalGreek { get; }
    public abstract System.Windows.FontNumeralAlignment NumeralAlignment { get; }
    public abstract System.Windows.FontNumeralStyle NumeralStyle { get; }
    public abstract bool SlashedZero { get; }
    public abstract bool StandardLigatures { get; }
    public abstract int StandardSwashes { get; }
    public abstract int StylisticAlternates { get; }
    public abstract bool StylisticSet1 { get; }
    public abstract bool StylisticSet10 { get; }
    public abstract bool StylisticSet11 { get; }
    public abstract bool StylisticSet12 { get; }
    public abstract bool StylisticSet13 { get; }
    public abstract bool StylisticSet14 { get; }
    public abstract bool StylisticSet15 { get; }
    public abstract bool StylisticSet16 { get; }
    public abstract bool StylisticSet17 { get; }
    public abstract bool StylisticSet18 { get; }
    public abstract bool StylisticSet19 { get; }
    public abstract bool StylisticSet2 { get; }
    public abstract bool StylisticSet20 { get; }
    public abstract bool StylisticSet3 { get; }
    public abstract bool StylisticSet4 { get; }
    public abstract bool StylisticSet5 { get; }
    public abstract bool StylisticSet6 { get; }
    public abstract bool StylisticSet7 { get; }
    public abstract bool StylisticSet8 { get; }
    public abstract bool StylisticSet9 { get; }
    public abstract System.Windows.FontVariants Variants { get; }
    protected void OnPropertiesChanged() { }
  }
  public partial class TextSimpleMarkerProperties : System.Windows.Media.TextFormatting.TextMarkerProperties {
    public TextSimpleMarkerProperties(System.Windows.TextMarkerStyle style, double offset, int autoNumberingIndex, System.Windows.Media.TextFormatting.TextParagraphProperties textParagraphProperties) { }
    public sealed override double Offset { get { return default(double); } }
    public sealed override System.Windows.Media.TextFormatting.TextSource TextSource { get { return default(System.Windows.Media.TextFormatting.TextSource); } }
  }
  public abstract partial class TextSource {
    protected TextSource() { }
    public double PixelsPerDip { get { return default(double); } set { } }
    public abstract System.Windows.Media.TextFormatting.TextSpan<System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange> GetPrecedingText(int textSourceCharacterIndexLimit);
    public abstract int GetTextEffectCharacterIndexFromTextSourceCharacterIndex(int textSourceCharacterIndex);
    public abstract System.Windows.Media.TextFormatting.TextRun GetTextRun(int textSourceCharacterIndex);
  }
  public partial class TextSpan<T> {
    public TextSpan(int length, T value) { }
    public int Length { get { return default(int); } }
    public T Value { get { return default(T); } }
  }
  public enum TextTabAlignment {
    Center = 1,
    Character = 3,
    Left = 0,
    Right = 2,
  }
  public partial class TextTabProperties {
    public TextTabProperties(System.Windows.Media.TextFormatting.TextTabAlignment alignment, double location, int tabLeader, int aligningChar) { }
    public int AligningCharacter { get { return default(int); } }
    public System.Windows.Media.TextFormatting.TextTabAlignment Alignment { get { return default(System.Windows.Media.TextFormatting.TextTabAlignment); } }
    public double Location { get { return default(double); } }
    public int TabLeader { get { return default(int); } }
  }
  public partial class TextTrailingCharacterEllipsis : System.Windows.Media.TextFormatting.TextCollapsingProperties {
    public TextTrailingCharacterEllipsis(double width, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
    public sealed override System.Windows.Media.TextFormatting.TextCollapsingStyle Style { get { return default(System.Windows.Media.TextFormatting.TextCollapsingStyle); } }
    public sealed override System.Windows.Media.TextFormatting.TextRun Symbol { get { return default(System.Windows.Media.TextFormatting.TextRun); } }
    public sealed override double Width { get { return default(double); } }
  }
  public partial class TextTrailingWordEllipsis : System.Windows.Media.TextFormatting.TextCollapsingProperties {
    public TextTrailingWordEllipsis(double width, System.Windows.Media.TextFormatting.TextRunProperties textRunProperties) { }
    public sealed override System.Windows.Media.TextFormatting.TextCollapsingStyle Style { get { return default(System.Windows.Media.TextFormatting.TextCollapsingStyle); } }
    public sealed override System.Windows.Media.TextFormatting.TextRun Symbol { get { return default(System.Windows.Media.TextFormatting.TextRun); } }
    public sealed override double Width { get { return default(double); } }
  }
}
namespace System.Windows.Navigation {
  public static partial class BaseUriHelper {
    public static readonly System.Windows.DependencyProperty BaseUriProperty;
    [System.Security.SecurityCriticalAttribute]
    public static System.Uri GetBaseUri(System.Windows.DependencyObject element) { return default(System.Uri); }
  }
}
namespace System.Windows.Resources {
  [System.AttributeUsageAttribute((System.AttributeTargets)(1), AllowMultiple=true)]
  public sealed partial class AssemblyAssociatedContentFileAttribute : System.Attribute {
    public AssemblyAssociatedContentFileAttribute(string relativeContentFilePath) { }
    public string RelativeContentFilePath { get { return default(string); } }
  }
}
